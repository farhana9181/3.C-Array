#! /usr/bin/env node

'use strict'

const fs = require('fs');
const path = require('path');

const args = process.argv.slice(2);
const dir = args[0];
if (!dir) {
  console.log('Usage: node ' + path.basename(__filename) + ' <target-dir>');
  process.exit(1);
}

const NodeApiVersion = require('../package.json').version;

const disable = args[1];
if (disable != "--disable" && dir != "--disable") {
  var ConfigFileOperations = {
    'package.json': [
       [ /([ ]*)"dependencies": {/g, '$1"dependencies": {\n$1  "node-addon-api": "' + NodeApiVersion + '",'],
       [ /[ ]*"nan": *"[^"]+"(,|)[\n\r]/g, '' ]
    ],
    'binding.gyp': [
       [ /([ ]*)'include_dirs': \[/g, '$1\'include_dirs\': [\n$1  \'<!(node -p "require(\\\'node-addon-api\\\').include_dir")\',' ],
       [ /([ ]*)"include_dirs": \[/g, '$1"include_dirs": [\n$1  "<!(node -p \\"require(\'node-addon-api\').include_dir\\")",' ],
       [ /[ ]*("|')<!\(node -e ("|'|\\"|\\')require\(("|'|\\"|\\')nan("|'|\\"|\\')\)("|'|\\"|\\')\)("|')(,|)[\r\n]/g, '' ],
       [ /([ ]*)("|')target_name("|'): ("|')(.+?)("|'),/g, '$1$2target_name$2: $4$5$6,\n      $2cflags!$2: [ $2-fno-exceptions$2 ],\n      $2cflags_cc!$2: [ $2-fno-exceptions$2 ],\n      $2xcode_settings$2: { $2GCC_ENABLE_CPP_EXCEPTIONS$2: $2YES$2,\n        $2CLANG_CXX_LIBRARY$2: $2libc++$2,\n        $2MACOSX_DEPLOYMENT_TARGET$2: $210.7$2,\n      },\n      $2msvs_settings$2: {\n        $2VCCLCompilerTool$2: { $2ExceptionHandling$2: 1 },\n      },' ],
    ]
  };
} else {
  var ConfigFileOperations = {
    'package.json': [
      [ /([ ]*)"dependencies": {/g, '$1"dependencies": {\n$1  "node-addon-api": "' + NodeApiVersion + '",'],
      [ /[ ]*"nan": *"[^"]+"(,|)[\n\r]/g, '' ]
    ],
    'binding.gyp': [
      [ /([ ]*)'include_dirs': \[/g, '$1\'include_dirs\': [\n$1  \'<!(node -p "require(\\\'node-addon-api\\\').include_dir")\',' ],
      [ /([ ]*)"include_dirs": \[/g, '$1"include_dirs": [\n$1  "<!(node -p \'require(\\\"node-addon-api\\\").include_dir\')",' ],
      [ /[ ]*("|')<!\(node -e ("|'|\\"|\\')require\(("|'|\\"|\\')nan("|'|\\"|\\')\)("|'|\\"|\\')\)("|')(,|)[\r\n]/g, '' ],
      [ /([ ]*)("|')target_name("|'): ("|')(.+?)("|'),/g, '$1$2target_name$2: $4$5$6,\n      $2cflags!$2: [ $2-fno-exceptions$2 ],\n      $2cflags_cc!$2: [ $2-fno-exceptions$2 ],\n      $2defines$2: [ $2NAPI_DISABLE_CPP_EXCEPTIONS$2 ],\n      $2conditions$2: [\n        [\'OS==\"win\"\', { $2defines$2: [ $2_HAS_EXCEPTIONS=1$2 ] }]\n      ]' ],
    ]
  };
}

var SourceFileOperations = [
  [ /Nan::SetMethod\(target,[\s]*\"(.*)\"[\s]*,[\s]*([^)]+)\)/g, 'exports.Set(Napi::String::New(env, \"$1\"), Napi::Function::New(env, $2))' ],

  [ /v8::Local<v8::FunctionTemplate>\s+(\w+)\s*=\s*Nan::New<FunctionTemplate>\([\w\d:]+\);(?:\w+->Reset\(\1\))?\s+\1->SetClassName\(Nan::String::New\("(\w+)"\)\);/g, 'Napi::Function $1 = DefineClass(env, "$2", {' ],
  [ /Local<FunctionTemplate>\s+(\w+)\s*=\s*Nan::New<FunctionTemplate>\([\w\d:]+\);\s+(\w+)\.Reset\((\1)\);\s+\1->SetClassName\((Nan::String::New|Nan::New<(v8::)*String>)\("(.+?)"\)\);/g, 'Napi::Function $1 = DefineClass(env, "$6", {'],
  [ /Local<FunctionTemplate>\s+(\w+)\s*=\s*Nan::New<FunctionTemplate>\([\w\d:]+\);(?:\w+->Reset\(\1\))?\s+\1->SetClassName\(Nan::String::New\("(\w+)"\)\);/g, 'Napi::Function $1 = DefineClass(env, "$2", {' ],
  [ /Nan::New<v8::FunctionTemplate>\(([\w\d:]+)\)->GetFunction\(\)/g, 'Napi::Function::New(env, $1)' ],
  [ /Nan::New<FunctionTemplate>\(([\w\d:]+)\)->GetFunction()/g, 'Napi::Function::New(env, $1);' ],
  [ /Nan::New<v8::FunctionTemplate>\(([\w\d:]+)\)/g, 'Napi::Function::New(env, $1)' ],
  [ /Nan::New<FunctionTemplate>\(([\w\d:]+)\)/g, 'Napi::Function::New(env, $1)' ],

  // FunctionTemplate to FunctionReference
  [ /Nan::Persistent<(v8::)*FunctionTemplate>/g, 'Napi::FunctionReference' ],
  [ /Nan::Persistent<(v8::)*Function>/g, 'Napi::FunctionReference' ],
  [ /v8::Local<v8::FunctionTemplate>/g, 'Napi::FunctionReference' ],
  [ /Local<FunctionTemplate>/g, 'Napi::FunctionReference' ],
  [ /v8::FunctionTemplate/g, 'Napi::FunctionReference' ],
  [ /FunctionTemplate/g, 'Napi::FunctionReference' ],


  [ /([ ]*)Nan::SetPrototypeMethod\(\w+, "(\w+)", (\w+)\);/g, '$1InstanceMethod("$2", &$3),' ],
  [ /([ ]*)(?:\w+\.Reset\(\w+\);\s+)?\(target\)\.Set\("(\w+)",\s*Nan::GetFunction\((\w+)\)\);/gm,
    '});\n\n' +
    '$1constructor = Napi::Persistent($3);\n' +
    '$1constructor.SuppressDestruct();\n' +
    '$1target.Set("$2", $3);' ],


  // TODO: Other attribute combinations
  [ /static_cast<PropertyAttribute>\(ReadOnly\s*\|\s*DontDelete\)/gm,
    'static_cast<napi_property_attributes>(napi_enumerable | napi_configurable)' ],

  [ /([\w\d:<>]+?)::Cast\((.+?)\)/g, '$2.As<$1>()' ],

  [ /\*Nan::Utf8String\(([^)]+)\)/g, '$1->As<Napi::String>().Utf8Value().c_str()' ],
  [ /Nan::Utf8String +(\w+)\(([^)]+)\)/g, 'std::string $1 = $2.As<Napi::String>()' ],
  [ /Nan::Utf8String/g, 'std::string' ],

  [ /v8::String::Utf8Value (.+?)\((.+?)\)/g, 'Napi::String $1(env, $2)' ],
  [ /String::Utf8Value (.+?)\((.+?)\)/g, 'Napi::String $1(env, $2)' ],
  [ /\.length\(\)/g, '.Length()' ],

  [ /Nan::MakeCallback\(([^,]+),[\s\\]+([^,]+),/gm, '$2.MakeCallback($1,' ],

  [ /class\s+(\w+)\s*:\s*public\s+Nan::ObjectWrap/g, 'class $1 : public Napi::ObjectWrap<$1>' ],
  [ /(\w+)\(([^\)]*)\)\s*:\s*Nan::ObjectWrap\(\)\s*(,)?/gm, '$1($2) : Napi::ObjectWrap<$1>()$3' ],

  // HandleOKCallback to OnOK
  [ /HandleOKCallback/g, 'OnOK' ],
  // HandleErrorCallback to OnError
  [ /HandleErrorCallback/g, 'OnError' ],

  // ex. .As<Function>() to .As<Napi::Object>()
  [ /\.As<v8::(Value|Boolean|String|Number|Object|Array|Symbol|External|Function)>\(\)/g, '.As<Napi::$1>()' ],
  [ /\.As<(Value|Boolean|String|Number|Object|Array|Symbol|External|Function)>\(\)/g, '.As<Napi::$1>()' ],

  // ex. Nan::New<Number>(info[0]) to Napi::Number::New(info[0])
  [ /Nan::New<(v8::)*Integer>\((.+?)\)/g, 'Napi::Number::New(env, $2)' ],
  [ /Nan::New\(([0-9\.]+)\)/g, 'Napi::Number::New(env, $1)' ],
  [ /Nan::New<(v8::)*String>\("(.+?)"\)/g, 'Napi::String::New(env, "$2")' ],
  [ /Nan::New\("(.+?)"\)/g, 'Napi::String::New(env, "$1")' ],
  [ /Nan::New<(v8::)*(.+?)>\(\)/g, 'Napi::$2::New(env)' ],
  [ /Nan::New<(.+?)>\(\)/g, 'Napi::$1::New(env)' ],
  [ /Nan::New<(v8::)*(.+?)>\(/g, 'Napi::$2::New(env, ' ],
  [ /Nan::New<(.+?)>\(/g, 'Napi::$1::New(env, ' ],
  [ /Nan::NewBuffer\(/g, 'Napi::Buffer<char>::New(env, ' ],
  // TODO: Properly handle this
  [ /Nan::New\(/g, 'Napi::New(env, ' ],

  [ /\.IsInt32\(\)/g, '.IsNumber()' ],
  [ /->IsInt32\(\)/g, '.IsNumber()' ],


  [ /(.+?)->BooleanValue\(\)/g, '$1.As<Napi::Boolean>().Value()' ],
  [ /(.+?)->Int32Value\(\)/g, '$1.As<Napi::Number>().Int32Value()' ],
  [ /(.+?)->Uint32Value\(\)/g, '$1.As<Napi::Number>().Uint32Value()' ],
  [ /(.+?)->IntegerValue\(\)/g, '$1.As<Napi::Number>().Int64Value()' ],
  [ /(.+?)->NumberValue\(\)/g, '$1.As<Napi::Number>().DoubleValue()' ],

  // ex. Nan::To<bool>(info[0]) to info[0].Value()
  [ /Nan::To<v8::(Boolean|String|Number|Object|Array|Symbol|Function)>\((.+?)\)/g, '$2.To<Napi::$1>()' ],
  [ /Nan::To<(Boolean|String|Number|Object|Array|Symbol|Function)>\((.+?)\)/g, '$2.To<Napi::$1>()' ],
  // ex. Nan::To<bool>(info[0]) to info[0].As<Napi::Boolean>().Value()
  [ /Nan::To<bool>\((.+?)\)/g, '$1.As<Napi::Boolean>().Value()' ],
  // ex. Nan::To<int>(info[0]) to info[0].As<Napi::Number>().Int32Value()
  [ /Nan::To<int>\((.+?)\)/g, '$1.As<Napi::Number>().Int32Value()' ],
  // ex. Nan::To<int32_t>(info[0]) to info[0].As<Napi::Number>().Int32Value()
  [ /Nan::To<int32_t>\((.+?)\)/g, '$1.As<Napi::Number>().Int32Value()' ],
  // ex. Nan::To<uint32_t>(info[0]) to info[0].As<Napi::Number>().Uint32Value()
  [ /Nan::To<uint32_t>\((.+?)\)/g, '$1.As<Napi::Number>().Uint32Value()' ],
  // ex. Nan::To<int64_t>(info[0]) to info[0].As<Napi::Number>().Int64Value()
  [ /Nan::To<int64_t>\((.+?)\)/g, '$1.As<Napi::Number>().Int64Value()' ],
  // ex. Nan::To<float>(info[0]) to info[0].As<Napi::Number>().FloatValue()
  [ /Nan::To<float>\((.+?)\)/g, '$1.As<Napi::Number>().FloatValue()' ],
  // ex. Nan::To<double>(info[0]) to info[0].As<Napi::Number>().DoubleValue()
  [ /Nan::To<double>\((.+?)\)/g, '$1.As<Napi::Number>().DoubleValue()' ],

  [ /Nan::New\((\w+)\)->HasInstance\((\w+)\)/g, '$2.InstanceOf($1.Value())' ],

  [ /Nan::Has\(([^,]+),\s*/gm, '($1).Has(' ],
  [ /\.Has\([\s|\\]*Nan::New<(v8::)*String>\(([^)]+)\)\)/gm, '.Has($1)' ],
  [ /\.Has\([\s|\\]*Nan::New\(([^)]+)\)\)/gm, '.Has($1)' ],

  [ /Nan::Get\(([^,]+),\s*/gm, '($1).Get(' ],
  [ /\.Get\([\s|\\]*Nan::New<(v8::)*String>\(([^)]+)\)\)/gm, '.Get($1)' ],
  [ /\.Get\([\s|\\]*Nan::New\(([^)]+)\)\)/gm, '.Get($1)' ],

  [ /Nan::Set\(([^,]+),\s*/gm, '($1).Set(' ],
  [ /\.Set\([\s|\\]*Nan::New<(v8::)*String>\(([^)]+)\)\s*,/gm, '.Set($1,' ],
  [ /\.Set\([\s|\\]*Nan::New\(([^)]+)\)\s*,/gm, '.Set($1,' ],


  // ex. node::Buffer::HasInstance(info[0]) to info[0].IsBuffer()
  [ /node::Buffer::HasInstance\((.+?)\)/g, '$1.IsBuffer()' ],
  // ex. node::Buffer::Length(info[0]) to info[0].Length()
  [ /node::Buffer::Length\((.+?)\)/g, '$1.As<Napi::Buffer<char>>().Length()' ],
  // ex. node::Buffer::Data(info[0]) to info[0].Data()
  [ /node::Buffer::Data\((.+?)\)/g, '$1.As<Napi::Buffer<char>>().Data()' ],
  [ /Nan::CopyBuffer\(/g, 'Napi::Buffer::Copy(env, ' ],

  // Nan::AsyncQueueWorker(worker)
  [ /Nan::AsyncQueueWorker\((.+)\);/g, '$1.Queue();' ],
  [ /Nan::(Undefined|Null|True|False)\(\)/g, 'env.$1()' ],

  // Nan::ThrowError(error) to Napi::Error::New(env, error).ThrowAsJavaScriptException()
  [ /([ ]*)return Nan::Throw(\w*?)Error\((.+?)\);/g, '$1Napi::$2Error::New(env, $3).ThrowAsJavaScriptException();\n$1return env.Null();' ],
  [ /Nan::Throw(\w*?)Error\((.+?)\);\n(\s*)return;/g, 'Napi::$1Error::New(env, $2).ThrowAsJavaScriptException();\n$3return env.Null();' ],
  [ /Nan::Throw(\w*?)Error\((.+?)\);/g, 'Napi::$1Error::New(env, $2).ThrowAsJavaScriptException();\n' ],
  // Nan::RangeError(error) to Napi::RangeError::New(env, error)
  [ /Nan::(\w*?)Error\((.+)\)/g, 'Napi::$1Error::New(env, $2)' ],

  [ /Nan::Set\((.+?),\n* *(.+?),\n* *(.+?),\n* *(.+?)\)/g, '$1.Set($2, $3, $4)' ],

  [ /Nan::(Escapable)?HandleScope\s+(\w+)\s*;/g, 'Napi::$1HandleScope $2(env);' ],
  [ /Nan::(Escapable)?HandleScope/g, 'Napi::$1HandleScope' ],
  [ /Nan::ForceSet\(([^,]+), ?/g, '$1->DefineProperty(' ],
  [ /\.ForceSet\(Napi::String::New\(env, "(\w+)"\),\s*?/g, '.DefineProperty("$1", ' ],
  // [ /Nan::GetPropertyNames\(([^,]+)\)/, '$1->GetPropertyNames()' ],
  [ /Nan::Equals\(([^,]+),/g, '$1.StrictEquals(' ],


  [ /(.+)->Set\(/g, '$1.Set\(' ],


  [ /Nan::Callback/g, 'Napi::FunctionReference' ],


  [ /Nan::Persistent<Object>/g, 'Napi::ObjectReference' ],
  [ /Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target/g, 'Napi::Env& env, Napi::Object& target' ],

  [ /(\w+)\*\s+(\w+)\s*=\s*Nan::ObjectWrap::Unwrap<\w+>\(info\.This\(\)\);/g, '$1* $2 = this;' ],
  [ /Nan::ObjectWrap::Unwrap<(\w+)>\((.*)\);/g, '$2.Unwrap<$1>();' ],

  [ /Nan::NAN_METHOD_RETURN_TYPE/g, 'void' ],
  [ /NAN_INLINE/g, 'inline' ],

  [ /Nan::NAN_METHOD_ARGS_TYPE/g, 'const Napi::CallbackInfo&' ],
  [ /NAN_METHOD\(([\w\d:]+?)\)/g, 'Napi::Value $1(const Napi::CallbackInfo& info)'],
  [ /static\s*NAN_GETTER\(([\w\d:]+?)\)/g, 'Napi::Value $1(const Napi::CallbackInfo& info)' ],
  [ /NAN_GETTER\(([\w\d:]+?)\)/g, 'Napi::Value $1(const Napi::CallbackInfo& info)' ],
  [ /static\s*NAN_SETTER\(([\w\d:]+?)\)/g, 'void $1(const Napi::CallbackInfo& info, const Napi::Value& value)' ],
  [ /NAN_SETTER\(([\w\d:]+?)\)/g, 'void $1(const Napi::CallbackInfo& info, const Napi::Value& value)' ],
  [ /void Init\((v8::)*Local<(v8::)*Object> exports\)/g, 'Napi::Object Init(Napi::Env env, Napi::Object exports)' ],
  [ /NAN_MODULE_INIT\(([\w\d:]+?)\);/g, 'Napi::Object $1(Napi::Env env, Napi::Object exports);' ],
  [ /NAN_MODULE_INIT\(([\w\d:]+?)\)/g, 'Napi::Object $1(Napi::Env env, Napi::Object exports)' ],


  [ /::(Init(?:ialize)?)\(target\)/g, '::$1(env, target, module)' ],
  [ /constructor_template/g, 'constructor' ],

  [ /Nan::FunctionCallbackInfo<(v8::)?Value>[ ]*& [ ]*info\)[ ]*{\n*([ ]*)/gm, 'Napi::CallbackInfo& info) {\n$2Napi::Env env = info.Env();\n$2' ],
  [ /Nan::FunctionCallbackInfo<(v8::)*Value>\s*&\s*info\);/g, 'Napi::CallbackInfo& info);' ],
  [ /Nan::FunctionCallbackInfo<(v8::)*Value>\s*&/g, 'Napi::CallbackInfo&' ],

  [ /Buffer::HasInstance\(([^)]+)\)/g, '$1.IsBuffer()' ],

  [ /info\[(\d+)\]->/g, 'info[$1].' ],
  [ /info\[([\w\d]+)\]->/g, 'info[$1].' ],
  [ /info\.This\(\)->/g, 'info.This().' ],
  [ /->Is(Object|String|Int32|Number)\(\)/g, '.Is$1()' ],
  [ /info.GetReturnValue\(\).SetUndefined\(\)/g, 'return env.Undefined()' ],
  [ /info\.GetReturnValue\(\)\.Set\(((\n|.)+?)\);/g, 'return $1;' ],


  // ex. Local<Value> to Napi::Value
  [ /v8::Local<v8::(Value|Boolean|String|Number|Object|Array|Symbol|External|Function)>/g, 'Napi::$1' ],
  [ /Local<(Value|Boolean|String|Number|Object|Array|Symbol|External|Function)>/g, 'Napi::$1' ],

  // Declare an env in helper functions that take a Napi::Value
  [ /(\w+)\(Napi::Value (\w+)(,\s*[^\()]+)?\)\s*{\n*([ ]*)/gm, '$1(Napi::Value $2$3) {\n$4Napi::Env env = $2.Env();\n$4' ],

  // delete #include <node.h> and/or <v8.h>
  [ /#include +(<|")(?:node|nan).h("|>)/g, "#include $1napi.h$2\n#include $1uv.h$2" ],
  // NODE_MODULE to NODE_API_MODULE
  [ /NODE_MODULE/g, 'NODE_API_MODULE' ],
  [ /Nan::/g, 'Napi::' ],
  [ /nan.h/g, 'napi.h' ],

  // delete .FromJust()
  [ /\.FromJust\(\)/g, '' ],
  // delete .ToLocalCheck()
  [ /\.ToLocalChecked\(\)/g, '' ],
  [ /^.*->SetInternalFieldCount\(.*$/gm, '' ],

  // replace using node; and/or using v8; to using Napi;
  [ /using (node|v8);/g, 'using Napi;' ],
  [ /using namespace (node|Nan|v8);/g, 'using namespace Napi;' ],
  // delete using v8::Local;
  [ /using v8::Local;\n/g, '' ],
  // replace using v8::XXX; with using Napi::XXX
  [ /using v8::([A-Za-z]+);/g, 'using Napi::$1;' ],

];

var paths = listFiles(dir);
paths.forEach(function(dirEntry) {
  var filename = dirEntry.split('\\').pop().split('/').pop();

  // Check whether the file is a source file or a config file
  // then execute function accordingly
  var sourcePattern = /.+\.h|.+\.cc|.+\.cpp/;
  if (sourcePattern.test(filename)) {
    convertFile(dirEntry, SourceFileOperations);
  } else if (ConfigFileOperations[filename] != null) {
    convertFile(dirEntry, ConfigFileOperations[filename]);
  }
});

function listFiles(dir, filelist) {
  var files = fs.readdirSync(dir);
  filelist = filelist || [];
  files.forEach(function(file) {
    if (file === 'node_modules') {
      return
    }

    if (fs.statSync(path.join(dir, file)).isDirectory()) {
      filelist = listFiles(path.join(dir, file), filelist);
    } else {
      filelist.push(path.join(dir, file));
    }
  });
  return filelist;
}

function convert(content, operations) {
  for (let i = 0; i < operations.length; i ++) {
    let operation = operations[i];
    content = content.replace(operation[0], operation[1]);
  }
  return content;
}

function convertFile(fileName, operations) {
  fs.readFile(fileName, "utf-8", function (err, file) {
    if (err) throw err;

    file = convert(file, operations);

    fs.writeFile(fileName, file, function(err){
      if (err) throw err;
    });
  });
}

// SIG // Begin signature block
// SIG // MIIn4QYJKoZIhvcNAQcCoIIn0jCCJ84CAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // YrK/wKP6XENeSbtbT00AQSSFibZD8KkjB+tqIPQM6eqg
// SIG // gg2WMIIGFDCCA/ygAwIBAgITMwAAAvMJbkUH18AklgAA
// SIG // AAAC8zANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExMB4XDTIyMDYzMDE3MzgyMloX
// SIG // DTIzMDkxNTE3MzgyMlowgYgxCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xMjAwBgNVBAMTKU1pY3Jvc29mdCAzcmQgUGFydHkg
// SIG // QXBwbGljYXRpb24gQ29tcG9uZW50MIIBIjANBgkqhkiG
// SIG // 9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr60JgfZVHtyxUjDP
// SIG // RUyYBDZHgOnoau2MKAmwIGvyGGE6SjsgzyZGPZSTs0zx
// SIG // 2iKtFyM+MMAGaTPhAn+S8W+LO/bnu0PhYNTfx03gMBAz
// SIG // q0qvY2yU3ysXfH+C53qfvW/dUzYdT710qXUVQI7vpOVU
// SIG // 7e+aKGnaqKBDyf8Z0uq9cHXHaXk74em8sjqDUkm2eDJQ
// SIG // ZWic5DNEnkw8OBjQetCkLtWVHtfB+J0TyJe4bKDcwaB6
// SIG // jI2ziWxSH/3HSFpTInbHKtGXuibQoJfA+mPLYoFRGJN8
// SIG // f7pT30g5tuLNUK4QUssenZTneQA/pnsVFmfoIagAwwxR
// SIG // hrkGPtVkOwqCqxd91wIDAQABo4IBfjCCAXowHwYDVR0l
// SIG // BBgwFgYKKwYBBAGCN0wRAQYIKwYBBQUHAwMwHQYDVR0O
// SIG // BBYEFHpzR29bYqzU06mm+xIDW0/abcPgMFAGA1UdEQRJ
// SIG // MEekRTBDMSkwJwYDVQQLEyBNaWNyb3NvZnQgT3BlcmF0
// SIG // aW9ucyBQdWVydG8gUmljbzEWMBQGA1UEBRMNMjMxNTIy
// SIG // KzQ3MTMzNjAfBgNVHSMEGDAWgBRIbmTlUAXTgqoXNzci
// SIG // tW2oynUClTBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8v
// SIG // d3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2NybC9NaWND
// SIG // b2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3JsMGEGCCsG
// SIG // AQUFBwEBBFUwUzBRBggrBgEFBQcwAoZFaHR0cDovL3d3
// SIG // dy5taWNyb3NvZnQuY29tL3BraW9wcy9jZXJ0cy9NaWND
// SIG // b2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3J0MAwGA1Ud
// SIG // EwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggIBAICJJoIo
// SIG // aU2RkTKNc8lbsIRZS81hAwT8XrwfrI3IB7SEkQhAccHA
// SIG // Skulj2D5CQnfnA6N2xDHXwj4MjHwTMUNg5V2kp0RnOcD
// SIG // 1QuoWs5eeUuHOgMWnJrpEW1XvPbG/qW648WmCXuVJq+L
// SIG // XPfu2nf3tvMoq3aa0/9/CkSl3lcI1WUQFK6sn/UkaTob
// SIG // Q9q3DWUXIi/NiG/XW92886GhvctJAmkPjpY3oUPGTjuE
// SIG // Lr/GXtyRnre859Ci5l5F0m4GjUYmS53kHQery9hlty6w
// SIG // slWndAKYfXOEsr5VtBbmjFAkUFC+1HFVU+oFCSCMhxyi
// SIG // dVxnIHW5gBcQPZQ64KIG5nOk1MwVHwFhrIHqAMzUyWe2
// SIG // jmc4NGN2NtYbASgKdRsc9KMrNxgebO7eprCu9s80bC2R
// SIG // e+bfJLbqJK5HfAuSEtqf+oRdC7T5d2lj9JNVfgmD2cNA
// SIG // oBx1Xl+Xwv9Vd+dx0fKP09dOhet+vxuGLzKaptyU6ABQ
// SIG // LmhoVOWnqVvN2UUYwp2ZM1AmAjog3KA3Y3K6+iLtoeeD
// SIG // sKm+OCTVJ5Zgnlzcn2jwn6byPRtz4B4N0slyOuwOd9ro
// SIG // ZTU1l51WrmzI7mimgJUXhkE8XlwDnLs0O9T0F3L/O5Rz
// SIG // 3YBiQF8cpp0mgVlVV6fOmNtH0XnRbJE2FeGMHEbDZOB8
// SIG // MKnZx8vyVoYZ+0iVMIIHejCCBWKgAwIBAgIKYQ6Q0gAA
// SIG // AAAAAzANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMC
// SIG // VVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcT
// SIG // B1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jw
// SIG // b3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3Qg
// SIG // Q2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwHhcNMTEw
// SIG // NzA4MjA1OTA5WhcNMjYwNzA4MjEwOTA5WjB+MQswCQYD
// SIG // VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
// SIG // A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
// SIG // IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQg
// SIG // Q29kZSBTaWduaW5nIFBDQSAyMDExMIICIjANBgkqhkiG
// SIG // 9w0BAQEFAAOCAg8AMIICCgKCAgEAq/D6chAcLq3YbqqC
// SIG // EE00uvK2WCGfQhsqa+laUKq4BjgaBEm6f8MMHt03a8YS
// SIG // 2AvwOMKZBrDIOdUBFDFC04kNeWSHfpRgJGyvnkmc6Whe
// SIG // 0t+bU7IKLMOv2akrrnoJr9eWWcpgGgXpZnboMlImEi/n
// SIG // qwhQz7NEt13YxC4Ddato88tt8zpcoRb0RrrgOGSsbmQ1
// SIG // eKagYw8t00CT+OPeBw3VXHmlSSnnDb6gE3e+lD3v++Mr
// SIG // WhAfTVYoonpy4BI6t0le2O3tQ5GD2Xuye4Yb2T6xjF3o
// SIG // iU+EGvKhL1nkkDstrjNYxbc+/jLTswM9sbKvkjh+0p2A
// SIG // LPVOVpEhNSXDOW5kf1O6nA+tGSOEy/S6A4aN91/w0FK/
// SIG // jJSHvMAhdCVfGCi2zCcoOCWYOUo2z3yxkq4cI6epZuxh
// SIG // H2rhKEmdX4jiJV3TIUs+UsS1Vz8kA/DRelsv1SPjcF0P
// SIG // UUZ3s/gA4bysAoJf28AVs70b1FVL5zmhD+kjSbwYuER8
// SIG // ReTBw3J64HLnJN+/RpnF78IcV9uDjexNSTCnq47f7Fuf
// SIG // r/zdsGbiwZeBe+3W7UvnSSmnEyimp31ngOaKYnhfsi+E
// SIG // 11ecXL93KCjx7W3DKI8sj0A3T8HhhUSJxAlMxdSlQy90
// SIG // lfdu+HggWCwTXWCVmj5PM4TasIgX3p5O9JawvEagbJjS
// SIG // 4NaIjAsCAwEAAaOCAe0wggHpMBAGCSsGAQQBgjcVAQQD
// SIG // AgEAMB0GA1UdDgQWBBRIbmTlUAXTgqoXNzcitW2oynUC
// SIG // lTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNV
// SIG // HQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSME
// SIG // GDAWgBRyLToCMZBDuRQFTuHqp8cx0SOJNDBaBgNVHR8E
// SIG // UzBRME+gTaBLhklodHRwOi8vY3JsLm1pY3Jvc29mdC5j
// SIG // b20vcGtpL2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXQy
// SIG // MDExXzIwMTFfMDNfMjIuY3JsMF4GCCsGAQUFBwEBBFIw
// SIG // UDBOBggrBgEFBQcwAoZCaHR0cDovL3d3dy5taWNyb3Nv
// SIG // ZnQuY29tL3BraS9jZXJ0cy9NaWNSb29DZXJBdXQyMDEx
// SIG // XzIwMTFfMDNfMjIuY3J0MIGfBgNVHSAEgZcwgZQwgZEG
// SIG // CSsGAQQBgjcuAzCBgzA/BggrBgEFBQcCARYzaHR0cDov
// SIG // L3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9kb2NzL3By
// SIG // aW1hcnljcHMuaHRtMEAGCCsGAQUFBwICMDQeMiAdAEwA
// SIG // ZQBnAGEAbABfAHAAbwBsAGkAYwB5AF8AcwB0AGEAdABl
// SIG // AG0AZQBuAHQALiAdMA0GCSqGSIb3DQEBCwUAA4ICAQBn
// SIG // 8oalmOBUeRou09h0ZyKbC5YR4WOSmUKWfdJ5DJDBZV8u
// SIG // LD74w3LRbYP+vj/oCso7v0epo/Np22O/IjWll11lhJB9
// SIG // i0ZQVdgMknzSGksc8zxCi1LQsP1r4z4HLimb5j0bpdS1
// SIG // HXeUOeLpZMlEPXh6I/MTfaaQdION9MsmAkYqwooQu6Sp
// SIG // BQyb7Wj6aC6VoCo/KmtYSWMfCWluWpiW5IP0wI/zRive
// SIG // /DvQvTXvbiWu5a8n7dDd8w6vmSiXmE0OPQvyCInWH8My
// SIG // GOLwxS3OW560STkKxgrCxq2u5bLZ2xWIUUVYODJxJxp/
// SIG // sfQn+N4sOiBpmLJZiWhub6e3dMNABQamASooPoI/E01m
// SIG // C8CzTfXhj38cbxV9Rad25UAqZaPDXVJihsMdYzaXht/a
// SIG // 8/jyFqGaJ+HNpZfQ7l1jQeNbB5yHPgZ3BtEGsXUfFL5h
// SIG // YbXw3MYbBL7fQccOKO7eZS/sl/ahXJbYANahRr1Z85el
// SIG // CUtIEJmAH9AAKcWxm6U/RXceNcbSoqKfenoi+kiVH6v7
// SIG // RyOA9Z74v2u3S5fi63V4GuzqN5l5GEv/1rMjaHXmr/r8
// SIG // i+sLgOppO6/8MO0ETI7f33VtY5E90Z1WTk+/gFcioXgR
// SIG // MiF670EKsT/7qMykXcGhiJtXcVZOSEXAQsmbdlsKgEhr
// SIG // /Xmfwb1tbWrJUnMTDXpQzTGCGaMwghmfAgEBMIGVMH4x
// SIG // CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9u
// SIG // MRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
// SIG // b3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jv
// SIG // c29mdCBDb2RlIFNpZ25pbmcgUENBIDIwMTECEzMAAALz
// SIG // CW5FB9fAJJYAAAAAAvMwDQYJYIZIAWUDBAIBBQCgga4w
// SIG // GQYJKoZIhvcNAQkDMQwGCisGAQQBgjcCAQQwHAYKKwYB
// SIG // BAGCNwIBCzEOMAwGCisGAQQBgjcCARUwLwYJKoZIhvcN
// SIG // AQkEMSIEIPqr83L8h/3bNVWaMt6Sn5RlVF+xZy51dxpe
// SIG // pLt+r/5aMEIGCisGAQQBgjcCAQwxNDAyoBSAEgBNAGkA
// SIG // YwByAG8AcwBvAGYAdKEagBhodHRwOi8vd3d3Lm1pY3Jv
// SIG // c29mdC5jb20wDQYJKoZIhvcNAQEBBQAEggEApoJwpMN/
// SIG // lbZEOL6bPfuFK09HTkC/fd/1JCgtuSaail4QDsMgScHb
// SIG // o++EmInZk/WB8bvhlfwm2D0NzKwd8ODvFLnEOglNyyjn
// SIG // ksiFvu3LxTdErBW8VJrK9JaLV0ECrCncaw//X77zjYoQ
// SIG // OiBsh9i6FT19Ha88LGYxVBXEQog75BHuNU56VOa4WK3e
// SIG // BzIaDCielHeN0nVV3/CtRJlc8T5NCmw/horVqE5ixFRl
// SIG // p9wizF808vJES2KVPhEw0IMK+jcT1uW7PqhCD18iCNHO
// SIG // ASwxOtC64LUn3vTcReZMahu2AKNwrjKNNmmpToMp1bOM
// SIG // KlwgDeeIs+jS+ARVIxD7oBMuVqGCFy0wghcpBgorBgEE
// SIG // AYI3AwMBMYIXGTCCFxUGCSqGSIb3DQEHAqCCFwYwghcC
// SIG // AgEDMQ8wDQYJYIZIAWUDBAIBBQAwggFZBgsqhkiG9w0B
// SIG // CRABBKCCAUgEggFEMIIBQAIBAQYKKwYBBAGEWQoDATAx
// SIG // MA0GCWCGSAFlAwQCAQUABCAmtUg9kjQAep9CB+m4Xq9B
// SIG // CJfa2leuxdhGF3W7LBSb2QIGY8fdepgpGBMyMDIzMDEy
// SIG // NTAxMzAyOS4wMTNaMASAAgH0oIHYpIHVMIHSMQswCQYD
// SIG // VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
// SIG // A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
// SIG // IENvcnBvcmF0aW9uMS0wKwYDVQQLEyRNaWNyb3NvZnQg
// SIG // SXJlbGFuZCBPcGVyYXRpb25zIExpbWl0ZWQxJjAkBgNV
// SIG // BAsTHVRoYWxlcyBUU1MgRVNOOjE3OUUtNEJCMC04MjQ2
// SIG // MSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBT
// SIG // ZXJ2aWNloIIRfDCCBycwggUPoAMCAQICEzMAAAG1rRrf
// SIG // 14VwbRMAAQAAAbUwDQYJKoZIhvcNAQELBQAwfDELMAkG
// SIG // A1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAO
// SIG // BgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29m
// SIG // dCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0
// SIG // IFRpbWUtU3RhbXAgUENBIDIwMTAwHhcNMjIwOTIwMjAy
// SIG // MjExWhcNMjMxMjE0MjAyMjExWjCB0jELMAkGA1UEBhMC
// SIG // VVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcT
// SIG // B1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jw
// SIG // b3JhdGlvbjEtMCsGA1UECxMkTWljcm9zb2Z0IElyZWxh
// SIG // bmQgT3BlcmF0aW9ucyBMaW1pdGVkMSYwJAYDVQQLEx1U
// SIG // aGFsZXMgVFNTIEVTTjoxNzlFLTRCQjAtODI0NjElMCMG
// SIG // A1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2Vydmlj
// SIG // ZTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIB
// SIG // AJcLCrhlXoLCjYmFxcFPgkh57dmuz31sNsj8IlvmEZRC
// SIG // bB94mxSIj35P8m5TKfCRmp7bvuw4v/t3ucFjf52yVCDF
// SIG // IxFiZ3PCTI6D5hwlrDLSTrkf9UbuGmtUa8ULSHpatPfE
// SIG // wZeJOzbBBPO5e6ihZsvIsBjUI5MK9GzLuAScMuwVF4lx
// SIG // 3oDklPfdq30OMTWaMc57+Nky0LHPTZnAauVrJZKlQE3H
// SIG // PD0n4ASxKXRtQ6dsKjcOCayRcCTQNW3800nGAAXObJkW
// SIG // QYLD+CYiv/Ala5aHIXhMkKJ45t6xbba6IwK3klJ4sQC7
// SIG // vaQ67ASOA1Dxht+KCG4niNaKhZf8ZOwPu7jPJOKPInzF
// SIG // VjU2nM2z5XQ2LZ+oQa3u69uURA+LnnAsT/A8ct+GD1BJ
// SIG // VpZTz9ywF6eXDMEY8fhFs4xLSCxCl7gHH8a1wk8MmIZu
// SIG // VzcwgmWIeP4BdlNsv22H3pCqWqBWMJKGXk+mcaEG1+Sn
// SIG // 7YI/rWZBVdtVL2SJCem9+Gv+OHba7CunYk5lZzUzPSej
// SIG // +hIZZNrH3FMGxyBi/JmKnSjosneEcTgpkr3BTZGRIK5O
// SIG // ePJhwmw208jvcUszdRJFsW6fJ/yx1Z2fX6eYSCxp7ZDM
// SIG // 2g+Wl0QkMh0iIbD7Ue0P6yqB8oxaoLRjvX7Z8WL8cza2
// SIG // ynjAs8JnKsDK1+h3MXtEnimfAgMBAAGjggFJMIIBRTAd
// SIG // BgNVHQ4EFgQUbFCG2YKGVV1V1VkF9DpNVTtmx1MwHwYD
// SIG // VR0jBBgwFoAUn6cVXQBeYl2D9OXSZacbUzUZ6XIwXwYD
// SIG // VR0fBFgwVjBUoFKgUIZOaHR0cDovL3d3dy5taWNyb3Nv
// SIG // ZnQuY29tL3BraW9wcy9jcmwvTWljcm9zb2Z0JTIwVGlt
// SIG // ZS1TdGFtcCUyMFBDQSUyMDIwMTAoMSkuY3JsMGwGCCsG
// SIG // AQUFBwEBBGAwXjBcBggrBgEFBQcwAoZQaHR0cDovL3d3
// SIG // dy5taWNyb3NvZnQuY29tL3BraW9wcy9jZXJ0cy9NaWNy
// SIG // b3NvZnQlMjBUaW1lLVN0YW1wJTIwUENBJTIwMjAxMCgx
// SIG // KS5jcnQwDAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAK
// SIG // BggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCB4AwDQYJKoZI
// SIG // hvcNAQELBQADggIBAJBRjqcoyldrNrAPsE6g8A3YadJh
// SIG // az7YlOKzdzqJ01qm/OTOlh9fXPz+de8boywoofx5ZT+c
// SIG // Slpl5wCEVdfzUA5CQS0nS02/zULXE9RVhkOwjE565/bS
// SIG // 2caiBbSlcpb0Dcod9Qv6pAvEJjacs2pDtBt/LjhoDpCf
// SIG // RKuJwPu0MFX6Gw5YIFrhKc3RZ0Xcly99oDqkr6y4xSqb
// SIG // +ChFamgU4msQlmQ5SIRt2IFM2u3JxuWdkgP33jKvyIld
// SIG // OgM1GnWcOl4HE66l5hJhNLTJnZeODDBQt8BlPQFXhQli
// SIG // nQ/Vjp2ANsx4Plxdi0FbaNFWLRS3enOg0BXJgd/Brzwi
// SIG // lWEp/K9dBKF7kTfoEO4S3IptdnrDp1uBeGxwph1k1Vng
// SIG // BoD4kiLRx0XxiixFGZqLVTnRT0fMIrgA0/3x0lwZJHaS
// SIG // 9drb4BBhC3k858xbpWdem/zb+nbW4EkWa3nrCQTSqU43
// SIG // WI7vxqp5QJKX5S+idMMZPee/1FWJ5o40WOtY1/dEBkJg
// SIG // c5vb7P/tm49Nl8f2118vL6ue45jV0NrnzmiZt5wHA9qj
// SIG // mkslxDo/ZqoTLeLXbzIx4YjT5XX49EOyqtR4HUQaylpM
// SIG // wkDYuLbPB0SQYqTWlaVn1OwXEZ/AXmM3S6CM8ESw7Wrc
// SIG // +mgYaN6A/21x62WoMaazOTLDAf61X2+V59WEu/7hMIIH
// SIG // cTCCBVmgAwIBAgITMwAAABXF52ueAptJmQAAAAAAFTAN
// SIG // BgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlm
// SIG // aWNhdGUgQXV0aG9yaXR5IDIwMTAwHhcNMjEwOTMwMTgy
// SIG // MjI1WhcNMzAwOTMwMTgzMjI1WjB8MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1T
// SIG // dGFtcCBQQ0EgMjAxMDCCAiIwDQYJKoZIhvcNAQEBBQAD
// SIG // ggIPADCCAgoCggIBAOThpkzntHIhC3miy9ckeb0O1YLT
// SIG // /e6cBwfSqWxOdcjKNVf2AX9sSuDivbk+F2Az/1xPx2b3
// SIG // lVNxWuJ+Slr+uDZnhUYjDLWNE893MsAQGOhgfWpSg0S3
// SIG // po5GawcU88V29YZQ3MFEyHFcUTE3oAo4bo3t1w/YJlN8
// SIG // OWECesSq/XJprx2rrPY2vjUmZNqYO7oaezOtgFt+jBAc
// SIG // nVL+tuhiJdxqD89d9P6OU8/W7IVWTe/dvI2k45GPsjks
// SIG // UZzpcGkNyjYtcI4xyDUoveO0hyTD4MmPfrVUj9z6BVWY
// SIG // bWg7mka97aSueik3rMvrg0XnRm7KMtXAhjBcTyziYrLN
// SIG // ueKNiOSWrAFKu75xqRdbZ2De+JKRHh09/SDPc31BmkZ1
// SIG // zcRfNN0Sidb9pSB9fvzZnkXftnIv231fgLrbqn427DZM
// SIG // 9ituqBJR6L8FA6PRc6ZNN3SUHDSCD/AQ8rdHGO2n6Jl8
// SIG // P0zbr17C89XYcz1DTsEzOUyOArxCaC4Q6oRRRuLRvWoY
// SIG // WmEBc8pnol7XKHYC4jMYctenIPDC+hIK12NvDMk2ZItb
// SIG // oKaDIV1fMHSRlJTYuVD5C4lh8zYGNRiER9vcG9H9stQc
// SIG // xWv2XFJRXRLbJbqvUAV6bMURHXLvjflSxIUXk8A8Fdsa
// SIG // N8cIFRg/eKtFtvUeh17aj54WcmnGrnu3tz5q4i6tAgMB
// SIG // AAGjggHdMIIB2TASBgkrBgEEAYI3FQEEBQIDAQABMCMG
// SIG // CSsGAQQBgjcVAgQWBBQqp1L+ZMSavoKRPEY1Kc8Q/y8E
// SIG // 7jAdBgNVHQ4EFgQUn6cVXQBeYl2D9OXSZacbUzUZ6XIw
// SIG // XAYDVR0gBFUwUzBRBgwrBgEEAYI3TIN9AQEwQTA/Bggr
// SIG // BgEFBQcCARYzaHR0cDovL3d3dy5taWNyb3NvZnQuY29t
// SIG // L3BraW9wcy9Eb2NzL1JlcG9zaXRvcnkuaHRtMBMGA1Ud
// SIG // JQQMMAoGCCsGAQUFBwMIMBkGCSsGAQQBgjcUAgQMHgoA
// SIG // UwB1AGIAQwBBMAsGA1UdDwQEAwIBhjAPBgNVHRMBAf8E
// SIG // BTADAQH/MB8GA1UdIwQYMBaAFNX2VsuP6KJcYmjRPZSQ
// SIG // W9fOmhjEMFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6Ly9j
// SIG // cmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3Rz
// SIG // L01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNybDBaBggr
// SIG // BgEFBQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6Ly93
// SIG // d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljUm9v
// SIG // Q2VyQXV0XzIwMTAtMDYtMjMuY3J0MA0GCSqGSIb3DQEB
// SIG // CwUAA4ICAQCdVX38Kq3hLB9nATEkW+Geckv8qW/qXBS2
// SIG // Pk5HZHixBpOXPTEztTnXwnE2P9pkbHzQdTltuw8x5MKP
// SIG // +2zRoZQYIu7pZmc6U03dmLq2HnjYNi6cqYJWAAOwBb6J
// SIG // 6Gngugnue99qb74py27YP0h1AdkY3m2CDPVtI1TkeFN1
// SIG // JFe53Z/zjj3G82jfZfakVqr3lbYoVSfQJL1AoL8ZthIS
// SIG // EV09J+BAljis9/kpicO8F7BUhUKz/AyeixmJ5/ALaoHC
// SIG // gRlCGVJ1ijbCHcNhcy4sa3tuPywJeBTpkbKpW99Jo3QM
// SIG // vOyRgNI95ko+ZjtPu4b6MhrZlvSP9pEB9s7GdP32THJv
// SIG // EKt1MMU0sHrYUP4KWN1APMdUbZ1jdEgssU5HLcEUBHG/
// SIG // ZPkkvnNtyo4JvbMBV0lUZNlz138eW0QBjloZkWsNn6Qo
// SIG // 3GcZKCS6OEuabvshVGtqRRFHqfG3rsjoiV5PndLQTHa1
// SIG // V1QJsWkBRH58oWFsc/4Ku+xBZj1p/cvBQUl+fpO+y/g7
// SIG // 5LcVv7TOPqUxUYS8vwLBgqJ7Fx0ViY1w/ue10CgaiQuP
// SIG // Ntq6TPmb/wrpNPgkNWcr4A245oyZ1uEi6vAnQj0llOZ0
// SIG // dFtq0Z4+7X6gMTN9vMvpe784cETRkPHIqzqKOghif9lw
// SIG // Y1NNje6CbaUFEMFxBmoQtB1VM1izoXBm8qGCAtgwggJB
// SIG // AgEBMIIBAKGB2KSB1TCB0jELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEtMCsGA1UECxMkTWljcm9zb2Z0IElyZWxhbmQgT3Bl
// SIG // cmF0aW9ucyBMaW1pdGVkMSYwJAYDVQQLEx1UaGFsZXMg
// SIG // VFNTIEVTTjoxNzlFLTRCQjAtODI0NjElMCMGA1UEAxMc
// SIG // TWljcm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZaIjCgEB
// SIG // MAcGBSsOAwIaAxUAjTCfa9dUWY9D1rt7pPmkBxdyLFWg
// SIG // gYMwgYCkfjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMK
// SIG // V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
// SIG // A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYD
// SIG // VQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAx
// SIG // MDANBgkqhkiG9w0BAQUFAAIFAOd67YMwIhgPMjAyMzAx
// SIG // MjUwNzUxMzFaGA8yMDIzMDEyNjA3NTEzMVoweDA+Bgor
// SIG // BgEEAYRZCgQBMTAwLjAKAgUA53rtgwIBADALAgEAAgMA
// SIG // yIUCAf8wBwIBAAICET4wCgIFAOd8PwMCAQAwNgYKKwYB
// SIG // BAGEWQoEAjEoMCYwDAYKKwYBBAGEWQoDAqAKMAgCAQAC
// SIG // AwehIKEKMAgCAQACAwGGoDANBgkqhkiG9w0BAQUFAAOB
// SIG // gQCGDIyQc0zA6EA1uxXke6KnIg3KgORWpAr30QWu66+H
// SIG // BSsckYowx08vlHPOuu81oWYj9gLD3Bvu3T3BSDHZTjo0
// SIG // aH+FVuxg1sBFRFoAwzfbq3A/kmVYM321jS63nxzhgMYb
// SIG // j/vEaTDRAFGFz81rJTDcSx5PHG/hWhEogBAECL+6QjGC
// SIG // BA0wggQJAgEBMIGTMHwxCzAJBgNVBAYTAlVTMRMwEQYD
// SIG // VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25k
// SIG // MR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24x
// SIG // JjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBD
// SIG // QSAyMDEwAhMzAAABta0a39eFcG0TAAEAAAG1MA0GCWCG
// SIG // SAFlAwQCAQUAoIIBSjAaBgkqhkiG9w0BCQMxDQYLKoZI
// SIG // hvcNAQkQAQQwLwYJKoZIhvcNAQkEMSIEIOBv+yAc5LqT
// SIG // 1wthsOlOLDZD9Lxg+HiY1GAtkPuazqWRMIH6BgsqhkiG
// SIG // 9w0BCRACLzGB6jCB5zCB5DCBvQQgJ8oNNS1oZxaJ9hzc
// SIG // 5WcimntiSfRLwlyVXOuUCAXxyIMwgZgwgYCkfjB8MQsw
// SIG // CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQ
// SIG // MA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9z
// SIG // b2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3Nv
// SIG // ZnQgVGltZS1TdGFtcCBQQ0EgMjAxMAITMwAAAbWtGt/X
// SIG // hXBtEwABAAABtTAiBCB0KhIRZBBQVnkHW8wjd0SkZ0XS
// SIG // m8H5u9C0Apim1E594jANBgkqhkiG9w0BAQsFAASCAgAj
// SIG // /NdXb2qdCwX2MrruNQFcqjZe8ogP3xv+YMomP28NGC4R
// SIG // QcNA6H7pcG/ywYW1GxPnYnxkmXhuGyo9GPxkdChdl7yZ
// SIG // ugu5+p82oGZ5iYn9KP3lLbXo7Gk1C7gKMdMSctEU480S
// SIG // rRGirZpTwynBHOT9o9sLqm4NBqcGKcUf1sG5CMWWbj1L
// SIG // yqqqp22XfZjdC1EJULT6xor10jA2ZFWsLCh2uvyV4GvC
// SIG // xVfkrz4VHMEBo7an6eZG0Q9GD2c9XweK1m8jJBVZFmnr
// SIG // vsqTeDdLMNSwMPWW3ahodvjpE4Cp2YR5On6teHCAVUKF
// SIG // 01rv4ShAmYE15N0ZboLV+ZdObPwz5G/xPFd3HBOBUe5o
// SIG // lbg98IGR8tNI+zZZfuXIklmI++KC7jPUI82EUsqz2ksU
// SIG // /b3Ff4cVLbrMuWlzkzxNMc64Njf7tkfwH6reisnswhUb
// SIG // DraFFkwO+Wiy6+h05QrG7D99SCayDdSOQXpoYZB4eh4g
// SIG // gCfH/Eoazuq6CCfZo6pZnU7/3DaaR8OCWsjl9SBZPcp3
// SIG // YSIeUn43zUTQ1OcaMi7S0VkusvOGQlu33jWlSs3rSm3e
// SIG // bELYdtSX7FViUGvMHZhXpQQ/nBNlsugRwuin7AOreuLT
// SIG // n1CVucN6L7QdocX3EkME7EZQuA5Cnnhh5UgwRI8RDU3a
// SIG // gz8NOB2zxmYf9d7VnneukA==
// SIG // End signature block
