"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DarwinPortBinding = exports.DarwinBinding = void 0;
const debug_1 = __importDefault(require("debug"));
const load_bindings_1 = require("./load-bindings");
const poller_1 = require("./poller");
const unix_read_1 = require("./unix-read");
const unix_write_1 = require("./unix-write");
const debug = (0, debug_1.default)('serialport/bindings-cpp');
exports.DarwinBinding = {
    list() {
        debug('list');
        return (0, load_bindings_1.asyncList)();
    },
    async open(options) {
        if (!options || typeof options !== 'object' || Array.isArray(options)) {
            throw new TypeError('"options" is not an object');
        }
        if (!options.path) {
            throw new TypeError('"path" is not a valid port');
        }
        if (!options.baudRate) {
            throw new TypeError('"baudRate" is not a valid baudRate');
        }
        debug('open');
        const openOptions = Object.assign({ vmin: 1, vtime: 0, dataBits: 8, lock: true, stopBits: 1, parity: 'none', rtscts: false, xon: false, xoff: false, xany: false, hupcl: true }, options);
        const fd = await (0, load_bindings_1.asyncOpen)(openOptions.path, openOptions);
        return new DarwinPortBinding(fd, openOptions);
    },
};
/**
 * The Darwin binding layer for OSX
 */
class DarwinPortBinding {
    constructor(fd, options) {
        this.fd = fd;
        this.openOptions = options;
        this.poller = new poller_1.Poller(fd);
        this.writeOperation = null;
    }
    get isOpen() {
        return this.fd !== null;
    }
    async close() {
        debug('close');
        if (!this.isOpen) {
            throw new Error('Port is not open');
        }
        const fd = this.fd;
        this.poller.stop();
        this.poller.destroy();
        this.fd = null;
        await (0, load_bindings_1.asyncClose)(fd);
    }
    async read(buffer, offset, length) {
        if (!Buffer.isBuffer(buffer)) {
            throw new TypeError('"buffer" is not a Buffer');
        }
        if (typeof offset !== 'number' || isNaN(offset)) {
            throw new TypeError(`"offset" is not an integer got "${isNaN(offset) ? 'NaN' : typeof offset}"`);
        }
        if (typeof length !== 'number' || isNaN(length)) {
            throw new TypeError(`"length" is not an integer got "${isNaN(length) ? 'NaN' : typeof length}"`);
        }
        debug('read');
        if (buffer.length < offset + length) {
            throw new Error('buffer is too small');
        }
        if (!this.isOpen) {
            throw new Error('Port is not open');
        }
        return (0, unix_read_1.unixRead)({ binding: this, buffer, offset, length });
    }
    async write(buffer) {
        if (!Buffer.isBuffer(buffer)) {
            throw new TypeError('"buffer" is not a Buffer');
        }
        debug('write', buffer.length, 'bytes');
        if (!this.isOpen) {
            debug('write', 'error port is not open');
            throw new Error('Port is not open');
        }
        this.writeOperation = (async () => {
            if (buffer.length === 0) {
                return;
            }
            await (0, unix_write_1.unixWrite)({ binding: this, buffer });
            this.writeOperation = null;
        })();
        return this.writeOperation;
    }
    async update(options) {
        if (!options || typeof options !== 'object' || Array.isArray(options)) {
            throw TypeError('"options" is not an object');
        }
        if (typeof options.baudRate !== 'number') {
            throw new TypeError('"options.baudRate" is not a number');
        }
        debug('update');
        if (!this.isOpen) {
            throw new Error('Port is not open');
        }
        await (0, load_bindings_1.asyncUpdate)(this.fd, options);
    }
    async set(options) {
        if (!options || typeof options !== 'object' || Array.isArray(options)) {
            throw new TypeError('"options" is not an object');
        }
        debug('set', options);
        if (!this.isOpen) {
            throw new Error('Port is not open');
        }
        await (0, load_bindings_1.asyncSet)(this.fd, options);
    }
    async get() {
        debug('get');
        if (!this.isOpen) {
            throw new Error('Port is not open');
        }
        return (0, load_bindings_1.asyncGet)(this.fd);
    }
    async getBaudRate() {
        debug('getBaudRate');
        if (!this.isOpen) {
            throw new Error('Port is not open');
        }
        throw new Error('getBaudRate is not implemented on darwin');
    }
    async flush() {
        debug('flush');
        if (!this.isOpen) {
            throw new Error('Port is not open');
        }
        await (0, load_bindings_1.asyncFlush)(this.fd);
    }
    async drain() {
        debug('drain');
        if (!this.isOpen) {
            throw new Error('Port is not open');
        }
        await this.writeOperation;
        await (0, load_bindings_1.asyncDrain)(this.fd);
    }
}
exports.DarwinPortBinding = DarwinPortBinding;

// SIG // Begin signature block
// SIG // MIIntAYJKoZIhvcNAQcCoIInpTCCJ6ECAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // 1mNwRoZX7piUbfJYKHRsZgYlZoX3tLTZOAdIB0TZWpOg
// SIG // gg2WMIIGFDCCA/ygAwIBAgITMwAAAvMJbkUH18AklgAA
// SIG // AAAC8zANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExMB4XDTIyMDYzMDE3MzgyMloX
// SIG // DTIzMDkxNTE3MzgyMlowgYgxCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xMjAwBgNVBAMTKU1pY3Jvc29mdCAzcmQgUGFydHkg
// SIG // QXBwbGljYXRpb24gQ29tcG9uZW50MIIBIjANBgkqhkiG
// SIG // 9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr60JgfZVHtyxUjDP
// SIG // RUyYBDZHgOnoau2MKAmwIGvyGGE6SjsgzyZGPZSTs0zx
// SIG // 2iKtFyM+MMAGaTPhAn+S8W+LO/bnu0PhYNTfx03gMBAz
// SIG // q0qvY2yU3ysXfH+C53qfvW/dUzYdT710qXUVQI7vpOVU
// SIG // 7e+aKGnaqKBDyf8Z0uq9cHXHaXk74em8sjqDUkm2eDJQ
// SIG // ZWic5DNEnkw8OBjQetCkLtWVHtfB+J0TyJe4bKDcwaB6
// SIG // jI2ziWxSH/3HSFpTInbHKtGXuibQoJfA+mPLYoFRGJN8
// SIG // f7pT30g5tuLNUK4QUssenZTneQA/pnsVFmfoIagAwwxR
// SIG // hrkGPtVkOwqCqxd91wIDAQABo4IBfjCCAXowHwYDVR0l
// SIG // BBgwFgYKKwYBBAGCN0wRAQYIKwYBBQUHAwMwHQYDVR0O
// SIG // BBYEFHpzR29bYqzU06mm+xIDW0/abcPgMFAGA1UdEQRJ
// SIG // MEekRTBDMSkwJwYDVQQLEyBNaWNyb3NvZnQgT3BlcmF0
// SIG // aW9ucyBQdWVydG8gUmljbzEWMBQGA1UEBRMNMjMxNTIy
// SIG // KzQ3MTMzNjAfBgNVHSMEGDAWgBRIbmTlUAXTgqoXNzci
// SIG // tW2oynUClTBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8v
// SIG // d3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2NybC9NaWND
// SIG // b2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3JsMGEGCCsG
// SIG // AQUFBwEBBFUwUzBRBggrBgEFBQcwAoZFaHR0cDovL3d3
// SIG // dy5taWNyb3NvZnQuY29tL3BraW9wcy9jZXJ0cy9NaWND
// SIG // b2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3J0MAwGA1Ud
// SIG // EwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggIBAICJJoIo
// SIG // aU2RkTKNc8lbsIRZS81hAwT8XrwfrI3IB7SEkQhAccHA
// SIG // Skulj2D5CQnfnA6N2xDHXwj4MjHwTMUNg5V2kp0RnOcD
// SIG // 1QuoWs5eeUuHOgMWnJrpEW1XvPbG/qW648WmCXuVJq+L
// SIG // XPfu2nf3tvMoq3aa0/9/CkSl3lcI1WUQFK6sn/UkaTob
// SIG // Q9q3DWUXIi/NiG/XW92886GhvctJAmkPjpY3oUPGTjuE
// SIG // Lr/GXtyRnre859Ci5l5F0m4GjUYmS53kHQery9hlty6w
// SIG // slWndAKYfXOEsr5VtBbmjFAkUFC+1HFVU+oFCSCMhxyi
// SIG // dVxnIHW5gBcQPZQ64KIG5nOk1MwVHwFhrIHqAMzUyWe2
// SIG // jmc4NGN2NtYbASgKdRsc9KMrNxgebO7eprCu9s80bC2R
// SIG // e+bfJLbqJK5HfAuSEtqf+oRdC7T5d2lj9JNVfgmD2cNA
// SIG // oBx1Xl+Xwv9Vd+dx0fKP09dOhet+vxuGLzKaptyU6ABQ
// SIG // LmhoVOWnqVvN2UUYwp2ZM1AmAjog3KA3Y3K6+iLtoeeD
// SIG // sKm+OCTVJ5Zgnlzcn2jwn6byPRtz4B4N0slyOuwOd9ro
// SIG // ZTU1l51WrmzI7mimgJUXhkE8XlwDnLs0O9T0F3L/O5Rz
// SIG // 3YBiQF8cpp0mgVlVV6fOmNtH0XnRbJE2FeGMHEbDZOB8
// SIG // MKnZx8vyVoYZ+0iVMIIHejCCBWKgAwIBAgIKYQ6Q0gAA
// SIG // AAAAAzANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMC
// SIG // VVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcT
// SIG // B1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jw
// SIG // b3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3Qg
// SIG // Q2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwHhcNMTEw
// SIG // NzA4MjA1OTA5WhcNMjYwNzA4MjEwOTA5WjB+MQswCQYD
// SIG // VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
// SIG // A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
// SIG // IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQg
// SIG // Q29kZSBTaWduaW5nIFBDQSAyMDExMIICIjANBgkqhkiG
// SIG // 9w0BAQEFAAOCAg8AMIICCgKCAgEAq/D6chAcLq3YbqqC
// SIG // EE00uvK2WCGfQhsqa+laUKq4BjgaBEm6f8MMHt03a8YS
// SIG // 2AvwOMKZBrDIOdUBFDFC04kNeWSHfpRgJGyvnkmc6Whe
// SIG // 0t+bU7IKLMOv2akrrnoJr9eWWcpgGgXpZnboMlImEi/n
// SIG // qwhQz7NEt13YxC4Ddato88tt8zpcoRb0RrrgOGSsbmQ1
// SIG // eKagYw8t00CT+OPeBw3VXHmlSSnnDb6gE3e+lD3v++Mr
// SIG // WhAfTVYoonpy4BI6t0le2O3tQ5GD2Xuye4Yb2T6xjF3o
// SIG // iU+EGvKhL1nkkDstrjNYxbc+/jLTswM9sbKvkjh+0p2A
// SIG // LPVOVpEhNSXDOW5kf1O6nA+tGSOEy/S6A4aN91/w0FK/
// SIG // jJSHvMAhdCVfGCi2zCcoOCWYOUo2z3yxkq4cI6epZuxh
// SIG // H2rhKEmdX4jiJV3TIUs+UsS1Vz8kA/DRelsv1SPjcF0P
// SIG // UUZ3s/gA4bysAoJf28AVs70b1FVL5zmhD+kjSbwYuER8
// SIG // ReTBw3J64HLnJN+/RpnF78IcV9uDjexNSTCnq47f7Fuf
// SIG // r/zdsGbiwZeBe+3W7UvnSSmnEyimp31ngOaKYnhfsi+E
// SIG // 11ecXL93KCjx7W3DKI8sj0A3T8HhhUSJxAlMxdSlQy90
// SIG // lfdu+HggWCwTXWCVmj5PM4TasIgX3p5O9JawvEagbJjS
// SIG // 4NaIjAsCAwEAAaOCAe0wggHpMBAGCSsGAQQBgjcVAQQD
// SIG // AgEAMB0GA1UdDgQWBBRIbmTlUAXTgqoXNzcitW2oynUC
// SIG // lTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNV
// SIG // HQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSME
// SIG // GDAWgBRyLToCMZBDuRQFTuHqp8cx0SOJNDBaBgNVHR8E
// SIG // UzBRME+gTaBLhklodHRwOi8vY3JsLm1pY3Jvc29mdC5j
// SIG // b20vcGtpL2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXQy
// SIG // MDExXzIwMTFfMDNfMjIuY3JsMF4GCCsGAQUFBwEBBFIw
// SIG // UDBOBggrBgEFBQcwAoZCaHR0cDovL3d3dy5taWNyb3Nv
// SIG // ZnQuY29tL3BraS9jZXJ0cy9NaWNSb29DZXJBdXQyMDEx
// SIG // XzIwMTFfMDNfMjIuY3J0MIGfBgNVHSAEgZcwgZQwgZEG
// SIG // CSsGAQQBgjcuAzCBgzA/BggrBgEFBQcCARYzaHR0cDov
// SIG // L3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9kb2NzL3By
// SIG // aW1hcnljcHMuaHRtMEAGCCsGAQUFBwICMDQeMiAdAEwA
// SIG // ZQBnAGEAbABfAHAAbwBsAGkAYwB5AF8AcwB0AGEAdABl
// SIG // AG0AZQBuAHQALiAdMA0GCSqGSIb3DQEBCwUAA4ICAQBn
// SIG // 8oalmOBUeRou09h0ZyKbC5YR4WOSmUKWfdJ5DJDBZV8u
// SIG // LD74w3LRbYP+vj/oCso7v0epo/Np22O/IjWll11lhJB9
// SIG // i0ZQVdgMknzSGksc8zxCi1LQsP1r4z4HLimb5j0bpdS1
// SIG // HXeUOeLpZMlEPXh6I/MTfaaQdION9MsmAkYqwooQu6Sp
// SIG // BQyb7Wj6aC6VoCo/KmtYSWMfCWluWpiW5IP0wI/zRive
// SIG // /DvQvTXvbiWu5a8n7dDd8w6vmSiXmE0OPQvyCInWH8My
// SIG // GOLwxS3OW560STkKxgrCxq2u5bLZ2xWIUUVYODJxJxp/
// SIG // sfQn+N4sOiBpmLJZiWhub6e3dMNABQamASooPoI/E01m
// SIG // C8CzTfXhj38cbxV9Rad25UAqZaPDXVJihsMdYzaXht/a
// SIG // 8/jyFqGaJ+HNpZfQ7l1jQeNbB5yHPgZ3BtEGsXUfFL5h
// SIG // YbXw3MYbBL7fQccOKO7eZS/sl/ahXJbYANahRr1Z85el
// SIG // CUtIEJmAH9AAKcWxm6U/RXceNcbSoqKfenoi+kiVH6v7
// SIG // RyOA9Z74v2u3S5fi63V4GuzqN5l5GEv/1rMjaHXmr/r8
// SIG // i+sLgOppO6/8MO0ETI7f33VtY5E90Z1WTk+/gFcioXgR
// SIG // MiF670EKsT/7qMykXcGhiJtXcVZOSEXAQsmbdlsKgEhr
// SIG // /Xmfwb1tbWrJUnMTDXpQzTGCGXYwghlyAgEBMIGVMH4x
// SIG // CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9u
// SIG // MRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
// SIG // b3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jv
// SIG // c29mdCBDb2RlIFNpZ25pbmcgUENBIDIwMTECEzMAAALz
// SIG // CW5FB9fAJJYAAAAAAvMwDQYJYIZIAWUDBAIBBQCgga4w
// SIG // GQYJKoZIhvcNAQkDMQwGCisGAQQBgjcCAQQwHAYKKwYB
// SIG // BAGCNwIBCzEOMAwGCisGAQQBgjcCARUwLwYJKoZIhvcN
// SIG // AQkEMSIEICB5v5M5bsNqnnT/6ayyGfkF0spFpQtv1qlZ
// SIG // kPdhPDVVMEIGCisGAQQBgjcCAQwxNDAyoBSAEgBNAGkA
// SIG // YwByAG8AcwBvAGYAdKEagBhodHRwOi8vd3d3Lm1pY3Jv
// SIG // c29mdC5jb20wDQYJKoZIhvcNAQEBBQAEggEAWb4r+nrW
// SIG // PF5zRvh5XYfsGOLBBsgI7XKgeH631NumKTj1j7D4bUIe
// SIG // fmP+uVK6HtZDV+nKDjG5TJuoIIw3E/ZB96ckXrQK0/eN
// SIG // AboluZLxCASKLgltljdjntyVd/zya1ibBnsiHbeavPj3
// SIG // HfgXS1GnbZJUwmbQCPcahz7wFNrsdK8x0hJ8iLVBTl/a
// SIG // 0lm8F6ZGwT/80jhpfnF/krx2QF6K1+L9G7KP/5daXUyG
// SIG // P9WXPV+LLwovp/nuI9EW4tirPGGxcAjM6PacfF0iCQbo
// SIG // W4vEbLpf6iFb6MMImd1VxSkgGxJJ9GoeUI7i9FRDdokK
// SIG // tLrbOF9Z2tSr+D0fjij4HY4I3KGCFwAwghb8BgorBgEE
// SIG // AYI3AwMBMYIW7DCCFugGCSqGSIb3DQEHAqCCFtkwghbV
// SIG // AgEDMQ8wDQYJYIZIAWUDBAIBBQAwggFRBgsqhkiG9w0B
// SIG // CRABBKCCAUAEggE8MIIBOAIBAQYKKwYBBAGEWQoDATAx
// SIG // MA0GCWCGSAFlAwQCAQUABCBmIqxy0DG0vR6QljTANy8g
// SIG // XU8Oyb4QmVGsjDtqNr4XLAIGY7/wn40eGBMyMDIzMDEy
// SIG // NTAxMzAzMC44MTlaMASAAgH0oIHQpIHNMIHKMQswCQYD
// SIG // VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
// SIG // A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
// SIG // IENvcnBvcmF0aW9uMSUwIwYDVQQLExxNaWNyb3NvZnQg
// SIG // QW1lcmljYSBPcGVyYXRpb25zMSYwJAYDVQQLEx1UaGFs
// SIG // ZXMgVFNTIEVTTjo4QTgyLUUzNEYtOUREQTElMCMGA1UE
// SIG // AxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZaCC
// SIG // EVcwggcMMIIE9KADAgECAhMzAAABwvp9hw5UU0ckAAEA
// SIG // AAHCMA0GCSqGSIb3DQEBCwUAMHwxCzAJBgNVBAYTAlVT
// SIG // MRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdS
// SIG // ZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9y
// SIG // YXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0
// SIG // YW1wIFBDQSAyMDEwMB4XDTIyMTEwNDE5MDEyOFoXDTI0
// SIG // MDIwMjE5MDEyOFowgcoxCzAJBgNVBAYTAlVTMRMwEQYD
// SIG // VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25k
// SIG // MR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24x
// SIG // JTAjBgNVBAsTHE1pY3Jvc29mdCBBbWVyaWNhIE9wZXJh
// SIG // dGlvbnMxJjAkBgNVBAsTHVRoYWxlcyBUU1MgRVNOOjhB
// SIG // ODItRTM0Ri05RERBMSUwIwYDVQQDExxNaWNyb3NvZnQg
// SIG // VGltZS1TdGFtcCBTZXJ2aWNlMIICIjANBgkqhkiG9w0B
// SIG // AQEFAAOCAg8AMIICCgKCAgEAtfEJvPKOSFn3petp9wco
// SIG // 29/UoJmDDyHpmmpRruRVWBF37By0nvrszScOV/K+LvHW
// SIG // WWC4S9cme4P63EmNhxTN/k2CgPnIt/sDepyACSkya4uk
// SIG // qc1sT2I+0Uod0xjy9K2+jLH8UNb9vM3yH/vCYnaJSUqg
// SIG // tqZUly82pgYSB6tDeZIYcQoOhTI+M1HhRxmxt8RaAKZn
// SIG // DnXgLdkhnIYDJrRkQBpIgahtExtTuOkmVp2y8YCoFPaU
// SIG // hUD2JT6hPiDD7qD7A77PLpFzD2QFmNezT8aHHhKsVBuJ
// SIG // MLPXZO1k14j0/k68DZGts1YBtGegXNkyvkXSgCCxt3Q8
// SIG // WF8laBXbDnhHaDLBhCOBaZQ8jqcFUx8ZJSXQ8sbvEnmW
// SIG // FZmgM93B9P/JTFTF6qBVFMDd/V0PBbRQC2TctZH4bfv+
// SIG // jyWvZOeFz5yltPLRxUqBjv4KHIaJgBhU2ntMw4H0hpm4
// SIG // B7s6LLxkTsjLsajjCJI8PiKi/mPKYERdmRyvFL8/YA/P
// SIG // dqkIwWWg2Tj5tyutGFtfVR+6GbcCVhijjy7l7otxa/wY
// SIG // VSX66Lo0alaThjc+uojVwH4psL+A1qvbWDB9swoKla20
// SIG // eZubw7fzCpFe6qs++G01sst1SaA0GGmzuQCd04Ue1eH3
// SIG // DFRDZPsN+aWvA455Qmd9ZJLGXuqnBo4BXwVxdWZNj6+b
// SIG // 4P8CAwEAAaOCATYwggEyMB0GA1UdDgQWBBRGsYh76V41
// SIG // aUCRXE9WvD++sIfGajAfBgNVHSMEGDAWgBSfpxVdAF5i
// SIG // XYP05dJlpxtTNRnpcjBfBgNVHR8EWDBWMFSgUqBQhk5o
// SIG // dHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2Ny
// SIG // bC9NaWNyb3NvZnQlMjBUaW1lLVN0YW1wJTIwUENBJTIw
// SIG // MjAxMCgxKS5jcmwwbAYIKwYBBQUHAQEEYDBeMFwGCCsG
// SIG // AQUFBzAChlBodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20v
// SIG // cGtpb3BzL2NlcnRzL01pY3Jvc29mdCUyMFRpbWUtU3Rh
// SIG // bXAlMjBQQ0ElMjAyMDEwKDEpLmNydDAMBgNVHRMBAf8E
// SIG // AjAAMBMGA1UdJQQMMAoGCCsGAQUFBwMIMA0GCSqGSIb3
// SIG // DQEBCwUAA4ICAQARdu3dCkcLLPfaJ3rR1M7D9jWHvnef
// SIG // fkmXvFIJtqxHGWM1oqAh+bqxpI7HZz2MeNhh1Co+E9Aa
// SIG // bOgj94Sp1seXxdWISJ9lRGaAAWzA873aTB3/SjwuGqbq
// SIG // QuAvUzBFCO40UJ9anpavkpq/0nDqLb7XI5H+nsmjFyu8
// SIG // yqX1PMmnb4s1fbc/F30ijaASzqJ+p5rrgYWwDoMihM5b
// SIG // F0Y0riXihwE7eTShak/EwcxRmG3h+OT+Ox8KOLuLqwFF
// SIG // l1siTeQCp+YSt4J1tWXapqGJDlCbYr3Rz8+ryTS8CoZA
// SIG // U0vSHCOQcq12Th81p7QlHZv9cTRDhZg2TVyg8Gx3X6mk
// SIG // pNOXb56QUohI3Sn39WQJwjDn74J0aVYMai8mY6/WOurK
// SIG // MKEuSNhCiei0TK68vOY7sH0XEBWnRSbVefeStDo94UIU
// SIG // VTwd2HmBEfY8kfryp3RlA9A4FvfUvDHMaF9BtvU/pK6d
// SIG // 1CdKG29V0WN3uVzfYETJoRpjLYFGq0MvK6QVMmuNxk3b
// SIG // CRfj1acSWee14UGjglxWwvyOfNJe3pxcNFOd8Hhyp9d4
// SIG // AlQGVLNotaFvopgPLeJwUT3dl5VaAAhMwvIFmqwsffQy
// SIG // 93morrprcnv74r5g3ejC39NYpFEoy+qmzLW1jFa1aXE2
// SIG // Xb/KZw2yawqldSp0Hu4VEkjGxFNc+AztIUWwmTCCB3Ew
// SIG // ggVZoAMCAQICEzMAAAAVxedrngKbSZkAAAAAABUwDQYJ
// SIG // KoZIhvcNAQELBQAwgYgxCzAJBgNVBAYTAlVTMRMwEQYD
// SIG // VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25k
// SIG // MR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24x
// SIG // MjAwBgNVBAMTKU1pY3Jvc29mdCBSb290IENlcnRpZmlj
// SIG // YXRlIEF1dGhvcml0eSAyMDEwMB4XDTIxMDkzMDE4MjIy
// SIG // NVoXDTMwMDkzMDE4MzIyNVowfDELMAkGA1UEBhMCVVMx
// SIG // EzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1Jl
// SIG // ZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3Jh
// SIG // dGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3Rh
// SIG // bXAgUENBIDIwMTAwggIiMA0GCSqGSIb3DQEBAQUAA4IC
// SIG // DwAwggIKAoICAQDk4aZM57RyIQt5osvXJHm9DtWC0/3u
// SIG // nAcH0qlsTnXIyjVX9gF/bErg4r25PhdgM/9cT8dm95VT
// SIG // cVrifkpa/rg2Z4VGIwy1jRPPdzLAEBjoYH1qUoNEt6aO
// SIG // RmsHFPPFdvWGUNzBRMhxXFExN6AKOG6N7dcP2CZTfDlh
// SIG // AnrEqv1yaa8dq6z2Nr41JmTamDu6GnszrYBbfowQHJ1S
// SIG // /rboYiXcag/PXfT+jlPP1uyFVk3v3byNpOORj7I5LFGc
// SIG // 6XBpDco2LXCOMcg1KL3jtIckw+DJj361VI/c+gVVmG1o
// SIG // O5pGve2krnopN6zL64NF50ZuyjLVwIYwXE8s4mKyzbni
// SIG // jYjklqwBSru+cakXW2dg3viSkR4dPf0gz3N9QZpGdc3E
// SIG // XzTdEonW/aUgfX782Z5F37ZyL9t9X4C626p+Nuw2TPYr
// SIG // bqgSUei/BQOj0XOmTTd0lBw0gg/wEPK3Rxjtp+iZfD9M
// SIG // 269ewvPV2HM9Q07BMzlMjgK8QmguEOqEUUbi0b1qGFph
// SIG // AXPKZ6Je1yh2AuIzGHLXpyDwwvoSCtdjbwzJNmSLW6Cm
// SIG // gyFdXzB0kZSU2LlQ+QuJYfM2BjUYhEfb3BvR/bLUHMVr
// SIG // 9lxSUV0S2yW6r1AFemzFER1y7435UsSFF5PAPBXbGjfH
// SIG // CBUYP3irRbb1Hode2o+eFnJpxq57t7c+auIurQIDAQAB
// SIG // o4IB3TCCAdkwEgYJKwYBBAGCNxUBBAUCAwEAATAjBgkr
// SIG // BgEEAYI3FQIEFgQUKqdS/mTEmr6CkTxGNSnPEP8vBO4w
// SIG // HQYDVR0OBBYEFJ+nFV0AXmJdg/Tl0mWnG1M1GelyMFwG
// SIG // A1UdIARVMFMwUQYMKwYBBAGCN0yDfQEBMEEwPwYIKwYB
// SIG // BQUHAgEWM2h0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9w
// SIG // a2lvcHMvRG9jcy9SZXBvc2l0b3J5Lmh0bTATBgNVHSUE
// SIG // DDAKBggrBgEFBQcDCDAZBgkrBgEEAYI3FAIEDB4KAFMA
// SIG // dQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUw
// SIG // AwEB/zAfBgNVHSMEGDAWgBTV9lbLj+iiXGJo0T2UkFvX
// SIG // zpoYxDBWBgNVHR8ETzBNMEugSaBHhkVodHRwOi8vY3Js
// SIG // Lm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9N
// SIG // aWNSb29DZXJBdXRfMjAxMC0wNi0yMy5jcmwwWgYIKwYB
// SIG // BQUHAQEETjBMMEoGCCsGAQUFBzAChj5odHRwOi8vd3d3
// SIG // Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY1Jvb0Nl
// SIG // ckF1dF8yMDEwLTA2LTIzLmNydDANBgkqhkiG9w0BAQsF
// SIG // AAOCAgEAnVV9/Cqt4SwfZwExJFvhnnJL/Klv6lwUtj5O
// SIG // R2R4sQaTlz0xM7U518JxNj/aZGx80HU5bbsPMeTCj/ts
// SIG // 0aGUGCLu6WZnOlNN3Zi6th542DYunKmCVgADsAW+iehp
// SIG // 4LoJ7nvfam++Kctu2D9IdQHZGN5tggz1bSNU5HhTdSRX
// SIG // ud2f8449xvNo32X2pFaq95W2KFUn0CS9QKC/GbYSEhFd
// SIG // PSfgQJY4rPf5KYnDvBewVIVCs/wMnosZiefwC2qBwoEZ
// SIG // QhlSdYo2wh3DYXMuLGt7bj8sCXgU6ZGyqVvfSaN0DLzs
// SIG // kYDSPeZKPmY7T7uG+jIa2Zb0j/aRAfbOxnT99kxybxCr
// SIG // dTDFNLB62FD+CljdQDzHVG2dY3RILLFORy3BFARxv2T5
// SIG // JL5zbcqOCb2zAVdJVGTZc9d/HltEAY5aGZFrDZ+kKNxn
// SIG // GSgkujhLmm77IVRrakURR6nxt67I6IleT53S0Ex2tVdU
// SIG // CbFpAUR+fKFhbHP+CrvsQWY9af3LwUFJfn6Tvsv4O+S3
// SIG // Fb+0zj6lMVGEvL8CwYKiexcdFYmNcP7ntdAoGokLjzba
// SIG // ukz5m/8K6TT4JDVnK+ANuOaMmdbhIurwJ0I9JZTmdHRb
// SIG // atGePu1+oDEzfbzL6Xu/OHBE0ZDxyKs6ijoIYn/ZcGNT
// SIG // TY3ugm2lBRDBcQZqELQdVTNYs6FwZvKhggLOMIICNwIB
// SIG // ATCB+KGB0KSBzTCByjELMAkGA1UEBhMCVVMxEzARBgNV
// SIG // BAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQx
// SIG // HjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEl
// SIG // MCMGA1UECxMcTWljcm9zb2Z0IEFtZXJpY2EgT3BlcmF0
// SIG // aW9uczEmMCQGA1UECxMdVGhhbGVzIFRTUyBFU046OEE4
// SIG // Mi1FMzRGLTlEREExJTAjBgNVBAMTHE1pY3Jvc29mdCBU
// SIG // aW1lLVN0YW1wIFNlcnZpY2WiIwoBATAHBgUrDgMCGgMV
// SIG // AMp1N1VLhPMvWXEoZfmF4apZlnRUoIGDMIGApH4wfDEL
// SIG // MAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24x
// SIG // EDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jv
// SIG // c29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9z
// SIG // b2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAwDQYJKoZIhvcN
// SIG // AQEFBQACBQDneumwMCIYDzIwMjMwMTI1MDczNTEyWhgP
// SIG // MjAyMzAxMjYwNzM1MTJaMHcwPQYKKwYBBAGEWQoEATEv
// SIG // MC0wCgIFAOd66bACAQAwCgIBAAICIMsCAf8wBwIBAAIC
// SIG // EcEwCgIFAOd8OzACAQAwNgYKKwYBBAGEWQoEAjEoMCYw
// SIG // DAYKKwYBBAGEWQoDAqAKMAgCAQACAwehIKEKMAgCAQAC
// SIG // AwGGoDANBgkqhkiG9w0BAQUFAAOBgQBNiYvyLWDS8fxu
// SIG // ZMK48POg21mRZvlUik/R0uyemcCD1uVAwInTxiy3zKz0
// SIG // M53zVDllfWzXXnSegehUi5h9FWB7h/ayhcriVmtj7iuV
// SIG // IDUbSFgSSGSuQFhONhivAw1HGerddeIi7QY8E7y2zCvl
// SIG // OWBgt7qyB58sFIzNeT0GvgcEUjGCBA0wggQJAgEBMIGT
// SIG // MHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5n
// SIG // dG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVN
// SIG // aWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1p
// SIG // Y3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwAhMzAAAB
// SIG // wvp9hw5UU0ckAAEAAAHCMA0GCWCGSAFlAwQCAQUAoIIB
// SIG // SjAaBgkqhkiG9w0BCQMxDQYLKoZIhvcNAQkQAQQwLwYJ
// SIG // KoZIhvcNAQkEMSIEILVifKcOdRGtPlJorDOd0IkURzag
// SIG // cOx0MfiHMc8Vjq1XMIH6BgsqhkiG9w0BCRACLzGB6jCB
// SIG // 5zCB5DCBvQQgypNgW8fpsMV57r0F5beUuiEVOVe4Bdma
// SIG // O+e28mGDUBYwgZgwgYCkfjB8MQswCQYDVQQGEwJVUzET
// SIG // MBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVk
// SIG // bW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0
// SIG // aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFt
// SIG // cCBQQ0EgMjAxMAITMwAAAcL6fYcOVFNHJAABAAABwjAi
// SIG // BCDZtPul4bOJNCcvtZzuzabwjoZvmgxjIH4kXnvjgGkd
// SIG // VzANBgkqhkiG9w0BAQsFAASCAgAY0pgHeubE/s1jhX5Q
// SIG // e5j94yidBzd14PpAGbJA+hULJqsyKoHZ/5LYq+EK9RzR
// SIG // H28IzYSUoZUaQNduqLovh4NiNPWcWhquR5oS3kbLNNf9
// SIG // YGvlCeeiH8rJme32qjFwk1IvVkztXJN4CnFc0GreN7K6
// SIG // OSVkdYVjTaQqd+EcIXhmP+Ep9luit8AtOogRlI4i4ltG
// SIG // oiC5WR3/MbTB9liwue7oWjiLc1xIovLPABy4T04k3Eas
// SIG // kB9NXYHMXTvbakwtb4963lyReY5Pi/v5Wx86t9KDHg3a
// SIG // yz2cbQCj6oBapENRqlKc/mLpEYRzvYOKaeTKBESziuTf
// SIG // vIyA8zGKiQEGr085XxkD699y8hQCvN2WEp7FQSKl5EpG
// SIG // b2vkoXL/WRaqRy0gS7ds2TwGts+NYaCCCr+QE+iGhHG4
// SIG // H2bx9s7NS9o+u626zFEgtmEaigjcCUwGnn4yMrQENgGq
// SIG // Gqlu68WCOKQZZuxCxKUodvsnemGFAbRXedw32E23vJbI
// SIG // 8KJIlvLt5WW9dC8d89mkHr7MqCLznzEDHWUhuq7V/K0w
// SIG // /lyIiBKAo+1A34LMBOC/lIhG501/qM0D9kHtIg7om4G6
// SIG // DbsJhXf59/pYdHb5V3T4q5eK0ZPTyKQzPAIjchXX1RRb
// SIG // QKBG+wdFOItc3157ZWz1HWlETArO4cA3MFktbc0R4+SQ
// SIG // bNLbUw==
// SIG // End signature block
