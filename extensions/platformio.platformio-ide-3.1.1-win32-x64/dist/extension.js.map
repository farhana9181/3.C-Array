{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://platformio-ide/webpack/bootstrap","webpack://platformio-ide/webpack/runtime/compat get default export","webpack://platformio-ide/webpack/runtime/define property getters","webpack://platformio-ide/webpack/runtime/hasOwnProperty shorthand","webpack://platformio-ide/webpack/runtime/make namespace object","webpack://platformio-ide/./src/constants.js","webpack://platformio-ide/external commonjs2 \"vscode\"","webpack://platformio-ide/external commonjs2 \"platformio-node-helpers\"","webpack://platformio-ide/external commonjs2 \"platformio-vscode-debug\"","webpack://platformio-ide/external node-commonjs \"os\"","webpack://platformio-ide/./src/utils.js","webpack://platformio-ide/external node-commonjs \"fs\"","webpack://platformio-ide/external node-commonjs \"path\"","webpack://platformio-ide/./src/project/helpers.js","webpack://platformio-ide/./src/home.js","webpack://platformio-ide/external commonjs2 \"fs-plus\"","webpack://platformio-ide/./src/installer/python-prompt.js","webpack://platformio-ide/./src/installer/manager.js","webpack://platformio-ide/./src/release-notes.js","webpack://platformio-ide/./src/terminal.js","webpack://platformio-ide/./src/toolbar.js","webpack://platformio-ide/./src/project/config.js","webpack://platformio-ide/./src/project/task-tree.js","webpack://platformio-ide/./src/project/tasks.js","webpack://platformio-ide/./src/project/tests.js","webpack://platformio-ide/./src/project/manager.js","webpack://platformio-ide/./src/views/quick-access-tree.js","webpack://platformio-ide/./src/main.js","webpack://platformio-ide/./src/misc.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nexport const IS_WINDOWS = process.platform.startsWith('win');\nexport const IS_OSX = process.platform == 'darwin';\nexport const IS_LINUX = !IS_WINDOWS && !IS_OSX;\nexport const PIO_CORE_VERSION_SPEC = '>=6.1.6';\nexport const STATUS_BAR_PRIORITY_START = 10;\nexport const CONFLICTED_EXTENSION_IDS = [\n  'llvm-vs-code-extensions.vscode-clangd',\n  'vsciot-vscode.vscode-arduino',\n  'vscode-openapi',\n];\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"vscode\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"platformio-node-helpers\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"platformio-vscode-debug\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"os\");","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as pioNodeHelpers from 'platformio-node-helpers';\n\nimport os from 'os';\nimport vscode from 'vscode';\n\nexport function disposeSubscriptions(subscriptions) {\n  while (subscriptions.length) {\n    subscriptions.pop().dispose();\n  }\n}\n\nexport async function notifyError(title, err) {\n  const description = err.stack || err.toString();\n  const ghbody = `# Description of problem\n  Leave a comment...\n\n  BEFORE SUBMITTING, PLEASE SEARCH FOR DUPLICATES IN\n  - https://github.com/platformio/platformio-vscode-ide/issues?q=is%3Aissue+\n\n  # Configuration\n\n  VSCode: ${vscode.version}\n  PIO IDE: v${getIDEVersion()}\n  System: ${os.type()}, ${os.release()}, ${os.arch()}\n\n  # Exception\n  \\`\\`\\`\n  ${description}\n  \\`\\`\\`\n  `;\n  const reportUrl = pioNodeHelpers.misc.getErrorReportUrl(title, ghbody);\n\n  let action = 'Report a problem';\n  if (!reportUrl.includes('issues/new')) {\n    action = 'Check available solutions';\n  }\n\n  const selected = await vscode.window.showErrorMessage(\n    description.substring(0, 700) + '...',\n    action\n  );\n  if (selected === action) {\n    vscode.commands.executeCommand('vscode.open', vscode.Uri.parse(reportUrl));\n  }\n  console.error(err);\n}\n\nexport function getIDEManifest() {\n  return vscode.extensions.getExtension('platformio.platformio-ide').packageJSON;\n}\n\nexport function getIDEVersion() {\n  return getIDEManifest().version;\n}\n\nexport async function listCoreSerialPorts() {\n  const script = `\nimport json\nfrom platformio.public import list_serial_ports\n\nprint(json.dumps(list_serial_ports()))\n    `;\n  const output = await pioNodeHelpers.core.getCorePythonCommandOutput(['-c', script]);\n  return JSON.parse(output.trim()).map((item) => {\n    for (const key of ['description', 'hwid']) {\n      if (item[key] === 'n/a') {\n        item[key] = undefined;\n      }\n    }\n    return item;\n  });\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"path\");","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport { extension } from '../main';\nimport fs from 'fs';\nimport path from 'path';\nimport vscode from 'vscode';\n\nexport function isPIOProjectSync(projectDir) {\n  try {\n    fs.accessSync(path.join(projectDir, 'platformio.ini'));\n    return true;\n  } catch (err) {}\n  return false;\n}\n\nexport function getPIOProjectDirs() {\n  return (vscode.workspace.workspaceFolders || [])\n    .map((folder) => folder.uri.fsPath)\n    .filter((projectDir) => isPIOProjectSync(projectDir));\n}\n\nexport function getActiveEditorProjectDir() {\n  const pioProjectDirs = getPIOProjectDirs();\n  if (pioProjectDirs.length < 1) {\n    return undefined;\n  }\n  const editor = vscode.window.activeTextEditor;\n  if (!editor) {\n    return undefined;\n  }\n  const resource = editor.document.uri;\n  if (resource.scheme !== 'file') {\n    return undefined;\n  }\n  const folder = vscode.workspace.getWorkspaceFolder(resource);\n  if (!folder || !isPIOProjectSync(folder.uri.fsPath)) {\n    // outside workspace\n    return undefined;\n  }\n  return folder.uri.fsPath;\n}\n\nexport function getProjectItemState(projectDir, key) {\n  const state = extension.context.globalState.get('projects', {})[projectDir];\n  return (state || {})[key];\n}\n\nexport function updateProjectItemState(projectDir, key, value) {\n  const projects = extension.context.globalState.get('projects', {});\n  if (!projects[projectDir]) {\n    projects[projectDir] = {};\n  }\n  projects[projectDir][key] = value;\n\n  // cleanup removed project\n  for (const item of Object.keys(projects)) {\n    if (!isPIOProjectSync(item)) {\n      delete projects[item];\n    }\n  }\n\n  extension.context.globalState.update('projects', projects);\n  extension.context.globalState.update('lastProjectDir', projectDir);\n}\n\nexport function getLastProjectDir() {\n  return extension.context.globalState.get('lastProjectDir');\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as pioNodeHelpers from 'platformio-node-helpers';\n\nimport { disposeSubscriptions, notifyError } from './utils';\nimport { getPIOProjectDirs, updateProjectItemState } from './project/helpers';\nimport { IS_OSX } from './constants';\nimport { extension } from './main';\nimport path from 'path';\nimport vscode from 'vscode';\n\nexport default class PIOHome {\n  static defaultStartUrl = '/';\n\n  constructor() {\n    this.subscriptions = [];\n    this._currentPanel = undefined;\n    this._lastStartUrl = PIOHome.defaultStartUrl;\n\n    // close PIO Home when workspaces folders are changed (VSCode reactivates extensiuon)\n    this.subscriptions.push(\n      vscode.workspace.onDidChangeWorkspaceFolders(this.disposePanel.bind(this))\n    );\n  }\n\n  static async shutdownAllServers() {\n    await pioNodeHelpers.home.shutdownServer();\n    await pioNodeHelpers.home.shutdownAllServers();\n  }\n\n  onPanelDisposed() {\n    this._currentPanel = undefined;\n  }\n\n  disposePanel() {\n    if (!this._currentPanel) {\n      return;\n    }\n    this._currentPanel.dispose();\n    this._currentPanel = undefined;\n  }\n\n  dispose() {\n    pioNodeHelpers.home.shutdownServer();\n    this.disposePanel();\n    disposeSubscriptions(this.subscriptions);\n  }\n\n  async toggle(startUrl = PIOHome.defaultStartUrl) {\n    const column = vscode.window.activeTextEditor\n      ? vscode.window.activeTextEditor.viewColumn\n      : undefined;\n    try {\n      if (this._currentPanel) {\n        if (this._lastStartUrl !== startUrl) {\n          this._currentPanel.webview.html = await this.getWebviewContent(startUrl);\n        }\n        return this._currentPanel.reveal(column);\n      }\n    } catch (err) {\n      console.warn(err);\n    }\n    this._currentPanel = await this.newPanel(startUrl);\n  }\n\n  async newPanel(startUrl) {\n    const panel = vscode.window.createWebviewPanel(\n      'pioHome',\n      extension.getEnterpriseSetting('pioHomeTitle', 'PIO Home'),\n      vscode.ViewColumn.One,\n      {\n        enableScripts: true,\n        retainContextWhenHidden: true,\n      }\n    );\n    this.subscriptions.push(panel.onDidDispose(this.onPanelDisposed.bind(this)));\n    panel.iconPath = vscode.Uri.file(\n      path.join(\n        extension.context.extensionPath,\n        'assets',\n        'images',\n        'platformio-mini-logo.svg'\n      )\n    );\n    panel.webview.html = this.getLoadingContent();\n    try {\n      panel.webview.html = await this.getWebviewContent(startUrl);\n    } catch (err) {\n      if (!err.toString().includes('Webview is disposed')) {\n        notifyError('Start PIO Home Server', err);\n      }\n    }\n    return panel;\n  }\n\n  getTheme() {\n    const workbench = vscode.workspace.getConfiguration('workbench') || {};\n    return (workbench.colorTheme || '').toLowerCase().includes('light')\n      ? 'light'\n      : 'dark';\n  }\n\n  getLoadingContent() {\n    const theme = this.getTheme();\n    return `<!DOCTYPE html>\n    <html lang=\"en\">\n    <body style=\"background-color: ${theme === 'light' ? '#FFF' : '#1E1E1E'}\">\n      <div style=\"padding: 15px;\">Loading...</div>\n    </body>\n    </html>`;\n  }\n\n  async getWebviewContent(startUrl) {\n    this._lastStartUrl = startUrl;\n    await pioNodeHelpers.home.ensureServerStarted({\n      port: extension.getConfiguration('pioHomeServerHttpPort'),\n      host: extension.getConfiguration('pioHomeServerHttpHost'),\n      onIDECommand: await this.onIDECommand.bind(this),\n    });\n    const theme = this.getTheme();\n    const iframeId = `pioHomeIFrame-${vscode.env.sessionId}`;\n    const iframeScript = `\n<script>\n  function execCommand(data) {\n    document.getElementById('${iframeId}').contentWindow.postMessage({'command': 'execCommand', 'data': data}, '*');\n  }\n  for (const command of ['copy', 'paste', 'cut']) {\n    document.addEventListener(command, (e) => {\n      execCommand(command);\n    });\n  }\n  document.addEventListener('selectstart', (e) => {\n    execCommand('selectAll');\n    e.preventDefault();\n  });\n  window.addEventListener('keydown', (e) => {\n    if (e.key === 'z' && e.metaKey) {\n      execCommand(e.shiftKey ? 'redo' : 'undo');\n    }\n  });\n  window.addEventListener('message', (e) => {\n    if (e.data.command === 'kbd-event') {\n      window.dispatchEvent(new KeyboardEvent('keydown', e.data.data));\n    }\n  });\n</script>\n  `;\n    return `<!DOCTYPE html>\n      <html lang=\"en\">\n      <head>${IS_OSX ? iframeScript : ''}</head>\n      <body style=\"margin: 0; padding: 0; height: 100%; overflow: hidden; background-color: ${\n        theme === 'light' ? '#FFF' : '#1E1E1E'\n      }\">\n        <iframe id=\"${iframeId}\" src=\"${pioNodeHelpers.home.getFrontendUrl({\n      start: startUrl,\n      theme,\n      workspace: extension.getEnterpriseSetting('defaultPIOHomeWorkspace'),\n    })}\"\n          width=\"100%\"\n          height=\"100%\"\n          frameborder=\"0\"\n          style=\"border: 0; left: 0; right: 0; bottom: 0; top: 0; position:absolute;\" />\n      </body>\n      </html>\n    `;\n  }\n\n  async onIDECommand(command, params) {\n    switch (command) {\n      case 'open_project':\n        return this.onOpenProjectCommand(params);\n      case 'open_text_document':\n        return await this.onOpenTextDocumentCommand(params);\n      case 'get_pio_project_dirs':\n        return this.onGetPIOProjectDirs();\n    }\n  }\n\n  onOpenProjectCommand(params) {\n    if (extension.ProjectManager) {\n      updateProjectItemState(vscode.Uri.file(params).fsPath, 'selectedEnv', undefined);\n      extension.ProjectManager.switchToProject(vscode.Uri.file(params).fsPath);\n    }\n    this.disposePanel();\n    if (vscode.workspace.workspaceFolders) {\n      vscode.workspace.updateWorkspaceFolders(\n        vscode.workspace.workspaceFolders.length,\n        null,\n        { uri: vscode.Uri.file(params) }\n      );\n    } else {\n      vscode.commands.executeCommand('vscode.openFolder', vscode.Uri.file(params));\n    }\n    vscode.commands.executeCommand('workbench.view.explorer');\n    return true;\n  }\n\n  async onOpenTextDocumentCommand(params) {\n    const editor = await vscode.window.showTextDocument(vscode.Uri.file(params.path));\n    const gotoPosition = new vscode.Position(\n      (params.line || 1) - 1,\n      (params.column || 1) - 1\n    );\n    editor.selection = new vscode.Selection(gotoPosition, gotoPosition);\n    editor.revealRange(\n      new vscode.Range(gotoPosition, gotoPosition),\n      vscode.TextEditorRevealType.InCenter\n    );\n    return true;\n  }\n\n  onGetPIOProjectDirs() {\n    return getPIOProjectDirs();\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs-plus\");","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport fs from 'fs-plus';\nimport vscode from 'vscode';\n\nexport default class PythonPrompt {\n  STATUS_TRY_AGAIN = 0;\n  STATUS_ABORT = 1;\n  STATUS_CUSTOMEXE = 2;\n\n  async prompt() {\n    const selectedItem = await vscode.window.showInformationMessage(\n      'PlatformIO: Can not find working Python 3.6+ Interpreter. Please install the latest Python 3 and restart VSCode',\n      { title: 'Install Python', isCloseAffordance: false },\n      { title: 'I have Python', isCloseAffordance: false },\n      { title: 'Try again', isCloseAffordance: false },\n      { title: 'Abort PlatformIO IDE Installation', isCloseAffordance: true }\n    );\n\n    let result = { status: this.STATUS_TRY_AGAIN };\n    let pythonExecutable = undefined;\n    switch (selectedItem ? selectedItem.title : undefined) {\n      case 'Install Python':\n        vscode.commands.executeCommand(\n          'vscode.open',\n          vscode.Uri.parse(\n            'https://docs.platformio.org/en/latest/faq/install-python.html'\n          )\n        );\n        break;\n      case 'I have Python':\n        pythonExecutable = await vscode.window.showInputBox({\n          prompt: 'Please specify a full path to Python executable file',\n          placeHolder: 'Full path to python/python.exe',\n          validateInput: (value) =>\n            !fs.isFileSync(value) ? 'Invalid path to Python Interpreter' : null,\n        });\n        if (pythonExecutable) {\n          result = {\n            status: this.STATUS_CUSTOMEXE,\n            pythonExecutable,\n          };\n        }\n        break;\n      case 'Abort PlatformIO IDE Installation':\n        result = { status: this.STATUS_ABORT };\n        break;\n    }\n\n    return result;\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as pioNodeHelpers from 'platformio-node-helpers';\n\nimport PIOHome from '../home';\nimport { PIO_CORE_VERSION_SPEC } from '../constants';\nimport PythonPrompt from './python-prompt';\nimport { extension } from '../main';\nimport path from 'path';\nimport vscode from 'vscode';\n\nexport default class InstallationManager {\n  LOCK_TIMEOUT = 1 * 60 * 1000; // 1 minute\n  LOCK_KEY = 'installer-lock';\n\n  constructor(disableAutoUpdates = false) {\n    const config = vscode.workspace.getConfiguration('platformio-ide');\n    this.stages = [\n      new pioNodeHelpers.installer.PlatformIOCoreStage(\n        {\n          getValue: (key) => extension.context.globalState.get(key),\n          setValue: (key, value) => extension.context.globalState.update(key, value),\n        },\n        this.onDidStatusChange.bind(this),\n        {\n          pioCoreVersionSpec: PIO_CORE_VERSION_SPEC,\n          useBuiltinPython: config.get('useBuiltinPython'),\n          useBuiltinPIOCore: config.get('useBuiltinPIOCore'),\n          useDevelopmentPIOCore: config.get('useDevelopmentPIOCore'),\n          pythonPrompt: new PythonPrompt(),\n          disableAutoUpdates: disableAutoUpdates,\n          predownloadedPackageDir: path.join(\n            extension.context.extensionPath,\n            'assets',\n            'predownloaded'\n          ),\n        }\n      ),\n    ];\n  }\n\n  onDidStatusChange() {\n    // increase lock timeout on each stage update\n    if (this.locked()) {\n      this.lock();\n    }\n  }\n\n  lock() {\n    return extension.context.globalState.update(this.LOCK_KEY, new Date().getTime());\n  }\n\n  unlock() {\n    return extension.context.globalState.update(this.LOCK_KEY, undefined);\n  }\n\n  locked() {\n    const lockTime = extension.context.globalState.get(this.LOCK_KEY);\n    if (!lockTime) {\n      return false;\n    }\n    return new Date().getTime() - parseInt(lockTime) <= this.LOCK_TIMEOUT;\n  }\n\n  async check() {\n    let result = true;\n    for (const stage of this.stages) {\n      try {\n        if (!(await stage.check())) {\n          result = false;\n        }\n      } catch (err) {\n        result = false;\n        console.warn(err);\n      }\n    }\n    return result;\n  }\n\n  async install(progress) {\n    const stageIncrementTotal = 100 / this.stages.length;\n    // shutdown all PIO Home servers which block python.exe on Windows\n    await PIOHome.shutdownAllServers();\n    for (const stage of this.stages) {\n      await stage.install((message, increment) => {\n        progress.report({\n          message,\n          increment: stageIncrementTotal * (increment / 100),\n        });\n      });\n    }\n    progress.report({ message: 'Finished! Please restart VSCode.', increment: 100 });\n  }\n\n  destroy() {\n    return this.stages.map((stage) => stage.destroy());\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport { disposeSubscriptions } from './utils';\nimport { extension } from './main';\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport vscode from 'vscode';\n\nexport default class PIOReleaseNotes {\n  constructor() {\n    this.version = extension.context.extension.packageJSON.version;\n    this._currentPanel = undefined;\n\n    this.subscriptions = [\n      vscode.commands.registerCommand('platformio-ide.showReleaseNotes', () =>\n        this.toggle()\n      ),\n    ];\n\n    const stateKey = 'showedReleaseNotesFor';\n    if (extension.context.globalState.get(stateKey) !== this.version) {\n      extension.context.globalState.update(stateKey, this.version);\n      this.toggle();\n    }\n  }\n\n  dispose() {\n    disposeSubscriptions(this.subscriptions);\n  }\n\n  async toggle() {\n    const column = vscode.window.activeTextEditor\n      ? vscode.window.activeTextEditor.viewColumn\n      : undefined;\n    try {\n      if (this._currentPanel) {\n        this._currentPanel.webview.html = await this.getWebviewContent();\n        return this._currentPanel.reveal(column);\n      }\n    } catch (err) {\n      console.warn(err);\n    }\n    this._currentPanel = await this.newPanel();\n  }\n\n  async newPanel() {\n    const panel = vscode.window.createWebviewPanel(\n      'pioReleaseNotes',\n      'PlatformIO IDE: Release Notes',\n      vscode.ViewColumn.One,\n      {\n        enableScripts: true,\n        retainContextWhenHidden: true,\n      }\n    );\n    panel.iconPath = vscode.Uri.file(\n      path.join(\n        extension.context.extensionPath,\n        'assets',\n        'images',\n        'platformio-mini-logo.svg'\n      )\n    );\n    panel.onDidDispose(\n      () => (this._currentPanel = undefined),\n      undefined,\n      this.subscriptions\n    );\n    const logoSrc = panel.webview.asWebviewUri(\n      vscode.Uri.file(\n        path.join(\n          extension.context.extensionPath,\n          'assets',\n          'images',\n          'platformio-logo.png'\n        )\n      )\n    );\n    panel.webview.html = await this.getWebviewContent(logoSrc);\n    return panel;\n  }\n\n  async getWebviewContent(logoSrc) {\n    const releaseNotes = await this.readReleaseNotes();\n    return `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>PlatformIO IDE: Release Notes</title>\n  <style>ul { padding-top: 5px; } li { padding-bottom: 4px; }</style>\n</head>\n<body>\n  <table border=\"0\">\n  <tr>\n    <td><img src=\"${logoSrc}\" width=\"28px\" height=\"28px\"></td>\n    <td style=\"padding-left: 10px\"><h1>PlatformIO IDE Release Notes</h1></td>\n  </tr>\n  </table>\n  <div>\n    Welcome to the ${this.version} release of PlatformIO IDE.\n    There are many updates in this version that we hope you'll like.\n  </div>\n  <p>\n    <b>Release History</b>: Want to read release notes for the previous versions?\n    Please visit <a href=\"https://github.com/platformio/platformio-vscode-ide/blob/develop/CHANGELOG.md\">PlatformIO IDE Changelog</a>\n    for more detailed information.\n  </p>\n  <p id=\"content\">Loading...</p>\n  <h2>Stay in touch with us</h2>\n  <p>\n    Please follow us on <a href=\"https://www.linkedin.com/company/platformio\">LinkedIn</a> and Twitter <a href=\"https://twitter.com/PlatformIO_Org\">@PlatformIO_Org</a>\n    to keep up to date with the latest news, articles and tips!\n  </p>\n  <hr />\n  <p>\n    <b>PlatformIO Core</b>: If you would like to read the PlatformIO Core release notes,\n    go to the <a href=\"https://docs.platformio.org/en/latest/core/history.html\">Release Notes</a> on <a href=\"https://docs.platformio.org/\">docs.platformio.org</a>.\n  </p>\n  <textarea id=\"pioRNMarkdown\" hidden=\"hidden\">${releaseNotes}</textarea>\n  <script src=\"https://cdn.jsdelivr.net/npm/marked/marked.min.js\"></script>\n  <script>\n    document.getElementById('content').innerHTML =\n      marked.parse(document.getElementById('pioRNMarkdown').value);\n  </script>\n</body>\n</html>`;\n  }\n\n  async readReleaseNotes() {\n    const changelogPath = path.join(extension.context.extensionPath, 'CHANGELOG.md');\n    try {\n      const contents = await fs.readFile(changelogPath, { encoding: 'utf-8' });\n      const startsAt = contents.indexOf('\\n## ');\n      return contents.substring(startsAt, contents.indexOf('\\n## ', startsAt + 3));\n    } catch (err) {\n      return err.toString();\n    }\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport vscode from 'vscode';\n\nexport default class PIOTerminal {\n  constructor() {\n    this._instance = undefined;\n  }\n\n  new() {\n    const envClone = Object.assign({}, process.env);\n    if (process.env.PLATFORMIO_PATH) {\n      envClone.PATH = process.env.PLATFORMIO_PATH;\n      envClone.Path = process.env.PLATFORMIO_PATH;\n    }\n    return vscode.window.createTerminal({\n      name: 'PlatformIO CLI',\n      env: envClone,\n    });\n  }\n\n  sendText(text) {\n    if (!this._instance || this._instance.exitStatus !== undefined) {\n      this._instance = this.new();\n    }\n    this._instance.sendText(text);\n    this._instance.show();\n  }\n\n  dispose() {\n    if (this._instance) {\n      this._instance.dispose();\n    }\n    this._instance = undefined;\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport { STATUS_BAR_PRIORITY_START } from './constants';\nimport { disposeSubscriptions } from './utils';\nimport { extension } from './main';\nimport vscode from 'vscode';\n\nclass ToolbarButton {\n  constructor(text, tooltip, commands) {\n    this.text = text;\n    this.tooltip = tooltip;\n    this.commands = ToolbarButtonCommands.from(commands);\n  }\n\n  createStatusBarItem(options = { priority: 0 }) {\n    const item = vscode.window.createStatusBarItem(\n      'pio-toolbar',\n      vscode.StatusBarAlignment.Left,\n      STATUS_BAR_PRIORITY_START + options.priority + 1\n    );\n    item.name = 'PlatformIO: Toolbar';\n    item.text = this.text;\n    item.tooltip = this.tooltip;\n    item.command = {\n      title: this.tooltip,\n      command: PIOToolbar.RUN_BUTTON_COMMANDS_ID,\n      arguments: [this],\n    };\n    return item;\n  }\n}\n\nclass ToolbarButtonCommands {\n  constructor(id, args = undefined) {\n    this.id = id;\n    this.args = args;\n  }\n\n  static from(rawCommands) {\n    const result = [];\n    if (!rawCommands) {\n      return result;\n    }\n    if (!Array.isArray(rawCommands)) {\n      rawCommands = [rawCommands];\n    }\n    return rawCommands.map((item) =>\n      typeof item === 'object'\n        ? new ToolbarButtonCommands(item.id, item.args)\n        : new ToolbarButtonCommands(item)\n    );\n  }\n}\n\nexport default class PIOToolbar {\n  static RUN_BUTTON_COMMANDS_ID = 'platformio-ide.runToolbarButtonCommand';\n\n  constructor(options = { filterCommands: undefined, ignoreCommands: undefined }) {\n    this.options = options;\n    this.subscriptions = [];\n    this.show();\n  }\n\n  dispose() {\n    disposeSubscriptions(this.subscriptions);\n  }\n\n  static getButtons() {\n    const items = extension.getConfiguration('toolbar') || [];\n    return items.map(\n      (item) =>\n        new ToolbarButton(\n          item.text,\n          item.tooltip,\n          ToolbarButtonCommands.from(item.commands)\n        )\n    );\n  }\n\n  show() {\n    this.refresh();\n  }\n\n  refresh() {\n    this.dispose();\n    const buttons = PIOToolbar.getButtons().filter(\n      (button) =>\n        (!this.options.filterCommands ||\n          button.commands.some((cmd) =>\n            this.options.filterCommands.includes(cmd.id)\n          )) &&\n        (!this.options.ignoreCommands ||\n          !button.commands.some((cmd) => this.options.ignoreCommands.includes(cmd.id)))\n    );\n\n    buttons.forEach((button, index) => {\n      const sbItem = button.createStatusBarItem({ priority: buttons.length - index });\n      sbItem.show();\n      this.subscriptions.push(sbItem);\n    });\n\n    this.subscriptions.push(\n      vscode.workspace.onDidChangeConfiguration((e) =>\n        e.affectsConfiguration('platformio-ide.toolbar') ? this.refresh() : undefined\n      ),\n      vscode.commands.registerCommand(\n        PIOToolbar.RUN_BUTTON_COMMANDS_ID,\n        this.onButtonClick.bind(this)\n      )\n    );\n  }\n\n  async onButtonClick(button) {\n    for (const cmd of button.commands) {\n      let args = cmd.args || [];\n      if (!Array.isArray(args)) {\n        args = [args];\n      }\n      for (let i = 0; i < args.length; i++) {\n        args[i] = await this._expandArgVariables(args[i]);\n      }\n      await vscode.commands.executeCommand(cmd.id, ...args);\n    }\n  }\n\n  async _expandArgVariables(arg) {\n    if (!arg.includes('${')) {\n      return arg;\n    }\n    const matches = arg.match(/\\$\\{[^\\}]+\\}/g);\n    for (const match of matches) {\n      if (match.startsWith('${command:')) {\n        arg = arg.replace(\n          match,\n          await vscode.commands.executeCommand(match.substring(10, match.length - 1))\n        );\n      }\n    }\n    return arg;\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as pioNodeHelpers from 'platformio-node-helpers';\n\nimport { disposeSubscriptions, listCoreSerialPorts } from '../utils';\nimport vscode from 'vscode';\n\nexport class ProjectConfigLanguageProvider {\n  static DOCUMENT_SELECTOR = { language: 'ini' };\n  SCOPE_PLATFORMIO = 'platformio';\n  SCOPE_ENV = 'env';\n\n  constructor(projectDir) {\n    this.projectDir = projectDir;\n    this.subscriptions = [\n      vscode.languages.registerHoverProvider(\n        ProjectConfigLanguageProvider.DOCUMENT_SELECTOR,\n        {\n          provideHover: async (document, position) =>\n            await this.provideHover(document, position),\n        }\n      ),\n      vscode.languages.registerCompletionItemProvider(\n        ProjectConfigLanguageProvider.DOCUMENT_SELECTOR,\n        {\n          provideCompletionItems: async (document, position, token, context) =>\n            await this.provideCompletionItems(document, position, token, context),\n        }\n      ),\n    ];\n    // if (vscode.languages.registerInlineCompletionItemProvider) {\n    //   this.subscriptions.push(\n    //     vscode.languages.registerInlineCompletionItemProvider(\n    //       ProjectConfigLanguageProvider.DOCUMENT_SELECTOR,\n    //       {\n    //         provideInlineCompletionItems: async (document, position) =>\n    //           await this.provideCompletionItems(document, position, true),\n    //       }\n    //     )\n    //   );\n    // }\n    this._options = undefined;\n    this._ports = undefined;\n  }\n\n  dispose() {\n    disposeSubscriptions(this.subscriptions);\n  }\n\n  async getOptions() {\n    if (this._options) {\n      return this._options;\n    }\n    const script = `\nimport json\nfrom platformio.public import get_config_options_schema\n\nprint(json.dumps(get_config_options_schema()))\n  `;\n    const output = await pioNodeHelpers.core.getCorePythonCommandOutput(\n      ['-c', script],\n      { projectDir: this.projectDir }\n    );\n    this._options = JSON.parse(output.trim());\n    return this._options;\n  }\n\n  renderOptionDocs(option) {\n    const attrs = [\n      ['Name', option.name],\n      ['Group', option.group],\n      ['Type', option.type],\n      ['Multiple', option.multiple ? 'yes' : 'no'],\n    ];\n    if (option.sysenvvar) {\n      attrs.push(['EnvironmentVariable', option.sysenvvar]);\n    }\n    if (option.type === 'choice') {\n      attrs.push(['Choices', option.choices.join(', ')]);\n    }\n    if (option.min !== undefined) {\n      attrs.push(['Minimum', option.min]);\n    }\n    if (option.max !== undefined) {\n      attrs.push(['Maximum', option.max]);\n    }\n    if (option.default !== null || option.type === 'boolean') {\n      let value = option.default;\n      if (option.type === 'boolean') {\n        value = option.default ? 'yes' : 'no';\n      } else if (option.multiple && Array.isArray(option.default)) {\n        value = option.default.join(', ');\n      }\n      attrs.push(['Default', value]);\n    }\n    const docs = new vscode.MarkdownString();\n    docs.appendCodeblock(\n      attrs.map(([name, value]) => `${name} = ${value}`).join('\\n'),\n      'ini'\n    );\n    docs.appendMarkdown(`\n${option.description}\n\n[View documentation](https://docs.platformio.org/en/latest/projectconf/sections/${option.scope}/options/${option.group}/${option.name}.html?utm_source=vscode&utm_medium=completion)\n`);\n    return docs;\n  }\n\n  getScopeAt(document, position) {\n    const text = document.getText(\n      new vscode.Range(new vscode.Position(0, 0), position)\n    );\n    for (const line of text.split('\\n').reverse()) {\n      if (line.startsWith('[platformio]')) {\n        return this.SCOPE_PLATFORMIO;\n      } else if (line.startsWith('[env]') || line.startsWith('[env:')) {\n        return this.SCOPE_ENV;\n      }\n    }\n    return undefined;\n  }\n\n  async getOptionAt(document, position) {\n    for (let lineNum = position.line; lineNum > 0; lineNum--) {\n      const line = document.lineAt(lineNum).text;\n      if (line.startsWith(' ') || line.startsWith('\\t')) {\n        continue;\n      }\n      const optionName = line.split('=')[0].trim();\n      return (await this.getOptions()).find((option) => option.name === optionName);\n    }\n  }\n\n  isOptionValueLocation(document, position) {\n    const line = document.lineAt(position.line).text;\n    const sepPos = line.indexOf('=');\n    return (\n      line.startsWith(' ') ||\n      line.startsWith('\\t') ||\n      (sepPos > 0 && position.character > sepPos)\n    );\n  }\n\n  async provideHover(document, position) {\n    const word = document.getText(document.getWordRangeAtPosition(position));\n    const option = (await this.getOptions()).find((option) => option.name === word);\n    if (option) {\n      return new vscode.Hover(this.renderOptionDocs(option));\n    }\n    return this.providePackageHover(document, position);\n  }\n\n  async providePackageHover(document, position) {\n    const line = document.lineAt(position.line).text;\n    let rawValue = undefined;\n    if (line.startsWith(' ') || line.startsWith('\\t')) {\n      rawValue = line;\n    } else if (line.includes('=')) {\n      rawValue = line.split('=', 2)[1];\n    }\n    if (!rawValue) {\n      return;\n    }\n    const pkgRegExp = /^(([a-z\\d_\\-]+)\\/)?([a-z\\d\\_\\- ]+)/i;\n    const matches = pkgRegExp.exec(rawValue.trim());\n    if (!matches) {\n      return;\n    }\n\n    const option = await this.getOptionAt(document, position);\n    if (!['platform', 'lib_deps'].includes(option.name)) {\n      return;\n    }\n\n    const pkgOwner = matches[2];\n    const pkgName = matches[3];\n    const pkgUrlParts = ['https://registry.platformio.org'];\n    if (pkgOwner) {\n      pkgUrlParts.push(option.name === 'platform' ? 'platforms' : 'libraries');\n      pkgUrlParts.push(pkgOwner.trim(), encodeURIComponent(pkgName.trim()));\n    } else {\n      const qs = new URLSearchParams();\n      qs.set('t', option.group);\n      qs.set('q', `name:\"${pkgName.trim()}\"`);\n      pkgUrlParts.push(`search?${qs.toString()}`);\n    }\n\n    return new vscode.Hover(\n      new vscode.MarkdownString(\n        `[Open in PlatformIO Registry](${pkgUrlParts.join('/')})`\n      )\n    );\n  }\n\n  async provideCompletionItems(document, position, token, context, isInline = false) {\n    if (token.isCancellationRequested) {\n      return;\n    }\n    return await (this.isOptionValueLocation(document, position)\n      ? this.provideCompletionValues(document, position, isInline)\n      : this.provideCompletionOptions(document, position, isInline));\n  }\n\n  async provideCompletionOptions(document, position, isInline = false) {\n    const scope = this.getScopeAt(document, position);\n    if (!scope) {\n      return;\n    }\n    const options = await this.getOptions();\n    return options\n      .filter((option) => option.scope === scope)\n      .map((option) => {\n        if (isInline) {\n          return new vscode.InlineCompletionItem(option.name);\n        }\n        const item = new vscode.CompletionItem(\n          option.name,\n          vscode.CompletionItemKind.Field\n        );\n        item.documentation = this.renderOptionDocs(option);\n        return item;\n      });\n  }\n\n  async provideCompletionValues(document, position) {\n    const option = await this.getOptionAt(document, position);\n    if (!option) {\n      return;\n    }\n    switch (option.name) {\n      case 'upload_port':\n      case 'monitor_port':\n      case 'test_port':\n        return await this.provideCompletionPorts();\n\n      case 'upload_speed':\n      case 'monitor_speed':\n      case 'test_speed':\n        return await this.provideCompletionBaudrates(option);\n    }\n    return this.provideTypedCompletionValues(option);\n  }\n\n  async provideTypedCompletionValues(option) {\n    const values = [];\n    let defaultValue = option.default;\n    switch (option.type) {\n      case 'boolean':\n        values.push('yes', 'no');\n        defaultValue = option.default ? 'yes' : 'no';\n        break;\n      case 'choice':\n        option.choices.forEach((item) => values.push(item));\n        break;\n\n      case 'integer range':\n        for (let i = option.min; i <= option.max; i++) {\n          values.push(i);\n        }\n        break;\n    }\n    return values.map((value) => {\n      const item = new vscode.CompletionItem(\n        value.toString(),\n        vscode.CompletionItemKind.EnumMember\n      );\n      item.preselect = defaultValue === value;\n      return item;\n    });\n  }\n\n  createCustomCompletionValueItem() {\n    const item = new vscode.CompletionItem('Custom', vscode.CompletionItemKind.Value);\n    item.insertText = '';\n    item.sortText = 'Z';\n    return item;\n  }\n\n  async provideCompletionPorts() {\n    if (!this._ports) {\n      this._ports = await listCoreSerialPorts();\n      setTimeout(() => (this._ports = undefined), 3000);\n    }\n    const items = (this._ports || []).map((port) => {\n      const item = new vscode.CompletionItem(\n        port.port,\n        vscode.CompletionItemKind.Value\n      );\n      item.detail = port.description;\n      item.documentation = port.hwid;\n      return item;\n    });\n    items.push(this.createCustomCompletionValueItem());\n    return items;\n  }\n\n  async provideCompletionBaudrates(option) {\n    const values = [\n      600, 1200, 2400, 4800, 9600, 14400, 19200, 28800, 38400, 57600, 115200, 230400,\n    ];\n    const items = values.map((value, index) => {\n      const item = new vscode.CompletionItem(\n        value.toString(),\n        vscode.CompletionItemKind.Value\n      );\n      item.sortText = String.fromCharCode(index + 65);\n      item.preselect = option.default === value;\n      return item;\n    });\n    items.push(this.createCustomCompletionValueItem());\n    return items;\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as vscode from 'vscode';\n\nexport default class ProjectTasksTreeProvider {\n  static DEFAULT_ENV_NAME = 'Default';\n\n  constructor(id, envs, tasks, selectedEnv = undefined) {\n    this.id = id;\n    this.envs = envs;\n    this.tasks = tasks;\n    this.selectedEnv = selectedEnv;\n    this.multiEnvProject = this.envs.length > 1;\n  }\n\n  getTreeItem(item) {\n    return item instanceof vscode.TreeItem ? item : this.taskToTreeItem(item);\n  }\n\n  taskToTreeItem(task) {\n    const treeItem = new vscode.TreeItem(task.name);\n    treeItem.iconPath = new vscode.ThemeIcon('circle-outline');\n    treeItem.tooltip = task.title;\n    treeItem.command = {\n      title: task.title,\n      command: 'platformio-ide._runProjectTask',\n      arguments: [task],\n    };\n    if (!task.coreEnv && task.multienv && this.multiEnvProject) {\n      treeItem.label += ' All';\n    }\n    return treeItem;\n  }\n\n  getChildren(element) {\n    if (element && element.group) {\n      return this.getEnvGroupChildren(element.env, element.group);\n    } else if (element) {\n      return this.getEnvChildren(element.env);\n    }\n    return this.getRootChildren();\n  }\n\n  getRootChildren() {\n    const result = [];\n    for (const env of [undefined, ...this.envs]) {\n      const treeItem = new vscode.TreeItem(\n        env || ProjectTasksTreeProvider.DEFAULT_ENV_NAME,\n        env && (env === this.selectedEnv || !this.multiEnvProject)\n          ? vscode.TreeItemCollapsibleState.Expanded\n          : vscode.TreeItemCollapsibleState.Collapsed\n      );\n      treeItem.id = `${this.id}-${env}`;\n      treeItem.env = env;\n      treeItem.iconPath = new vscode.ThemeIcon('root-folder');\n      result.push(treeItem);\n    }\n    return result;\n  }\n\n  getEnvGroupChildren(env, group) {\n    return this.tasks.filter((task) => task.coreEnv === env && task.group === group);\n  }\n\n  getEnvChildren(env) {\n    const envTasks = this.tasks.filter((task) => task.coreEnv === env);\n    if (!envTasks.length) {\n      return [new vscode.TreeItem('Loading...')];\n    }\n    const result = envTasks.filter((task) => !task.group);\n    // root groups\n    for (const group of this.getTaskGroups(envTasks)) {\n      const element = new vscode.TreeItem(\n        group,\n        ['General', 'Platform'].includes(group)\n          ? vscode.TreeItemCollapsibleState.Expanded\n          : vscode.TreeItemCollapsibleState.Collapsed\n      );\n      element.env = env;\n      element.group = group;\n      element.iconPath = vscode.ThemeIcon.Folder;\n      result.push(element);\n    }\n    return result;\n  }\n\n  getTaskGroups(tasks) {\n    const result = ['General'];\n    const candidates = tasks.filter((task) => task.group).map((task) => task.group);\n    // reorder\n    if (candidates.includes('Platform')) {\n      result.push('Platform');\n    }\n    for (const group of candidates) {\n      if (!result.includes(group)) {\n        result.push(group);\n      }\n    }\n    return result;\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport { IS_WINDOWS, STATUS_BAR_PRIORITY_START } from '../constants';\nimport { disposeSubscriptions, listCoreSerialPorts } from '../utils';\nimport { getProjectItemState, updateProjectItemState } from './helpers';\nimport ProjectTasksTreeProvider from './task-tree';\nimport { extension } from '../main';\nimport path from 'path';\nimport vscode from 'vscode';\n\nexport default class ProjectTaskManager {\n  static PROVIDER_TYPE = 'PlatformIO';\n  static TASKS_VIEW_ID = 'platformio-ide.projectTasks';\n  static AUTO_REFRESH_DELAY = 500; // 0.5 sec\n\n  constructor(projectDir, projectObserver) {\n    this.projectDir = projectDir;\n    this.projectObserver = projectObserver;\n    this.subscriptions = [];\n\n    this._sid = Math.random();\n    this._refreshTimeout = undefined;\n    this._startedTask = undefined;\n    this._tasksToRestore = [];\n    this._sbPortSwitcher = undefined;\n    this._customPort = getProjectItemState(projectDir, 'customPort');\n\n    this.refresh();\n  }\n\n  dispose() {\n    disposeSubscriptions(this.subscriptions);\n  }\n\n  requestRefresh() {\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n    }\n    this._refreshTimeout = setTimeout(\n      this.refresh.bind(this),\n      ProjectTaskManager.AUTO_REFRESH_DELAY\n    );\n  }\n\n  async refresh({ force = false } = {}) {\n    this.dispose();\n\n    if (force) {\n      this.projectObserver.resetCache();\n      this._sid = Math.random();\n    }\n\n    const projectEnvs = (await this.projectObserver.getConfig()).envs();\n    const projectTasks = [...(await this.projectObserver.getDefaultTasks())];\n    for (const env of projectEnvs) {\n      projectTasks.push(...((await this.projectObserver.getLoadedEnvTasks(env)) || []));\n    }\n\n    const taskViewer = vscode.window.createTreeView(ProjectTaskManager.TASKS_VIEW_ID, {\n      treeDataProvider: new ProjectTasksTreeProvider(\n        this._sid,\n        projectEnvs,\n        projectTasks,\n        this.projectObserver.getSelectedEnv()\n      ),\n      showCollapseAll: true,\n    });\n\n    this.subscriptions.push(\n      taskViewer,\n\n      // pre-fetch expanded env tasks\n      taskViewer.onDidExpandElement(async ({ element }) => {\n        if (element.env) {\n          await this.onDidRequestEnvTasks(element.env);\n        }\n      }),\n\n      // register VSCode Task Provider\n      vscode.tasks.registerTaskProvider(ProjectTaskManager.PROVIDER_TYPE, {\n        provideTasks: () => projectTasks.map((task) => this.toVSCodeTask(task)),\n        resolveTask: () => {\n          return undefined;\n        },\n      }),\n\n      vscode.tasks.onDidEndTaskProcess((event) => this.onDidEndTaskProcess(event))\n    );\n\n    this.registerTaskBasedCommands(projectTasks);\n    this.registerPortSwitcher();\n    vscode.commands.executeCommand(\n      'setContext',\n      'pioMultiEnvProject',\n      projectEnvs.length > 1\n    );\n  }\n\n  async onDidRequestEnvTasks(name) {\n    if (await this.projectObserver.getLoadedEnvTasks(name)) {\n      return;\n    }\n    await this.projectObserver.loadEnvTasks(name);\n    return this.requestRefresh();\n  }\n\n  toVSCodeTask(projectTask) {\n    const envClone = Object.assign({}, process.env);\n    if (process.env.PLATFORMIO_PATH) {\n      envClone.PATH = process.env.PLATFORMIO_PATH;\n      envClone.Path = process.env.PLATFORMIO_PATH;\n    }\n    const vscodeTask = new vscode.Task(\n      {\n        type: ProjectTaskManager.PROVIDER_TYPE,\n        task: projectTask.id,\n      },\n      vscode.workspace.getWorkspaceFolder(vscode.Uri.file(this.projectDir)),\n      projectTask.id,\n      ProjectTaskManager.PROVIDER_TYPE,\n      new vscode.ProcessExecution(\n        IS_WINDOWS ? 'platformio.exe' : 'platformio',\n        projectTask.getCoreArgs({ port: this._customPort }),\n        {\n          cwd: this.projectDir,\n          env: envClone,\n        }\n      ),\n      '$platformio'\n    );\n    vscodeTask.presentationOptions = {\n      panel: vscode.TaskPanelKind.Dedicated,\n    };\n    if (projectTask.isBuild()) {\n      vscodeTask.group = vscode.TaskGroup.Build;\n    } else if (projectTask.isClean()) {\n      vscodeTask.group = vscode.TaskGroup.Clean;\n    } else if (projectTask.isTest()) {\n      vscodeTask.group = vscode.TaskGroup.Test;\n    }\n    return vscodeTask;\n  }\n\n  runTask(task) {\n    this._autoCloseSerialMonitor(task);\n    // use string-based task defination for Win 7 // issue #3481\n    vscode.commands.executeCommand(\n      'workbench.action.tasks.runTask',\n      `${ProjectTaskManager.PROVIDER_TYPE}: ${task.id}`\n    );\n  }\n\n  async _autoCloseSerialMonitor(startedTask) {\n    this._startedTask = startedTask;\n    this._tasksToRestore = [];\n    const closeMonitorConds = [\n      extension.getConfiguration('autoCloseSerialMonitor'),\n      ['upload', 'test'].some((arg) =>\n        this.getTaskArgs(this._startedTask).includes(arg)\n      ),\n    ];\n    if (!closeMonitorConds.every((value) => value)) {\n      return;\n    }\n\n    // skip \"native\" dev-platform\n    // const platform = (await this.projectObserver.getConfig()).getEnvPlatform(\n    //   await this.projectObserver.revealActiveEnvironment()\n    // );\n    // if (platform === 'native') {\n    //   return;\n    // }\n\n    vscode.tasks.taskExecutions.forEach((event) => {\n      const isCurrentTask = this.areTasksEqual(this._startedTask, event.task);\n      const skipConds = [\n        // skip non-PlatformIO task\n        event.task.definition.type !== ProjectTaskManager.PROVIDER_TYPE,\n        !this.getTaskArgs(event.task).includes('monitor'),\n        this.isMonitorAndUploadTask(event.task) && !isCurrentTask,\n      ];\n      if (skipConds.some((value) => value)) {\n        return;\n      }\n      // do not restart the same tasks\n      if (!isCurrentTask) {\n        this._tasksToRestore.push(event.task);\n      }\n      event.terminate();\n    });\n  }\n\n  onDidEndTaskProcess(event) {\n    const skipConds = [\n      !this._startedTask,\n      !this.areTasksEqual(this._startedTask, event.execution.task),\n      event.exitCode !== 0,\n      !this._tasksToRestore.length,\n    ];\n    if (skipConds.some((value) => value)) {\n      return;\n    }\n    this._startedTask = undefined;\n    setTimeout(() => {\n      while (this._tasksToRestore.length) {\n        vscode.tasks.executeTask(this._tasksToRestore.pop());\n      }\n    }, parseInt(extension.getConfiguration('reopenSerialMonitorDelay')));\n  }\n\n  getTaskArgs(task) {\n    return task.args || task.execution.args;\n  }\n\n  isMonitorAndUploadTask(task) {\n    const args = this.getTaskArgs(task);\n    return ['--target', 'upload', 'monitor'].every((arg) => args.includes(arg));\n  }\n\n  areTasksEqual(task1, task2) {\n    if (!task1 || !task2) {\n      return task1 === task2;\n    }\n    const args1 = this.getTaskArgs(task1);\n    const args2 = this.getTaskArgs(task2);\n    return (\n      args1.length === args2.length &&\n      args1.every((value, index) => value === args2[index])\n    );\n  }\n\n  registerTaskBasedCommands(tasks) {\n    const _runTask = (name) => {\n      const candidates = tasks.filter(\n        (task) =>\n          task.name === name && task.coreEnv === this.projectObserver.getSelectedEnv()\n      );\n      this.runTask(candidates[0]);\n    };\n\n    this.subscriptions.push(\n      vscode.commands.registerCommand('platformio-ide.build', () => _runTask('Build')),\n      vscode.commands.registerCommand('platformio-ide.upload', () =>\n        _runTask('Upload')\n      ),\n      vscode.commands.registerCommand('platformio-ide.uploadAndMonitor', () =>\n        _runTask('Upload and Monitor')\n      ),\n      vscode.commands.registerCommand('platformio-ide.clean', () => _runTask('Clean')),\n      vscode.commands.registerCommand('platformio-ide.test', () => _runTask('Test')),\n      vscode.commands.registerCommand('platformio-ide.serialMonitor', () =>\n        _runTask('Monitor')\n      )\n    );\n  }\n\n  registerPortSwitcher() {\n    this._sbPortSwitcher = vscode.window.createStatusBarItem(\n      'pio-port-switcher',\n      vscode.StatusBarAlignment.Left,\n      STATUS_BAR_PRIORITY_START\n    );\n    this._sbPortSwitcher.name = 'PlatformIO: Port Switcher';\n    this._sbPortSwitcher.tooltip = 'Set upload/monitor/test port';\n    this._sbPortSwitcher.command = 'platformio-ide.setProjectPort';\n    this.switchPort(this._customPort);\n\n    this.subscriptions.push(\n      this._sbPortSwitcher,\n      vscode.commands.registerCommand('platformio-ide.setProjectPort', () =>\n        this.pickProjectPort()\n      )\n    );\n  }\n\n  async pickProjectPort() {\n    const serialPorts = await listCoreSerialPorts();\n    const pickedItem = await vscode.window.showQuickPick(\n      [\n        { label: 'Auto' },\n        ...serialPorts.map((port) => ({\n          label: port.port,\n          description: [port.description, port.hwid]\n            .filter((value) => !!value)\n            .join(' | '),\n        })),\n        { label: 'Custom...' },\n      ],\n      {\n        matchOnDescription: true,\n      }\n    );\n    if (!pickedItem) {\n      return;\n    }\n    if (pickedItem.label === 'Custom...') {\n      const value = await vscode.window.showInputBox({\n        title: 'Enter custom upload/monitor/test port',\n        placeHolder: 'Examples: COM3, /dev/ttyUSB*, 192.168.0.13, /media/disk',\n      });\n      if (!value) {\n        return;\n      }\n      this.switchPort(value.trim());\n    } else {\n      this.switchPort(pickedItem.label !== 'Auto' ? pickedItem.label : undefined);\n    }\n  }\n\n  switchPort(port = undefined) {\n    updateProjectItemState(this.projectDir, 'customPort', port);\n    this._customPort = port;\n    this._sbPortSwitcher.text = `$(plug) ${\n      this._customPort ? path.basename(this._customPort) : 'Auto'\n    }`;\n    this._sbPortSwitcher.show();\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as pioNodeHelpers from 'platformio-node-helpers';\nimport { disposeSubscriptions } from '../utils';\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport vscode from 'vscode';\n\nexport default class ProjectTestManager {\n  constructor(projectDir) {\n    this.projectDir = projectDir;\n    this.controller = vscode.tests.createTestController(\n      'platformio-tests',\n      'PlatformIO Tests'\n    );\n    this.subscriptions = [this.controller];\n\n    this.controller.refreshHandler = this.refreshHandler.bind(this);\n    this.controller.resolveHandler = this.resolveHandler.bind(this);\n    this.controller.createRunProfile(\n      'Run Tests',\n      vscode.TestRunProfileKind.Run,\n      this.runHandler.bind(this),\n      true\n    );\n  }\n\n  dispose() {\n    disposeSubscriptions(this.subscriptions);\n  }\n\n  async runCoreTestCommand(args) {\n    const jsonOutputPath = path.join(\n      pioNodeHelpers.core.getTmpDir(),\n      `test-list-${Math.round(Math.random() * 100000)}.json`\n    );\n    let output = undefined;\n    let error = new Error();\n    try {\n      const envClone = Object.assign({}, process.env);\n      envClone['PLATFORMIO_FORCE_ANSI'] = 'true';\n      output = await pioNodeHelpers.core.getPIOCommandOutput(\n        ['test', ...args, '--json-output-path', jsonOutputPath],\n        {\n          projectDir: this.projectDir,\n          runInQueue: true,\n          spawnOptions: {\n            env: envClone,\n          },\n        }\n      );\n    } catch (err) {\n      error = err;\n    }\n    try {\n      await fs.access(jsonOutputPath);\n    } catch (err) {\n      throw error;\n    }\n\n    const data = await pioNodeHelpers.misc.loadJSON(jsonOutputPath);\n    await fs.unlink(jsonOutputPath); // cleanup\n    return [data, output || error.toString()];\n  }\n\n  async refreshHandler() {\n    this.controller.items.replace([]); // clear\n    await this.resolveTestSuites();\n  }\n\n  async resolveHandler(test) {\n    if (test) {\n      console.warn('Not Implemented');\n      return;\n    }\n    await this.resolveTestSuites();\n  }\n\n  async resolveTestSuites() {\n    try {\n      const [data] = await this.runCoreTestCommand(['--list-tests']);\n      const envToSuites = data.test_suites.reduce(\n        (result, item) =>\n          result.set(item.env_name, [...(result.get(item.env_name) || []), item]),\n        new Map()\n      );\n      envToSuites.forEach((suites, envName) => {\n        const envSuite = this.controller.createTestItem(`env:${envName}`, envName);\n        envSuite.children.replace(\n          suites.map((suite) =>\n            this.controller.createTestItem(\n              `suite:${envName}/${suite.test_name}`,\n              suite.test_name,\n              suite.test_dir ? vscode.Uri.file(suite.test_dir) : undefined\n            )\n          )\n        );\n        this.controller.items.add(envSuite);\n      });\n    } catch (err) {\n      console.error(err);\n      const item = this.controller.createTestItem(\n        'error',\n        'Error (expand for details)'\n      );\n      item.error = err.toString();\n      this.controller.items.add(item);\n    }\n  }\n\n  extractTestSuites(test) {\n    if (test.id.startsWith('suite:')) {\n      return [test];\n    } else if (test.id.startsWith('case:')) {\n      return [test.parent];\n    } else if (test.id.startsWith('env:')) {\n      return test.children;\n    }\n    return [];\n  }\n\n  async runHandler(request, token) {\n    const run = this.controller.createTestRun(request);\n    const queue = [];\n    const exclude = [];\n\n    if (request.include) {\n      request.include.forEach((test) =>\n        this.extractTestSuites(test).forEach((suite) =>\n          queue.includes(suite) ? undefined : queue.push(suite)\n        )\n      );\n    } else {\n      this.controller.items.forEach((item) =>\n        item.children.forEach((suite) => queue.push(suite))\n      );\n    }\n    if (request.exclude) {\n      request.exclude.forEach((test) =>\n        this.extractTestSuites(test).forEach((suite) => exclude.push(suite))\n      );\n    }\n\n    while (queue.length > 0 && !token.isCancellationRequested) {\n      const suite = queue.pop();\n      if (exclude.includes(suite)) {\n        run.skipped(suite);\n        continue;\n      }\n      await this._runTestSuite(run, suite);\n    }\n    run.end();\n  }\n\n  async _runTestSuite(run, suite) {\n    const envName = suite.parent.label;\n    const testName = suite.label;\n    const startedAt = Date.now();\n    run.started(suite);\n    try {\n      const [data, output] = await this.runCoreTestCommand([\n        '--environment',\n        envName,\n        '--filter',\n        testName,\n      ]);\n      process.chdir(data.project_dir);\n      const result = data.test_suites.find(\n        (item) => item.env_name === envName && item.test_name === testName\n      );\n\n      switch (result.status) {\n        case 'SKIPPED':\n          run.skipped(suite);\n          break;\n\n        case 'ERRORED':\n          run.failed(\n            suite,\n            new vscode.TestMessage(result.test_cases[0].exception),\n            Date.now() - startedAt\n          );\n          break;\n\n        default:\n          this._processTestSuiteResult(run, suite, result, startedAt);\n          break;\n      }\n\n      run.appendOutput(output, undefined, suite);\n    } catch (err) {\n      run.appendOutput(err.toString(), undefined, suite);\n      run.failed(suite, new vscode.TestMessage(err.toString()), Date.now() - startedAt);\n    }\n  }\n\n  async _processTestSuiteResult(run, suite, result, startedAt) {\n    const envName = suite.parent.label;\n    const testName = suite.label;\n    suite.children.replace([]);\n    result.test_cases.forEach((testCase) => {\n      const test = this.controller.createTestItem(\n        `case:${envName}/${testName}/${testCase.name}`,\n        testCase.name,\n        testCase.source\n          ? vscode.Uri.file(path.resolve(testCase.source.file))\n          : undefined\n      );\n      if (testCase.source && testCase.source.line) {\n        test.range = new vscode.Range(\n          testCase.source.line - 1,\n          0,\n          testCase.source.line - 1,\n          0\n        );\n      }\n      suite.children.add(test);\n\n      switch (testCase.status) {\n        case 'SKIPPED':\n          run.skipped(test);\n          break;\n        case 'ERRORED':\n          run.failed(\n            test,\n            new vscode.TestMessage(testCase.exception),\n            Date.now() - startedAt\n          );\n          break;\n        case 'FAILED':\n          run.failed(\n            test,\n            new vscode.TestMessage(testCase.message),\n            Date.now() - startedAt\n          );\n          break;\n        default:\n          run.passed(test, Date.now() - startedAt);\n          break;\n      }\n\n      if (testCase.stdout) {\n        run.appendOutput(\n          testCase.stdout,\n          test.uri ? new vscode.Location(test.uri, test.range) : undefined,\n          test\n        );\n      }\n    });\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as pioNodeHelpers from 'platformio-node-helpers';\nimport * as projectHelpers from './helpers';\n\nimport { disposeSubscriptions, notifyError } from '../utils';\nimport { ProjectConfigLanguageProvider } from './config';\nimport ProjectTaskManager from './tasks';\nimport ProjectTestManager from './tests';\nimport { STATUS_BAR_PRIORITY_START } from '../constants';\nimport { extension } from '../main';\nimport path from 'path';\nimport vscode from 'vscode';\n\nexport default class ProjectManager {\n  constructor() {\n    this._taskManager = undefined;\n    this._sbEnvSwitcher = undefined;\n    this._logOutputChannel = vscode.window.createOutputChannel(\n      'PlatformIO: Project Configuration'\n    );\n\n    this._pool = new pioNodeHelpers.project.ProjectPool({\n      ide: 'vscode',\n      api: {\n        logOutputChannel: this._logOutputChannel,\n        createFileSystemWatcher: vscode.workspace.createFileSystemWatcher,\n        createDirSystemWatcher: (dir) =>\n          vscode.workspace.createFileSystemWatcher(path.join(dir, '*')),\n        withIndexRebuildingProgress: (task) =>\n          vscode.window.withProgress(\n            {\n              location: { viewId: vscode.ProgressLocation.Notification },\n              title: 'PlatformIO: Configuring project',\n              cancellable: true,\n            },\n            async (progress, token) =>\n              await task(\n                (message, increment = undefined) =>\n                  progress.report({\n                    message,\n                    increment: increment,\n                  }),\n                token\n              )\n          ),\n        withTasksLoadingProgress: (task) =>\n          vscode.window.withProgress(\n            {\n              location: { viewId: ProjectTaskManager.TASKS_VIEW_ID },\n            },\n            async () =>\n              await vscode.window.withProgress(\n                {\n                  location: { viewId: vscode.ProgressLocation.Window },\n                  title: 'PlatformIO: Loading tasks...',\n                },\n                task\n              )\n          ),\n        onDidChangeProjectConfig: (projectDir) => {\n          if (this._taskManager && this._taskManager.projectDir === projectDir) {\n            this._taskManager.requestRefresh();\n          }\n          this.saveActiveProjectState();\n        },\n        onDidNotifyError: notifyError.bind(this),\n      },\n      settings: {\n        autoPreloadEnvTasks: extension.getConfiguration('autoPreloadEnvTasks'),\n        autoRebuild: extension.getConfiguration('autoRebuildAutocompleteIndex'),\n      },\n    });\n\n    this.subscriptions = [\n      this._pool,\n      this._logOutputChannel,\n      vscode.window.onDidChangeActiveTextEditor(() => {\n        if (!extension.getConfiguration('activateProjectOnTextEditorChange')) {\n          return;\n        }\n        const projectDir = projectHelpers.getActiveEditorProjectDir();\n        if (projectDir) {\n          this.switchToProject(projectDir);\n        }\n      }),\n      vscode.workspace.onDidChangeWorkspaceFolders(() =>\n        this.switchToProject(this.findActiveProjectDir())\n      ),\n      vscode.commands.registerCommand('platformio-ide.rebuildProjectIndex', () =>\n        this._pool.getActiveObserver().rebuildIndex({ force: true })\n      ),\n      vscode.commands.registerCommand('platformio-ide.refreshProjectTasks', () =>\n        this._taskManager.refresh({ force: true })\n      ),\n      vscode.commands.registerCommand('platformio-ide._runProjectTask', (task) =>\n        this._taskManager.runTask(task)\n      ),\n      vscode.commands.registerCommand(\n        'platformio-ide.activeEnvironment',\n        async () => await this._pool.getActiveObserver().revealActiveEnvironment()\n      ),\n    ];\n    this.internalSubscriptions = [];\n\n    this.registerEnvSwitcher();\n    // switch to the first project in a workspace on start-up\n    this.switchToProject(this.findActiveProjectDir());\n  }\n\n  dispose() {\n    this.disposeInternals();\n    disposeSubscriptions(this.internalSubscriptions);\n    disposeSubscriptions(this.subscriptions);\n  }\n\n  findActiveProjectDir() {\n    let projectDir = undefined;\n    if (extension.getConfiguration('activateProjectOnTextEditorChange')) {\n      projectDir = projectHelpers.getActiveEditorProjectDir();\n    }\n    return projectDir || this.getSelectedProjectDir();\n  }\n\n  getSelectedProjectDir() {\n    const pioProjectDirs = projectHelpers.getPIOProjectDirs();\n    const currentActiveDir = this._pool.getActiveProjectDir();\n    if (pioProjectDirs.length < 1) {\n      return undefined;\n    }\n    if (\n      currentActiveDir &&\n      pioProjectDirs.find((projectDir) => projectDir === currentActiveDir)\n    ) {\n      return currentActiveDir;\n    }\n    const lastActiveDir = projectHelpers.getLastProjectDir();\n    if (\n      lastActiveDir &&\n      pioProjectDirs.find((projectDir) => projectDir === lastActiveDir)\n    ) {\n      return lastActiveDir;\n    }\n    return pioProjectDirs[0];\n  }\n\n  saveActiveProjectState() {\n    const observer = this._pool.getActiveObserver();\n    if (!observer) {\n      return;\n    }\n    projectHelpers.updateProjectItemState(\n      observer.projectDir,\n      'selectedEnv',\n      observer.getSelectedEnv()\n    );\n  }\n\n  async switchToProject(projectDir, options = {}) {\n    if (!projectDir) {\n      console.error('switchProject => Please provide project folder');\n      return;\n    }\n    this._sbEnvSwitcher.text = '$(root-folder) Loading...';\n\n    let currentProjectDir = undefined;\n    let currentEnv = undefined;\n    if (this._pool.getActiveObserver()) {\n      currentProjectDir = this._pool.getActiveObserver().projectDir;\n      currentEnv = this._pool.getActiveObserver().getSelectedEnv();\n    }\n    const observer = this._pool.getObserver(projectDir);\n    if ('env' in options) {\n      await observer.switchProjectEnv(options.env);\n    } else if (!observer.getSelectedEnv()) {\n      await observer.switchProjectEnv(\n        projectHelpers.getProjectItemState(projectDir, 'selectedEnv')\n      );\n    }\n\n    // ignore active project and & env\n    if (\n      !currentProjectDir ||\n      currentProjectDir !== projectDir ||\n      currentEnv !== observer.getSelectedEnv()\n    ) {\n      disposeSubscriptions(this.internalSubscriptions);\n      await this._pool.switch(projectDir);\n      this._taskManager = new ProjectTaskManager(projectDir, observer);\n      this.internalSubscriptions.push(\n        this._taskManager,\n        new ProjectConfigLanguageProvider(projectDir),\n        new ProjectTestManager(projectDir)\n      );\n\n      // open \"platformio.ini\" if no visible editors\n      if (\n        vscode.window.visibleTextEditors.length === 0 &&\n        extension.getConfiguration('autoOpenPlatformIOIniFile')\n      ) {\n        vscode.window.showTextDocument(\n          vscode.Uri.file(path.join(projectDir, 'platformio.ini'))\n        );\n      }\n    }\n\n    this.showSelectedEnv();\n    this.saveActiveProjectState();\n  }\n\n  registerEnvSwitcher() {\n    this._sbEnvSwitcher = vscode.window.createStatusBarItem(\n      'pio-env-switcher',\n      vscode.StatusBarAlignment.Left,\n      STATUS_BAR_PRIORITY_START\n    );\n    this._sbEnvSwitcher.name = 'PlatformIO: Project Environment Switcher';\n    this._sbEnvSwitcher.tooltip = 'Switch PlatformIO Project Environment';\n    this._sbEnvSwitcher.command = 'platformio-ide.pickProjectEnv';\n    this._sbEnvSwitcher.text = '$(root-folder) Loading...';\n    this._sbEnvSwitcher.show();\n\n    this.subscriptions.push(\n      this._sbEnvSwitcher,\n      vscode.commands.registerCommand('platformio-ide.pickProjectEnv', () =>\n        this.pickProjectEnv()\n      )\n    );\n  }\n\n  showSelectedEnv() {\n    const observer = this._pool.getActiveObserver();\n    if (!observer) {\n      return;\n    }\n    const env = observer.getSelectedEnv()\n      ? `env:${observer.getSelectedEnv()}`\n      : 'Default';\n    this._sbEnvSwitcher.text = `$(root-folder) ${env} (${path.basename(\n      observer.projectDir\n    )})`;\n  }\n\n  async pickProjectEnv() {\n    const items = [];\n    for (const projectDir of projectHelpers.getPIOProjectDirs()) {\n      const observer = this._pool.getObserver(projectDir);\n      const envs = (await observer.getConfig()).envs();\n      if (!envs || !envs.length) {\n        continue;\n      }\n      const shortProjectDir = `${path.basename(\n        path.dirname(projectDir)\n      )}/${path.basename(projectDir)}`;\n      items.push({\n        projectDir,\n        label: 'Default',\n        description: `$(folder) ${shortProjectDir} (\"default_envs\" from \"platformio.ini\")`,\n      });\n      items.push(\n        ...envs.map((env) => ({\n          projectDir,\n          env,\n          label: `env:${env}`,\n          description: `$(folder) ${shortProjectDir}`,\n        }))\n      );\n    }\n    const pickedItem = await vscode.window.showQuickPick(items, {\n      matchOnDescription: true,\n    });\n    if (!pickedItem) {\n      return;\n    }\n    this.switchToProject(pickedItem.projectDir, { env: pickedItem.env });\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as vscode from 'vscode';\n\nclass QuickItem extends vscode.TreeItem {\n  constructor(label, command, args, collapsibleState, children) {\n    super(label, collapsibleState);\n    if (command) {\n      this.command = {\n        title: label,\n        command,\n        arguments: args,\n      };\n    }\n    this.customChildren = children;\n  }\n}\n\nexport default class QuickAccessTreeProvider {\n  getChildren(element) {\n    if (element && element.customChildren) {\n      return element.customChildren;\n    }\n    return [\n      new QuickItem(\n        'PIO Home',\n        undefined,\n        undefined,\n        vscode.TreeItemCollapsibleState.Expanded,\n        [\n          new QuickItem('Open', 'platformio-ide.showHome'),\n          new QuickItem('PIO Account', 'platformio-ide.showHome', ['/account']),\n          new QuickItem('Inspect', 'platformio-ide.showHome', ['/inspect']),\n          new QuickItem('Projects & Configuration', 'platformio-ide.showHome', [\n            '/projects',\n          ]),\n          new QuickItem('Libraries', 'platformio-ide.showHome', ['/libraries']),\n          new QuickItem('Boards', 'platformio-ide.showHome', ['/boards']),\n          new QuickItem('Platforms', 'platformio-ide.showHome', ['/platforms']),\n          new QuickItem('Devices', 'platformio-ide.showHome', ['/device']),\n        ]\n      ),\n      new QuickItem(\n        'Debug',\n        undefined,\n        undefined,\n        vscode.TreeItemCollapsibleState.Expanded,\n        [\n          new QuickItem('Start Debugging', 'platformio-ide.startDebugging'),\n          new QuickItem('Toggle Debug Console', 'workbench.debug.action.toggleRepl'),\n        ]\n      ),\n      new QuickItem(\n        'Miscellaneous',\n        undefined,\n        undefined,\n        vscode.TreeItemCollapsibleState.Expanded,\n        [\n          new QuickItem('PlatformIO Core CLI', 'platformio-ide.openPIOCoreCLI'),\n          new QuickItem('Clone Git Project', 'git.clone'),\n          new QuickItem('New Terminal', 'platformio-ide.newTerminal'),\n          new QuickItem('Upgrade PlatformIO Core', 'platformio-ide.upgradeCore'),\n          new QuickItem('Show Release Notes', 'platformio-ide.showReleaseNotes'),\n        ]\n      ),\n    ];\n  }\n\n  getTreeItem(element) {\n    return element;\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as misc from './misc';\nimport * as pioNodeHelpers from 'platformio-node-helpers';\nimport * as piodebug from 'platformio-vscode-debug';\nimport * as utils from './utils';\n\nimport InstallationManager from './installer/manager';\nimport PIOHome from './home';\nimport PIOReleaseNotes from './release-notes';\nimport PIOTerminal from './terminal';\nimport PIOToolbar from './toolbar';\nimport ProjectManager from './project/manager';\nimport QuickAccessTreeProvider from './views/quick-access-tree';\nimport fs from 'fs-plus';\nimport { getPIOProjectDirs } from './project/helpers';\nimport vscode from 'vscode';\n\nclass PlatformIOVSCodeExtension {\n  constructor() {\n    this.context = undefined;\n    this.pioTerm = undefined;\n    this.pioHome = undefined;\n    this.ProjectManager = undefined;\n    this.subscriptions = [];\n\n    this._enterpriseSettings = undefined;\n  }\n\n  async activate(context) {\n    this.context = context;\n    this.pioHome = new PIOHome();\n    this.pioTerm = new PIOTerminal();\n    this.subscriptions.push(this.pioHome, this.pioTerm, new PIOReleaseNotes());\n    const hasPIOProject = getPIOProjectDirs().length > 0;\n\n    // dump global state\n    console.info(\n      'PlatformIO IDE Global State',\n      context.globalState.keys().reduce((state, key) => {\n        state[key] = context.globalState.get(key);\n        return state;\n      }, {})\n    );\n\n    // temporary workaround for https://github.com/Microsoft/vscode/issues/58348\n    if (\n      !vscode.workspace\n        .getConfiguration('extensions')\n        .has('showRecommendationsOnlyOnDemand')\n    ) {\n      vscode.workspace\n        .getConfiguration('extensions')\n        .update('showRecommendationsOnlyOnDemand', true);\n    }\n\n    this.patchOSEnviron();\n    await this.startInstaller(!hasPIOProject);\n    this.subscriptions.push(this.handleUseDevelopmentPIOCoreConfiguration());\n\n    vscode.commands.executeCommand('setContext', 'pioCoreReady', true);\n    if (typeof this.getEnterpriseSetting('onPIOCoreReady') === 'function') {\n      await this.getEnterpriseSetting('onPIOCoreReady')();\n    }\n\n    this.subscriptions.push(\n      vscode.window.registerTreeDataProvider(\n        'platformio-ide.quickAccess',\n        new QuickAccessTreeProvider()\n      )\n    );\n\n    this.registerGlobalCommands();\n\n    if (!hasPIOProject) {\n      this.subscriptions.push(\n        new PIOToolbar({ filterCommands: ['platformio-ide.showHome'] })\n      );\n      return;\n    }\n\n    vscode.commands.executeCommand('setContext', 'pioProjectReady', true);\n    this.subscriptions.push(\n      new PIOToolbar({\n        ignoreCommands: this.getEnterpriseSetting('ignoreToolbarCommands'),\n      })\n    );\n\n    this.initDebug();\n    this.ProjectManager = new ProjectManager();\n    this.subscriptions.push(this.ProjectManager);\n\n    this.startPIOHome();\n\n    misc.maybeRateExtension();\n    misc.warnAboutConflictedExtensions();\n    this.subscriptions.push(\n      vscode.window.onDidChangeActiveTextEditor((editor) =>\n        misc.warnAboutInoFile(editor)\n      )\n    );\n  }\n\n  getConfiguration(id) {\n    return vscode.workspace.getConfiguration('platformio-ide').get(id);\n  }\n\n  loadEnterpriseSettings() {\n    const ext = vscode.extensions.all.find(\n      (item) =>\n        item.id.startsWith('platformio.') &&\n        item.id !== 'platformio.platformio-ide' &&\n        item.isActive\n    );\n    return ext && ext.exports ? ext.exports.settings : undefined;\n  }\n\n  getEnterpriseSetting(id, defaultValue = undefined) {\n    if (!this._enterpriseSettings) {\n      this._enterpriseSettings = this.loadEnterpriseSettings();\n    }\n    if (this._enterpriseSettings && id in this._enterpriseSettings) {\n      return this._enterpriseSettings[id];\n    }\n    return defaultValue;\n  }\n\n  patchOSEnviron() {\n    const extraVars = {\n      PLATFORMIO_IDE: utils.getIDEVersion(),\n    };\n    // handle HTTP proxy settings\n    const http_proxy = vscode.workspace.getConfiguration('http').get('proxy');\n    if (http_proxy && !process.env.HTTP_PROXY && !process.env.http_proxy) {\n      extraVars['HTTP_PROXY'] = http_proxy;\n    }\n    if (http_proxy && !process.env.HTTPS_PROXY && !process.env.https_proxy) {\n      extraVars['HTTPS_PROXY'] = http_proxy;\n    }\n    if (!vscode.workspace.getConfiguration('http').get('proxyStrictSSL')) {\n      extraVars['PLATFORMIO_SETTING_ENABLE_PROXY_STRICT_SSL'] = 'false';\n    }\n    if (this.getConfiguration('customPyPiIndexUrl')) {\n      extraVars['PIP_INDEX_URL'] = this.getConfiguration('customPyPiIndexUrl');\n    }\n    pioNodeHelpers.proc.patchOSEnviron({\n      caller: 'vscode',\n      extraPath: this.getConfiguration('customPATH'),\n      extraVars,\n    });\n  }\n\n  async startInstaller(disableAutoUpdates) {\n    const im = new InstallationManager(disableAutoUpdates);\n    if (im.locked()) {\n      vscode.window.showInformationMessage(\n        'PlatformIO IDE installation has been suspended, because PlatformIO ' +\n          'IDE Installer is already started in another window.'\n      );\n      return;\n    }\n    const doInstall = await vscode.window.withProgress(\n      {\n        location: vscode.ProgressLocation.Window,\n        title: 'PlatformIO',\n      },\n      async (progress) => {\n        progress.report({\n          message: 'Initializing PlatformIO Core...',\n        });\n        try {\n          return !(await im.check());\n        } catch (err) {}\n        return true;\n      }\n    );\n\n    if (!doInstall) {\n      return;\n    }\n\n    return await vscode.window.withProgress(\n      {\n        location: vscode.ProgressLocation.Notification,\n        title: 'PlatformIO Installer',\n      },\n      async (progress) => {\n        progress.report({\n          message: 'Installing PlatformIO IDE...',\n        });\n        const outputChannel = vscode.window.createOutputChannel(\n          'PlatformIO Installation'\n        );\n        outputChannel.show();\n        outputChannel.appendLine('Installing PlatformIO IDE...');\n        outputChannel.appendLine(\n          'It may take a few minutes depending on your connection speed'\n        );\n        outputChannel.appendLine(\n          'Please do not close this window and do not ' +\n            'open other folders until this process is completed.'\n        );\n        outputChannel.appendLine(\n          '\\nDebugging information is available via VSCode > Help > Toggle Developer Tools > Console.'\n        );\n\n        try {\n          im.lock();\n          await im.install(progress);\n          outputChannel.appendLine('PlatformIO IDE installed successfully.\\n');\n          outputChannel.appendLine('Please restart VSCode.');\n          const action = 'Reload Now';\n          const selected = await vscode.window.showInformationMessage(\n            'PlatformIO IDE has been successfully installed! Please reload window',\n            action\n          );\n          if (selected === action) {\n            vscode.commands.executeCommand('workbench.action.reloadWindow');\n          }\n        } catch (err) {\n          outputChannel.appendLine('Failed to install PlatformIO IDE.');\n          utils.notifyError('Installation Manager', err);\n        } finally {\n          im.unlock();\n        }\n\n        im.destroy();\n        return true;\n      }\n    );\n  }\n\n  async startPIOHome() {\n    if (\n      this.getConfiguration('disablePIOHomeStartup') ||\n      !pioNodeHelpers.home.showAtStartup('vscode')\n    ) {\n      return;\n    }\n    vscode.commands.executeCommand('platformio-ide.showHome');\n  }\n\n  registerGlobalCommands() {\n    this.subscriptions.push(\n      vscode.commands.registerCommand('platformio-ide.showHome', (startUrl) =>\n        this.pioHome.toggle(startUrl)\n      ),\n      vscode.commands.registerCommand('platformio-ide.newTerminal', () =>\n        this.pioTerm.new().show()\n      ),\n      vscode.commands.registerCommand('platformio-ide.openPIOCoreCLI', () =>\n        this.pioTerm.sendText('pio --help')\n      ),\n      vscode.commands.registerCommand('platformio-ide.runPIOCoreCommand', (cmd) =>\n        this.pioTerm.sendText(cmd)\n      ),\n      vscode.commands.registerCommand('platformio-ide.startDebugging', () => {\n        vscode.commands.executeCommand('workbench.view.debug');\n        vscode.commands.executeCommand('workbench.debug.action.toggleRepl');\n        vscode.commands.executeCommand('workbench.action.debug.start');\n      }),\n      vscode.commands.registerCommand('platformio-ide.upgradeCore', () =>\n        this.pioTerm.sendText('pio upgrade')\n      )\n    );\n  }\n\n  initDebug() {\n    piodebug.activate(this.context);\n  }\n\n  handleUseDevelopmentPIOCoreConfiguration() {\n    return vscode.workspace.onDidChangeConfiguration(async (e) => {\n      if (\n        !e.affectsConfiguration('platformio-ide.useDevelopmentPIOCore') ||\n        !this.getConfiguration('useBuiltinPIOCore')\n      ) {\n        return;\n      }\n      const envDir = pioNodeHelpers.core.getEnvDir();\n      if (!envDir || !fs.isDirectorySync(envDir)) {\n        return;\n      }\n      await PIOHome.shutdownAllServers();\n      await pioNodeHelpers.misc.sleep(2000);\n      try {\n        fs.removeSync(envDir);\n      } catch (err) {\n        console.warn(err);\n      }\n      vscode.window.showInformationMessage(\n        'Please restart VSCode to apply the changes.'\n      );\n    });\n  }\n\n  disposeLocalSubscriptions() {\n    vscode.commands.executeCommand('setContext', 'pioCoreReady', false);\n    vscode.commands.executeCommand('setContext', 'pioProjectReady', false);\n    utils.disposeSubscriptions(this.subscriptions);\n  }\n\n  deactivate() {\n    this.disposeLocalSubscriptions();\n  }\n}\n\nexport const extension = new PlatformIOVSCodeExtension();\n\nexport function activate(context) {\n  extension.activate(context);\n  return extension;\n}\n\nexport function deactivate() {\n  extension.deactivate();\n  piodebug.deactivate();\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport { CONFLICTED_EXTENSION_IDS } from './constants';\nimport { extension } from './main';\nimport vscode from 'vscode';\n\nexport async function maybeRateExtension() {\n  const stateKey = 'rate-extension';\n  const askAfterSessionNums = 13;\n  let state = extension.context.globalState.get(stateKey);\n  if (state && state.done) {\n    return;\n  } else if (!state || !state.callCounter) {\n    state = {\n      callCounter: 0,\n      done: false,\n    };\n  }\n\n  state.callCounter += 1;\n  if (state.callCounter < askAfterSessionNums) {\n    extension.context.globalState.update(stateKey, state);\n    return;\n  }\n\n  const selectedItem = await vscode.window.showInformationMessage(\n    'If you enjoy using PlatformIO IDE for VSCode, would you mind taking a moment to rate it? ' +\n      'It will not take more than one minute. Thanks for your support!',\n    { title: 'Rate PlatformIO IDE Extension', isCloseAffordance: false },\n    { title: 'Remind later', isCloseAffordance: false },\n    { title: 'No, Thanks', isCloseAffordance: true }\n  );\n\n  switch (selectedItem ? selectedItem.title : undefined) {\n    case 'Rate PlatformIO IDE Extension':\n      vscode.commands.executeCommand(\n        'vscode.open',\n        vscode.Uri.parse('http://bit.ly/pio-vscode-rate')\n      );\n      state.done = true;\n      break;\n    case 'No, Thanks':\n      state.done = true;\n      break;\n    default:\n      state.callCounter = 0;\n  }\n  extension.context.globalState.update(stateKey, state);\n}\n\nexport async function warnAboutConflictedExtensions() {\n  const conflicted = vscode.extensions.all.filter(\n    (ext) => ext.isActive && CONFLICTED_EXTENSION_IDS.includes(ext.id)\n  );\n  if (conflicted.length === 0) {\n    return;\n  }\n  const selectedItem = await vscode.window.showWarningMessage(\n    `Conflicted extensions with IntelliSense service were detected (${conflicted\n      .map((ext) => ext.packageJSON.displayName || ext.id)\n      .join(', ')}). ` +\n      'Code-completion, linting and navigation will not work properly. ' +\n      'Please disable or uninstall them (Menu > View > Extensions).',\n    { title: 'More details', isCloseAffordance: false },\n    { title: 'Uninstall conflicted', isCloseAffordance: false },\n    { title: 'Remind later', isCloseAffordance: true }\n  );\n  switch (selectedItem ? selectedItem.title : undefined) {\n    case 'More details':\n      vscode.commands.executeCommand(\n        'vscode.open',\n        vscode.Uri.parse('http://bit.ly/pio-vscode-conflicted-extensions')\n      );\n      break;\n    case 'Uninstall conflicted':\n      conflicted.forEach((ext) => {\n        vscode.commands.executeCommand(\n          'workbench.extensions.uninstallExtension',\n          ext.id\n        );\n      });\n      vscode.commands.executeCommand('workbench.action.reloadWindow');\n      break;\n  }\n}\n\nexport async function warnAboutInoFile(editor) {\n  if (!editor || !editor.document || !editor.document.fileName) {\n    return;\n  }\n  if (!editor.document.fileName.endsWith('.ino')) {\n    return;\n  }\n  const stateKey = 'ino-warn-disabled';\n  if (extension.context.globalState.get(stateKey)) {\n    return;\n  }\n\n  const selectedItem = await vscode.window.showWarningMessage(\n    'C/C++ IntelliSense service does not support .INO files. ' +\n      'It might lead to the spurious problems with code completion, linting, and debugging. ' +\n      'Please convert .INO sketch into the valid .CPP file.',\n    { title: 'Show instruction', isCloseAffordance: false },\n    { title: 'Do not show again', isCloseAffordance: false },\n    { title: 'Remind later', isCloseAffordance: true }\n  );\n  switch (selectedItem ? selectedItem.title : undefined) {\n    case 'Show instruction':\n      vscode.commands.executeCommand(\n        'vscode.open',\n        vscode.Uri.parse('https://bit.ly/convert-ino-to-cpp')\n      );\n      break;\n    case 'Do not show again':\n      extension.context.globalState.update(stateKey, 1);\n      break;\n  }\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","IS_WINDOWS","process","platform","startsWith","IS_OSX","CONFLICTED_EXTENSION_IDS","require","disposeSubscriptions","subscriptions","length","pop","dispose","async","notifyError","title","err","description","stack","toString","ghbody","vscode","getIDEVersion","os","reportUrl","pioNodeHelpers","action","includes","substring","console","error","packageJSON","version","listCoreSerialPorts","output","JSON","parse","trim","map","item","undefined","isPIOProjectSync","projectDir","fs","path","getPIOProjectDirs","folder","uri","fsPath","filter","getActiveEditorProjectDir","editor","resource","document","scheme","getProjectItemState","extension","context","globalState","updateProjectItemState","projects","keys","update","PIOHome","constructor","this","_currentPanel","_lastStartUrl","defaultStartUrl","push","disposePanel","bind","static","onPanelDisposed","startUrl","column","webview","html","getWebviewContent","reveal","warn","newPanel","panel","getEnterpriseSetting","enableScripts","retainContextWhenHidden","onDidDispose","iconPath","extensionPath","getLoadingContent","getTheme","colorTheme","toLowerCase","port","getConfiguration","host","onIDECommand","theme","iframeId","start","workspace","command","params","onOpenProjectCommand","onOpenTextDocumentCommand","onGetPIOProjectDirs","ProjectManager","switchToProject","gotoPosition","line","selection","revealRange","PythonPrompt","_defineProperty","selectedItem","isCloseAffordance","pythonExecutable","result","status","STATUS_TRY_AGAIN","prompt","placeHolder","validateInput","STATUS_CUSTOMEXE","STATUS_ABORT","InstallationManager","disableAutoUpdates","config","stages","getValue","setValue","onDidStatusChange","pioCoreVersionSpec","useBuiltinPython","useBuiltinPIOCore","useDevelopmentPIOCore","pythonPrompt","predownloadedPackageDir","locked","lock","LOCK_KEY","Date","getTime","unlock","lockTime","parseInt","LOCK_TIMEOUT","stage","check","progress","stageIncrementTotal","shutdownAllServers","install","message","increment","report","destroy","PIOReleaseNotes","toggle","stateKey","logoSrc","asWebviewUri","releaseNotes","readReleaseNotes","changelogPath","contents","encoding","startsAt","indexOf","PIOTerminal","_instance","new","envClone","assign","env","PLATFORMIO_PATH","PATH","Path","name","sendText","text","exitStatus","show","ToolbarButton","tooltip","commands","ToolbarButtonCommands","from","createStatusBarItem","options","priority","PIOToolbar","RUN_BUTTON_COMMANDS_ID","arguments","id","args","rawCommands","Array","isArray","filterCommands","ignoreCommands","refresh","buttons","getButtons","button","some","cmd","forEach","index","sbItem","e","affectsConfiguration","onButtonClick","i","_expandArgVariables","arg","matches","match","replace","ProjectConfigLanguageProvider","DOCUMENT_SELECTOR","provideHover","position","provideCompletionItems","token","_options","_ports","renderOptionDocs","option","attrs","group","type","multiple","sysenvvar","choices","join","min","max","default","docs","appendCodeblock","appendMarkdown","scope","getScopeAt","getText","split","reverse","SCOPE_PLATFORMIO","SCOPE_ENV","lineNum","lineAt","optionName","getOptions","find","isOptionValueLocation","sepPos","character","word","getWordRangeAtPosition","providePackageHover","rawValue","exec","getOptionAt","pkgOwner","pkgName","pkgUrlParts","encodeURIComponent","qs","URLSearchParams","set","isInline","isCancellationRequested","provideCompletionValues","provideCompletionOptions","documentation","provideCompletionPorts","provideCompletionBaudrates","provideTypedCompletionValues","values","defaultValue","preselect","createCustomCompletionValueItem","insertText","sortText","setTimeout","items","detail","hwid","String","fromCharCode","language","ProjectTasksTreeProvider","envs","tasks","selectedEnv","multiEnvProject","getTreeItem","taskToTreeItem","task","treeItem","coreEnv","multienv","label","getChildren","element","getEnvGroupChildren","getEnvChildren","getRootChildren","DEFAULT_ENV_NAME","envTasks","getTaskGroups","candidates","ProjectTaskManager","projectObserver","_sid","Math","random","_refreshTimeout","_startedTask","_tasksToRestore","_sbPortSwitcher","_customPort","requestRefresh","clearTimeout","AUTO_REFRESH_DELAY","force","resetCache","projectEnvs","getConfig","projectTasks","getDefaultTasks","getLoadedEnvTasks","taskViewer","TASKS_VIEW_ID","treeDataProvider","getSelectedEnv","showCollapseAll","onDidExpandElement","onDidRequestEnvTasks","PROVIDER_TYPE","provideTasks","toVSCodeTask","resolveTask","event","onDidEndTaskProcess","registerTaskBasedCommands","registerPortSwitcher","loadEnvTasks","projectTask","vscodeTask","getCoreArgs","cwd","presentationOptions","isBuild","isClean","isTest","runTask","_autoCloseSerialMonitor","startedTask","getTaskArgs","every","isCurrentTask","areTasksEqual","isMonitorAndUploadTask","terminate","execution","exitCode","task1","task2","args1","args2","_runTask","switchPort","pickProjectPort","serialPorts","pickedItem","matchOnDescription","ProjectTestManager","controller","refreshHandler","resolveHandler","createRunProfile","runHandler","jsonOutputPath","round","Error","runInQueue","spawnOptions","data","resolveTestSuites","test","runCoreTestCommand","test_suites","reduce","env_name","Map","suites","envName","envSuite","createTestItem","children","suite","test_name","test_dir","add","extractTestSuites","parent","request","run","createTestRun","queue","exclude","include","skipped","_runTestSuite","end","testName","startedAt","now","started","chdir","project_dir","failed","test_cases","exception","_processTestSuiteResult","appendOutput","testCase","source","file","range","passed","stdout","_taskManager","_sbEnvSwitcher","_logOutputChannel","_pool","ide","api","logOutputChannel","createFileSystemWatcher","createDirSystemWatcher","dir","withIndexRebuildingProgress","location","viewId","cancellable","withTasksLoadingProgress","onDidChangeProjectConfig","saveActiveProjectState","onDidNotifyError","settings","autoPreloadEnvTasks","autoRebuild","projectHelpers","findActiveProjectDir","getActiveObserver","rebuildIndex","revealActiveEnvironment","internalSubscriptions","registerEnvSwitcher","disposeInternals","getSelectedProjectDir","pioProjectDirs","currentActiveDir","getActiveProjectDir","lastActiveDir","observer","currentProjectDir","currentEnv","getObserver","switchProjectEnv","switch","showSelectedEnv","pickProjectEnv","shortProjectDir","QuickItem","collapsibleState","super","customChildren","QuickAccessTreeProvider","pioTerm","pioHome","_enterpriseSettings","hasPIOProject","info","state","has","patchOSEnviron","startInstaller","handleUseDevelopmentPIOCoreConfiguration","registerGlobalCommands","initDebug","startPIOHome","done","callCounter","misc","conflicted","ext","isActive","displayName","fileName","endsWith","loadEnterpriseSettings","extraVars","PLATFORMIO_IDE","utils","http_proxy","HTTP_PROXY","HTTPS_PROXY","https_proxy","caller","extraPath","im","outputChannel","appendLine","piodebug","envDir","disposeLocalSubscriptions","deactivate","activate"],"sourceRoot":""}