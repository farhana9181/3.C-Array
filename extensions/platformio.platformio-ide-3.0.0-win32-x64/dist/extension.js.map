{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://platformio-ide/webpack/bootstrap","webpack://platformio-ide/webpack/runtime/compat get default export","webpack://platformio-ide/webpack/runtime/define property getters","webpack://platformio-ide/webpack/runtime/hasOwnProperty shorthand","webpack://platformio-ide/webpack/runtime/make namespace object","webpack://platformio-ide/./src/constants.js","webpack://platformio-ide/external commonjs2 \"vscode\"","webpack://platformio-ide/external commonjs2 \"platformio-node-helpers\"","webpack://platformio-ide/external commonjs2 \"platformio-vscode-debug\"","webpack://platformio-ide/external node-commonjs \"os\"","webpack://platformio-ide/./src/utils.js","webpack://platformio-ide/external node-commonjs \"fs\"","webpack://platformio-ide/external node-commonjs \"path\"","webpack://platformio-ide/./src/project/helpers.js","webpack://platformio-ide/./src/home.js","webpack://platformio-ide/external commonjs2 \"fs-plus\"","webpack://platformio-ide/./src/installer/python-prompt.js","webpack://platformio-ide/./src/installer/manager.js","webpack://platformio-ide/./src/release-notes.js","webpack://platformio-ide/./src/terminal.js","webpack://platformio-ide/./src/toolbar.js","webpack://platformio-ide/./src/project/config.js","webpack://platformio-ide/./src/project/task-tree.js","webpack://platformio-ide/./src/project/tasks.js","webpack://platformio-ide/./src/project/tests.js","webpack://platformio-ide/./src/project/manager.js","webpack://platformio-ide/./src/views/quick-access-tree.js","webpack://platformio-ide/./src/main.js","webpack://platformio-ide/./src/misc.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nexport const IS_WINDOWS = process.platform.startsWith('win');\nexport const IS_OSX = process.platform == 'darwin';\nexport const IS_LINUX = !IS_WINDOWS && !IS_OSX;\nexport const PIO_CORE_VERSION_SPEC = '>=6';\nexport const STATUS_BAR_PRIORITY_START = 10;\nexport const CONFLICTED_EXTENSION_IDS = [\n  'llvm-vs-code-extensions.vscode-clangd',\n  'vsciot-vscode.vscode-arduino',\n  'vscode-openapi',\n];\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"vscode\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"platformio-node-helpers\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"platformio-vscode-debug\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"os\");","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as pioNodeHelpers from 'platformio-node-helpers';\n\nimport os from 'os';\nimport vscode from 'vscode';\n\nexport function disposeSubscriptions(subscriptions) {\n  while (subscriptions.length) {\n    subscriptions.pop().dispose();\n  }\n}\n\nexport async function notifyError(title, err) {\n  const description = err.stack || err.toString();\n  const ghbody = `# Description of problem\n  Leave a comment...\n\n  BEFORE SUBMITTING, PLEASE SEARCH FOR DUPLICATES IN\n  - https://github.com/platformio/platformio-vscode-ide/issues?q=is%3Aissue+\n\n  # Configuration\n\n  VSCode: ${vscode.version}\n  PIO IDE: v${getIDEVersion()}\n  System: ${os.type()}, ${os.release()}, ${os.arch()}\n\n  # Exception\n  \\`\\`\\`\n  ${description}\n  \\`\\`\\`\n  `;\n  const reportUrl = pioNodeHelpers.misc.getErrorReportUrl(title, ghbody);\n\n  let action = 'Report a problem';\n  if (!reportUrl.includes('issues/new')) {\n    action = 'Check available solutions';\n  }\n\n  const selected = await vscode.window.showErrorMessage(\n    description.substring(0, 700) + '...',\n    action\n  );\n  if (selected === action) {\n    vscode.commands.executeCommand('vscode.open', vscode.Uri.parse(reportUrl));\n  }\n  console.error(err);\n}\n\nexport function getIDEManifest() {\n  return vscode.extensions.getExtension('platformio.platformio-ide').packageJSON;\n}\n\nexport function getIDEVersion() {\n  return getIDEManifest().version;\n}\n\nexport async function listCoreSerialPorts() {\n  const script = `\nimport json\nfrom platformio.public import list_serial_ports\n\nprint(json.dumps(list_serial_ports()))\n    `;\n  const output = await pioNodeHelpers.core.getCorePythonCommandOutput(['-c', script]);\n  return JSON.parse(output.trim()).map((item) => {\n    for (const key of ['description', 'hwid']) {\n      if (item[key] === 'n/a') {\n        item[key] = undefined;\n      }\n    }\n    return item;\n  });\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"path\");","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport { extension } from '../main';\nimport fs from 'fs';\nimport path from 'path';\nimport vscode from 'vscode';\n\nexport function isPIOProjectSync(projectDir) {\n  try {\n    fs.accessSync(path.join(projectDir, 'platformio.ini'));\n    return true;\n  } catch (err) {}\n  return false;\n}\n\nexport function getPIOProjectDirs() {\n  return (vscode.workspace.workspaceFolders || [])\n    .map((folder) => folder.uri.fsPath)\n    .filter((projectDir) => isPIOProjectSync(projectDir));\n}\n\nexport function getActiveEditorProjectDir() {\n  const pioProjectDirs = getPIOProjectDirs();\n  if (pioProjectDirs.length < 1) {\n    return undefined;\n  }\n  const editor = vscode.window.activeTextEditor;\n  if (!editor) {\n    return undefined;\n  }\n  const resource = editor.document.uri;\n  if (resource.scheme !== 'file') {\n    return undefined;\n  }\n  const folder = vscode.workspace.getWorkspaceFolder(resource);\n  if (!folder || !isPIOProjectSync(folder.uri.fsPath)) {\n    // outside workspace\n    return undefined;\n  }\n  return folder.uri.fsPath;\n}\n\nexport function getProjectItemState(projectDir, key) {\n  const state = extension.context.globalState.get('projects', {})[projectDir];\n  return (state || {})[key];\n}\n\nexport function updateProjectItemState(projectDir, key, value) {\n  const projects = extension.context.globalState.get('projects', {});\n  if (!projects[projectDir]) {\n    projects[projectDir] = {};\n  }\n  projects[projectDir][key] = value;\n\n  // cleanup removed project\n  for (const item of Object.keys(projects)) {\n    if (!isPIOProjectSync(item)) {\n      delete projects[item];\n    }\n  }\n\n  extension.context.globalState.update('projects', projects);\n  extension.context.globalState.update('lastProjectDir', projectDir);\n}\n\nexport function getLastProjectDir() {\n  return extension.context.globalState.get('lastProjectDir');\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as pioNodeHelpers from 'platformio-node-helpers';\n\nimport { disposeSubscriptions, notifyError } from './utils';\nimport { getPIOProjectDirs, updateProjectItemState } from './project/helpers';\nimport { IS_OSX } from './constants';\nimport { extension } from './main';\nimport path from 'path';\nimport vscode from 'vscode';\n\nexport default class PIOHome {\n  static defaultStartUrl = '/';\n\n  constructor() {\n    this.subscriptions = [];\n    this._currentPanel = undefined;\n    this._lastStartUrl = PIOHome.defaultStartUrl;\n\n    // close PIO Home when workspaces folders are changed (VSCode reactivates extensiuon)\n    this.subscriptions.push(\n      vscode.workspace.onDidChangeWorkspaceFolders(this.disposePanel.bind(this))\n    );\n  }\n\n  static async shutdownAllServers() {\n    await pioNodeHelpers.home.shutdownServer();\n    await pioNodeHelpers.home.shutdownAllServers();\n  }\n\n  onPanelDisposed() {\n    this._currentPanel = undefined;\n  }\n\n  disposePanel() {\n    if (!this._currentPanel) {\n      return;\n    }\n    this._currentPanel.dispose();\n    this._currentPanel = undefined;\n  }\n\n  dispose() {\n    pioNodeHelpers.home.shutdownServer();\n    this.disposePanel();\n    disposeSubscriptions(this.subscriptions);\n  }\n\n  async toggle(startUrl = PIOHome.defaultStartUrl) {\n    const column = vscode.window.activeTextEditor\n      ? vscode.window.activeTextEditor.viewColumn\n      : undefined;\n    try {\n      if (this._currentPanel) {\n        if (this._lastStartUrl !== startUrl) {\n          this._currentPanel.webview.html = await this.getWebviewContent(startUrl);\n        }\n        return this._currentPanel.reveal(column);\n      }\n    } catch (err) {\n      console.warn(err);\n    }\n    this._currentPanel = await this.newPanel(startUrl);\n  }\n\n  async newPanel(startUrl) {\n    const panel = vscode.window.createWebviewPanel(\n      'pioHome',\n      extension.getEnterpriseSetting('pioHomeTitle', 'PIO Home'),\n      vscode.ViewColumn.One,\n      {\n        enableScripts: true,\n        retainContextWhenHidden: true,\n      }\n    );\n    this.subscriptions.push(panel.onDidDispose(this.onPanelDisposed.bind(this)));\n    panel.iconPath = vscode.Uri.file(\n      path.join(\n        extension.context.extensionPath,\n        'assets',\n        'images',\n        'platformio-mini-logo.svg'\n      )\n    );\n    panel.webview.html = this.getLoadingContent();\n    try {\n      panel.webview.html = await this.getWebviewContent(startUrl);\n    } catch (err) {\n      if (!err.toString().includes('Webview is disposed')) {\n        notifyError('Start PIO Home Server', err);\n      }\n    }\n    return panel;\n  }\n\n  getTheme() {\n    const workbench = vscode.workspace.getConfiguration('workbench') || {};\n    return (workbench.colorTheme || '').toLowerCase().includes('light')\n      ? 'light'\n      : 'dark';\n  }\n\n  getLoadingContent() {\n    const theme = this.getTheme();\n    return `<!DOCTYPE html>\n    <html lang=\"en\">\n    <body style=\"background-color: ${theme === 'light' ? '#FFF' : '#1E1E1E'}\">\n      <div style=\"padding: 15px;\">Loading...</div>\n    </body>\n    </html>`;\n  }\n\n  async getWebviewContent(startUrl) {\n    this._lastStartUrl = startUrl;\n    await pioNodeHelpers.home.ensureServerStarted({\n      port: extension.getConfiguration('pioHomeServerHttpPort'),\n      host: extension.getConfiguration('pioHomeServerHttpHost'),\n      onIDECommand: await this.onIDECommand.bind(this),\n    });\n    const theme = this.getTheme();\n    const iframeId = `pioHomeIFrame-${vscode.env.sessionId}`;\n    const iframeScript = `\n<script>\n  for (const command of ['selectAll', 'copy', 'paste', 'cut', 'undo', 'redo']) {\n    document.addEventListener(command, (e) => {\n      document.getElementById('${iframeId}').contentWindow.postMessage({'command': 'execCommand', 'data': command}, '*');\n    });\n  }\n  window.addEventListener('message', (e) => {\n    if (e.data.command === 'kbd-event') {\n      window.dispatchEvent(new KeyboardEvent('keydown', e.data.data));\n    }\n  });\n</script>\n  `;\n    return `<!DOCTYPE html>\n      <html lang=\"en\">\n      <head>${IS_OSX ? iframeScript : ''}</head>\n      <body style=\"margin: 0; padding: 0; height: 100%; overflow: hidden; background-color: ${\n        theme === 'light' ? '#FFF' : '#1E1E1E'\n      }\">\n        <iframe id=\"${iframeId}\" src=\"${pioNodeHelpers.home.getFrontendUrl({\n      start: startUrl,\n      theme,\n      workspace: extension.getEnterpriseSetting('defaultPIOHomeWorkspace'),\n    })}\"\n          width=\"100%\"\n          height=\"100%\"\n          frameborder=\"0\"\n          style=\"border: 0; left: 0; right: 0; bottom: 0; top: 0; position:absolute;\" />\n      </body>\n      </html>\n    `;\n  }\n\n  async onIDECommand(command, params) {\n    switch (command) {\n      case 'open_project':\n        return this.onOpenProjectCommand(params);\n      case 'open_text_document':\n        return await this.onOpenTextDocumentCommand(params);\n      case 'get_pio_project_dirs':\n        return this.onGetPIOProjectDirs();\n    }\n  }\n\n  onOpenProjectCommand(params) {\n    if (extension.ProjectManager) {\n      updateProjectItemState(vscode.Uri.file(params).fsPath, 'activeEnv', undefined);\n      extension.ProjectManager.switchToProject(vscode.Uri.file(params).fsPath);\n    }\n    this.disposePanel();\n    if (vscode.workspace.workspaceFolders) {\n      vscode.workspace.updateWorkspaceFolders(\n        vscode.workspace.workspaceFolders.length,\n        null,\n        { uri: vscode.Uri.file(params) }\n      );\n    } else {\n      vscode.commands.executeCommand('vscode.openFolder', vscode.Uri.file(params));\n    }\n    vscode.commands.executeCommand('workbench.view.explorer');\n    return true;\n  }\n\n  async onOpenTextDocumentCommand(params) {\n    const editor = await vscode.window.showTextDocument(vscode.Uri.file(params.path));\n    const gotoPosition = new vscode.Position(\n      (params.line || 1) - 1,\n      (params.column || 1) - 1\n    );\n    editor.selection = new vscode.Selection(gotoPosition, gotoPosition);\n    editor.revealRange(\n      new vscode.Range(gotoPosition, gotoPosition),\n      vscode.TextEditorRevealType.InCenter\n    );\n    return true;\n  }\n\n  onGetPIOProjectDirs() {\n    return getPIOProjectDirs();\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs-plus\");","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport fs from 'fs-plus';\nimport vscode from 'vscode';\n\nexport default class PythonPrompt {\n  STATUS_TRY_AGAIN = 0;\n  STATUS_ABORT = 1;\n  STATUS_CUSTOMEXE = 2;\n\n  async prompt() {\n    const selectedItem = await vscode.window.showInformationMessage(\n      'PlatformIO: Can not find working Python 3.6+ Interpreter. Please install the latest Python 3 and restart VSCode',\n      { title: 'Install Python', isCloseAffordance: false },\n      { title: 'I have Python', isCloseAffordance: false },\n      { title: 'Try again', isCloseAffordance: false },\n      { title: 'Abort PlatformIO IDE Installation', isCloseAffordance: true }\n    );\n\n    let result = { status: this.STATUS_TRY_AGAIN };\n    let pythonExecutable = undefined;\n    switch (selectedItem ? selectedItem.title : undefined) {\n      case 'Install Python':\n        vscode.commands.executeCommand(\n          'vscode.open',\n          vscode.Uri.parse(\n            'https://docs.platformio.org/en/latest/faq/install-python.html'\n          )\n        );\n        break;\n      case 'I have Python':\n        pythonExecutable = await vscode.window.showInputBox({\n          prompt: 'Please specify a full path to Python executable file',\n          placeHolder: 'Full path to python/python.exe',\n          validateInput: (value) =>\n            !fs.isFileSync(value) ? 'Invalid path to Python Interpreter' : null,\n        });\n        if (pythonExecutable) {\n          result = {\n            status: this.STATUS_CUSTOMEXE,\n            pythonExecutable,\n          };\n        }\n        break;\n      case 'Abort PlatformIO IDE Installation':\n        result = { status: this.STATUS_ABORT };\n        break;\n    }\n\n    return result;\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as pioNodeHelpers from 'platformio-node-helpers';\n\nimport PIOHome from '../home';\nimport { PIO_CORE_VERSION_SPEC } from '../constants';\nimport PythonPrompt from './python-prompt';\nimport { extension } from '../main';\nimport path from 'path';\nimport vscode from 'vscode';\n\nexport default class InstallationManager {\n  LOCK_TIMEOUT = 1 * 60 * 1000; // 1 minute\n  LOCK_KEY = 'installer-lock';\n\n  constructor(disableAutoUpdates = false) {\n    const config = vscode.workspace.getConfiguration('platformio-ide');\n    this.stages = [\n      new pioNodeHelpers.installer.PlatformIOCoreStage(\n        {\n          getValue: (key) => extension.context.globalState.get(key),\n          setValue: (key, value) => extension.context.globalState.update(key, value),\n        },\n        this.onDidStatusChange.bind(this),\n        {\n          pioCoreVersionSpec: PIO_CORE_VERSION_SPEC,\n          useBuiltinPython: config.get('useBuiltinPython'),\n          useBuiltinPIOCore: config.get('useBuiltinPIOCore'),\n          useDevelopmentPIOCore: config.get('useDevelopmentPIOCore'),\n          pythonPrompt: new PythonPrompt(),\n          disableAutoUpdates: disableAutoUpdates,\n          predownloadedPackageDir: path.join(\n            extension.context.extensionPath,\n            'assets',\n            'predownloaded'\n          ),\n        }\n      ),\n    ];\n  }\n\n  onDidStatusChange() {\n    // increase lock timeout on each stage update\n    if (this.locked()) {\n      this.lock();\n    }\n  }\n\n  lock() {\n    return extension.context.globalState.update(this.LOCK_KEY, new Date().getTime());\n  }\n\n  unlock() {\n    return extension.context.globalState.update(this.LOCK_KEY, undefined);\n  }\n\n  locked() {\n    const lockTime = extension.context.globalState.get(this.LOCK_KEY);\n    if (!lockTime) {\n      return false;\n    }\n    return new Date().getTime() - parseInt(lockTime) <= this.LOCK_TIMEOUT;\n  }\n\n  async check() {\n    let result = true;\n    for (const stage of this.stages) {\n      try {\n        if (!(await stage.check())) {\n          result = false;\n        }\n      } catch (err) {\n        result = false;\n        console.warn(err);\n      }\n    }\n    return result;\n  }\n\n  async install(progress) {\n    const stageIncrementTotal = 100 / this.stages.length;\n    // shutdown all PIO Home servers which block python.exe on Windows\n    await PIOHome.shutdownAllServers();\n    for (const stage of this.stages) {\n      await stage.install((message, increment) => {\n        progress.report({\n          message,\n          increment: stageIncrementTotal * (increment / 100),\n        });\n      });\n    }\n    progress.report({ message: 'Finished! Please restart VSCode.', increment: 100 });\n  }\n\n  destroy() {\n    return this.stages.map((stage) => stage.destroy());\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport { disposeSubscriptions } from './utils';\nimport { extension } from './main';\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport vscode from 'vscode';\n\nexport default class PIOReleaseNotes {\n  constructor() {\n    this.version = extension.context.extension.packageJSON.version;\n    this._currentPanel = undefined;\n\n    this.subscriptions = [\n      vscode.commands.registerCommand('platformio-ide.showReleaseNotes', () =>\n        this.toggle()\n      ),\n    ];\n\n    const stateKey = 'showedReleaseNotesFor';\n    if (extension.context.globalState.get(stateKey) !== this.version) {\n      extension.context.globalState.update(stateKey, this.version);\n      this.toggle();\n    }\n  }\n\n  dispose() {\n    disposeSubscriptions(this.subscriptions);\n  }\n\n  async toggle() {\n    const column = vscode.window.activeTextEditor\n      ? vscode.window.activeTextEditor.viewColumn\n      : undefined;\n    try {\n      if (this._currentPanel) {\n        this._currentPanel.webview.html = await this.getWebviewContent();\n        return this._currentPanel.reveal(column);\n      }\n    } catch (err) {\n      console.warn(err);\n    }\n    this._currentPanel = await this.newPanel();\n  }\n\n  async newPanel() {\n    const panel = vscode.window.createWebviewPanel(\n      'pioReleaseNotes',\n      'PlatformIO IDE: Release Notes',\n      vscode.ViewColumn.One,\n      {\n        enableScripts: true,\n        retainContextWhenHidden: true,\n      }\n    );\n    panel.iconPath = vscode.Uri.file(\n      path.join(\n        extension.context.extensionPath,\n        'assets',\n        'images',\n        'platformio-mini-logo.svg'\n      )\n    );\n    panel.onDidDispose(\n      () => (this._currentPanel = undefined),\n      undefined,\n      this.subscriptions\n    );\n    const logoSrc = panel.webview.asWebviewUri(\n      vscode.Uri.file(\n        path.join(\n          extension.context.extensionPath,\n          'assets',\n          'images',\n          'platformio-logo.png'\n        )\n      )\n    );\n    panel.webview.html = await this.getWebviewContent(logoSrc);\n    return panel;\n  }\n\n  async getWebviewContent(logoSrc) {\n    const releaseNotes = await this.readReleaseNotes();\n    return `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>PlatformIO IDE: Release Notes</title>\n  <style>ul { padding-top: 5px; } li { padding-bottom: 4px; }</style>\n</head>\n<body>\n  <table border=\"0\">\n  <tr>\n    <td><img src=\"${logoSrc}\" width=\"28px\" height=\"28px\"></td>\n    <td style=\"padding-left: 10px\"><h1>PlatformIO IDE Release Notes</h1></td>\n  </tr>\n  </table>\n  <div>\n    Welcome to the ${this.version} release of PlatformIO IDE.\n    There are many updates in this version that we hope you'll like.\n  </div>\n  <p>\n    <b>Release History</b>: Want to read release notes for the previous versions?\n    Please visit <a href=\"https://github.com/platformio/platformio-vscode-ide/blob/develop/CHANGELOG.md\">PlatformIO IDE Changelog</a>\n    for more detailed information.\n  </p>\n  <p id=\"content\">Loading...</p>\n  <h2>Stay in touch with us</h2>\n  <p>\n    Please follow us on <a href=\"https://www.linkedin.com/company/platformio\">LinkedIn</a> and Twitter <a href=\"https://twitter.com/PlatformIO_Org\">@PlatformIO_Org]</a>\n    to keep up to date with the latest news, articles and tips!\n  </p>\n  <hr />\n  <p>\n    <b>PlatformIO Core</b>: If you would like to read the PlatformIO Core release notes,\n    go to the <a href=\"https://docs.platformio.org/en/latest/core/history.html\">Release Notes</a> on <a href=\"https://docs.platformio.org/\">docs.platformio.org</a>).\n  </p>\n  <textarea id=\"pioRNMarkdown\" hidden=\"hidden\">${releaseNotes}</textarea>\n  <script src=\"https://cdn.jsdelivr.net/npm/marked/marked.min.js\"></script>\n  <script>\n    document.getElementById('content').innerHTML =\n      marked.parse(document.getElementById('pioRNMarkdown').value);\n  </script>\n</body>\n</html>`;\n  }\n\n  async readReleaseNotes() {\n    const changelogPath = path.join(extension.context.extensionPath, 'CHANGELOG.md');\n    try {\n      const contents = await fs.readFile(changelogPath, { encoding: 'utf-8' });\n      const startsAt = contents.indexOf('\\n## ');\n      return contents.substring(startsAt, contents.indexOf('\\n## ', startsAt + 3));\n    } catch (err) {\n      return err.toString();\n    }\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport vscode from 'vscode';\n\nexport default class PIOTerminal {\n  constructor() {\n    this._instance = undefined;\n  }\n\n  new() {\n    const envClone = Object.assign({}, process.env);\n    if (process.env.PLATFORMIO_PATH) {\n      envClone.PATH = process.env.PLATFORMIO_PATH;\n      envClone.Path = process.env.PLATFORMIO_PATH;\n    }\n    return vscode.window.createTerminal({\n      name: 'PlatformIO CLI',\n      env: envClone,\n    });\n  }\n\n  sendText(text) {\n    if (!this._instance || this._instance.exitStatus !== undefined) {\n      this._instance = this.new();\n    }\n    this._instance.sendText(text);\n    this._instance.show();\n  }\n\n  dispose() {\n    if (this._instance) {\n      this._instance.dispose();\n    }\n    this._instance = undefined;\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport { STATUS_BAR_PRIORITY_START } from './constants';\nimport { disposeSubscriptions } from './utils';\nimport { extension } from './main';\nimport vscode from 'vscode';\n\nclass ToolbarButton {\n  constructor(text, tooltip, commands) {\n    this.text = text;\n    this.tooltip = tooltip;\n    this.commands = ToolbarButtonCommands.from(commands);\n  }\n\n  createStatusBarItem(options = { priority: 0 }) {\n    const item = vscode.window.createStatusBarItem(\n      'pio-toolbar',\n      vscode.StatusBarAlignment.Left,\n      STATUS_BAR_PRIORITY_START + options.priority + 1\n    );\n    item.name = 'PlatformIO: Toolbar';\n    item.text = this.text;\n    item.tooltip = this.tooltip;\n    item.command = {\n      title: this.tooltip,\n      command: PIOToolbar.RUN_BUTTON_COMMANDS_ID,\n      arguments: [this],\n    };\n    return item;\n  }\n}\n\nclass ToolbarButtonCommands {\n  constructor(id, args = undefined) {\n    this.id = id;\n    this.args = args;\n  }\n\n  static from(rawCommands) {\n    const result = [];\n    if (!rawCommands) {\n      return result;\n    }\n    if (!Array.isArray(rawCommands)) {\n      rawCommands = [rawCommands];\n    }\n    return rawCommands.map((item) =>\n      typeof item === 'object'\n        ? new ToolbarButtonCommands(item.id, item.args)\n        : new ToolbarButtonCommands(item)\n    );\n  }\n}\n\nexport default class PIOToolbar {\n  static RUN_BUTTON_COMMANDS_ID = 'platformio-ide.runToolbarButtonCommand';\n\n  constructor(options = { filterCommands: undefined, ignoreCommands: undefined }) {\n    this.options = options;\n    this.subscriptions = [];\n    this.show();\n  }\n\n  dispose() {\n    disposeSubscriptions(this.subscriptions);\n  }\n\n  static getButtons() {\n    const items = extension.getConfiguration('toolbar') || [];\n    return items.map(\n      (item) =>\n        new ToolbarButton(\n          item.text,\n          item.tooltip,\n          ToolbarButtonCommands.from(item.commands)\n        )\n    );\n  }\n\n  show() {\n    this.refresh();\n  }\n\n  refresh() {\n    this.dispose();\n    const buttons = PIOToolbar.getButtons().filter(\n      (button) =>\n        (!this.options.filterCommands ||\n          button.commands.some((cmd) =>\n            this.options.filterCommands.includes(cmd.id)\n          )) &&\n        (!this.options.ignoreCommands ||\n          !button.commands.some((cmd) => this.options.ignoreCommands.includes(cmd.id)))\n    );\n\n    buttons.forEach((button, index) => {\n      const sbItem = button.createStatusBarItem({ priority: buttons.length - index });\n      sbItem.show();\n      this.subscriptions.push(sbItem);\n    });\n\n    this.subscriptions.push(\n      vscode.workspace.onDidChangeConfiguration((e) =>\n        e.affectsConfiguration('platformio-ide.toolbar') ? this.refresh() : undefined\n      ),\n      vscode.commands.registerCommand(\n        PIOToolbar.RUN_BUTTON_COMMANDS_ID,\n        async (button) => {\n          for (const cmd of button.commands) {\n            const args = cmd.args || [];\n            await vscode.commands.executeCommand(\n              cmd.id,\n              ...(Array.isArray(args) ? args : [args])\n            );\n          }\n        }\n      )\n    );\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as pioNodeHelpers from 'platformio-node-helpers';\n\nimport { disposeSubscriptions, listCoreSerialPorts } from '../utils';\nimport vscode from 'vscode';\n\nexport class ProjectConfigLanguageProvider {\n  static DOCUMENT_SELECTOR = { language: 'ini' };\n  SCOPE_PLATFORMIO = 'platformio';\n  SCOPE_ENV = 'env';\n\n  constructor(projectDir) {\n    this.projectDir = projectDir;\n    this.subscriptions = [\n      vscode.languages.registerHoverProvider(\n        ProjectConfigLanguageProvider.DOCUMENT_SELECTOR,\n        {\n          provideHover: async (document, position) =>\n            await this.provideHover(document, position),\n        }\n      ),\n      vscode.languages.registerCompletionItemProvider(\n        ProjectConfigLanguageProvider.DOCUMENT_SELECTOR,\n        {\n          provideCompletionItems: async (document, position, token, context) =>\n            await this.provideCompletionItems(document, position, token, context),\n        }\n      ),\n    ];\n    // if (vscode.languages.registerInlineCompletionItemProvider) {\n    //   this.subscriptions.push(\n    //     vscode.languages.registerInlineCompletionItemProvider(\n    //       ProjectConfigLanguageProvider.DOCUMENT_SELECTOR,\n    //       {\n    //         provideInlineCompletionItems: async (document, position) =>\n    //           await this.provideCompletionItems(document, position, true),\n    //       }\n    //     )\n    //   );\n    // }\n    this._options = undefined;\n    this._ports = undefined;\n  }\n\n  dispose() {\n    disposeSubscriptions(this.subscriptions);\n  }\n\n  async getOptions() {\n    if (this._options) {\n      return this._options;\n    }\n    const script = `\nimport json\nfrom platformio.public import get_config_options_schema\n\nprint(json.dumps(get_config_options_schema()))\n  `;\n    const output = await pioNodeHelpers.core.getCorePythonCommandOutput(\n      ['-c', script],\n      { projectDir: this.projectDir }\n    );\n    this._options = JSON.parse(output.trim());\n    return this._options;\n  }\n\n  renderOptionDocs(option) {\n    const attrs = [\n      ['Name', option.name],\n      ['Group', option.group],\n      ['Type', option.type],\n      ['Multiple', option.multiple ? 'yes' : 'no'],\n    ];\n    if (option.sysenvvar) {\n      attrs.push(['EnvironmentVariable', option.sysenvvar]);\n    }\n    if (option.type === 'choice') {\n      attrs.push(['Choices', option.choices.join(', ')]);\n    }\n    if (option.min !== undefined) {\n      attrs.push(['Minimum', option.min]);\n    }\n    if (option.max !== undefined) {\n      attrs.push(['Maximum', option.max]);\n    }\n    if (option.default !== null || option.type === 'boolean') {\n      let value = option.default;\n      if (option.type === 'boolean') {\n        value = option.default ? 'yes' : 'no';\n      } else if (option.multiple && Array.isArray(option.default)) {\n        value = option.default.join(', ');\n      }\n      attrs.push(['Default', value]);\n    }\n    const docs = new vscode.MarkdownString();\n    docs.appendCodeblock(\n      attrs.map(([name, value]) => `${name} = ${value}`).join('\\n'),\n      'ini'\n    );\n    docs.appendMarkdown(`\n${option.description}\n\n[View documentation](https://docs.platformio.org/en/latest/projectconf/sections/${option.scope}/options/${option.group}/${option.name}.html?utm_source=vscode&utm_medium=completion)\n`);\n    return docs;\n  }\n\n  getScopeAt(document, position) {\n    const text = document.getText(\n      new vscode.Range(new vscode.Position(0, 0), position)\n    );\n    for (const line of text.split('\\n').reverse()) {\n      if (line.startsWith('[platformio]')) {\n        return this.SCOPE_PLATFORMIO;\n      } else if (line.startsWith('[env]') || line.startsWith('[env:')) {\n        return this.SCOPE_ENV;\n      }\n    }\n    return undefined;\n  }\n\n  async getOptionAt(document, position) {\n    for (let lineNum = position.line; lineNum > 0; lineNum--) {\n      const line = document.lineAt(lineNum).text;\n      if (line.startsWith(' ') || line.startsWith('\\t')) {\n        continue;\n      }\n      const optionName = line.split('=')[0].trim();\n      return (await this.getOptions()).find((option) => option.name === optionName);\n    }\n  }\n\n  isOptionValueLocation(document, position) {\n    const line = document.lineAt(position.line).text;\n    const sepPos = line.indexOf('=');\n    return (\n      line.startsWith(' ') ||\n      line.startsWith('\\t') ||\n      (sepPos > 0 && position.character > sepPos)\n    );\n  }\n\n  async provideHover(document, position) {\n    const word = document.getText(document.getWordRangeAtPosition(position));\n    const option = (await this.getOptions()).find((option) => option.name === word);\n    if (option) {\n      return new vscode.Hover(this.renderOptionDocs(option));\n    }\n    return this.providePackageHover(document, position);\n  }\n\n  async providePackageHover(document, position) {\n    const line = document.lineAt(position.line).text;\n    let rawValue = undefined;\n    if (line.startsWith(' ') || line.startsWith('\\t')) {\n      rawValue = line;\n    } else if (line.includes('=')) {\n      rawValue = line.split('=', 2)[1];\n    }\n    if (!rawValue) {\n      return;\n    }\n    const pkgRegExp = /^(([a-z\\d_\\-]+)\\/)?([a-z\\d\\_\\- ]+)/i;\n    const matches = pkgRegExp.exec(rawValue.trim());\n    if (!matches) {\n      return;\n    }\n\n    const option = await this.getOptionAt(document, position);\n    if (!['platform', 'lib_deps'].includes(option.name)) {\n      return;\n    }\n\n    const pkgOwner = matches[2];\n    const pkgName = matches[3];\n    const pkgUrlParts = ['https://registry.platformio.org'];\n    if (pkgOwner) {\n      pkgUrlParts.push(option.name === 'platform' ? 'platforms' : 'libraries');\n      pkgUrlParts.push(pkgOwner.trim(), encodeURIComponent(pkgName.trim()));\n    } else {\n      const qs = new URLSearchParams();\n      qs.set('t', option.group);\n      qs.set('q', `name:\"${pkgName.trim()}\"`);\n      pkgUrlParts.push(`search?${qs.toString()}`);\n    }\n\n    return new vscode.Hover(\n      new vscode.MarkdownString(\n        `[Open in PlatformIO Registry](${pkgUrlParts.join('/')})`\n      )\n    );\n  }\n\n  async provideCompletionItems(document, position, token, context, isInline = false) {\n    if (token.isCancellationRequested) {\n      return;\n    }\n    return await (this.isOptionValueLocation(document, position)\n      ? this.provideCompletionValues(document, position, isInline)\n      : this.provideCompletionOptions(document, position, isInline));\n  }\n\n  async provideCompletionOptions(document, position, isInline = false) {\n    const scope = this.getScopeAt(document, position);\n    if (!scope) {\n      return;\n    }\n    const options = await this.getOptions();\n    return options\n      .filter((option) => option.scope === scope)\n      .map((option) => {\n        if (isInline) {\n          return new vscode.InlineCompletionItem(option.name);\n        }\n        const item = new vscode.CompletionItem(\n          option.name,\n          vscode.CompletionItemKind.Field\n        );\n        item.documentation = this.renderOptionDocs(option);\n        return item;\n      });\n  }\n\n  async provideCompletionValues(document, position) {\n    const option = await this.getOptionAt(document, position);\n    if (!option) {\n      return;\n    }\n    switch (option.name) {\n      case 'upload_port':\n      case 'monitor_port':\n      case 'test_port':\n        return await this.provideCompletionPorts();\n\n      case 'upload_speed':\n      case 'monitor_speed':\n      case 'test_speed':\n        return await this.provideCompletionBaudrates(option);\n    }\n    return this.provideTypedCompletionValues(option);\n  }\n\n  async provideTypedCompletionValues(option) {\n    const values = [];\n    let defaultValue = option.default;\n    switch (option.type) {\n      case 'boolean':\n        values.push('yes', 'no');\n        defaultValue = option.default ? 'yes' : 'no';\n        break;\n      case 'choice':\n        option.choices.forEach((item) => values.push(item));\n        break;\n\n      case 'integer range':\n        for (let i = option.min; i <= option.max; i++) {\n          values.push(i);\n        }\n        break;\n    }\n    return values.map((value) => {\n      const item = new vscode.CompletionItem(\n        value.toString(),\n        vscode.CompletionItemKind.EnumMember\n      );\n      item.preselect = defaultValue === value;\n      return item;\n    });\n  }\n\n  createCustomCompletionValueItem() {\n    const item = new vscode.CompletionItem('Custom', vscode.CompletionItemKind.Value);\n    item.insertText = '';\n    item.sortText = 'Z';\n    return item;\n  }\n\n  async provideCompletionPorts() {\n    if (!this._ports) {\n      this._ports = await listCoreSerialPorts();\n      setTimeout(() => (this._ports = undefined), 3000);\n    }\n    const items = (this._ports || []).map((port) => {\n      const item = new vscode.CompletionItem(\n        port.port,\n        vscode.CompletionItemKind.Value\n      );\n      item.detail = port.description;\n      item.documentation = port.hwid;\n      return item;\n    });\n    items.push(this.createCustomCompletionValueItem());\n    return items;\n  }\n\n  async provideCompletionBaudrates(option) {\n    const values = [\n      600, 1200, 2400, 4800, 9600, 14400, 19200, 28800, 38400, 57600, 115200, 230400,\n    ];\n    const items = values.map((value, index) => {\n      const item = new vscode.CompletionItem(\n        value.toString(),\n        vscode.CompletionItemKind.Value\n      );\n      item.sortText = String.fromCharCode(index + 65);\n      item.preselect = option.default === value;\n      return item;\n    });\n    items.push(this.createCustomCompletionValueItem());\n    return items;\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as vscode from 'vscode';\n\nexport default class ProjectTasksTreeProvider {\n  static DEFAULT_ENV_NAME = 'Default';\n\n  constructor(id, envs, tasks, activeEnvName) {\n    this.id = id;\n    this.envs = envs;\n    this.tasks = tasks;\n    this.activeEnvName = activeEnvName;\n    this.multiEnvProject = this.envs.length > 1;\n  }\n\n  getTreeItem(item) {\n    return item instanceof vscode.TreeItem ? item : this.taskToTreeItem(item);\n  }\n\n  taskToTreeItem(task) {\n    const treeItem = new vscode.TreeItem(task.name);\n    treeItem.iconPath = new vscode.ThemeIcon('circle-outline');\n    treeItem.tooltip = task.title;\n    treeItem.command = {\n      title: task.title,\n      command: 'platformio-ide._runProjectTask',\n      arguments: [task],\n    };\n    if (!task.coreEnv && task.multienv && this.multiEnvProject) {\n      treeItem.label += ' All';\n    }\n    return treeItem;\n  }\n\n  getChildren(element) {\n    if (element && element.group) {\n      return this.getEnvGroupChildren(element.env, element.group);\n    } else if (element) {\n      return this.getEnvChildren(element.env);\n    }\n    return this.getRootChildren();\n  }\n\n  getRootChildren() {\n    const result = [];\n    for (const envName of [undefined, ...this.envs.map((item) => item.name)]) {\n      const treeItem = new vscode.TreeItem(\n        envName || ProjectTasksTreeProvider.DEFAULT_ENV_NAME,\n        envName && (envName === this.activeEnvName || !this.multiEnvProject)\n          ? vscode.TreeItemCollapsibleState.Expanded\n          : vscode.TreeItemCollapsibleState.Collapsed\n      );\n      treeItem.id = `${this.id}-${envName}`;\n      treeItem.env = envName;\n      treeItem.iconPath = new vscode.ThemeIcon('root-folder');\n      result.push(treeItem);\n    }\n    return result;\n  }\n\n  getEnvGroupChildren(env, group) {\n    return this.tasks.filter((task) => task.coreEnv === env && task.group === group);\n  }\n\n  getEnvChildren(env) {\n    const envTasks = this.tasks.filter((task) => task.coreEnv === env);\n    if (!envTasks.length) {\n      return [new vscode.TreeItem('Loading...')];\n    }\n    const result = envTasks.filter((task) => !task.group);\n    // root groups\n    for (const group of this.getTaskGroups(envTasks)) {\n      const element = new vscode.TreeItem(\n        group,\n        ['General', 'Platform'].includes(group)\n          ? vscode.TreeItemCollapsibleState.Expanded\n          : vscode.TreeItemCollapsibleState.Collapsed\n      );\n      element.env = env;\n      element.group = group;\n      element.iconPath = vscode.ThemeIcon.Folder;\n      result.push(element);\n    }\n    return result;\n  }\n\n  getTaskGroups(tasks) {\n    const result = ['General'];\n    const candidates = tasks.filter((task) => task.group).map((task) => task.group);\n    // reorder\n    if (candidates.includes('Platform')) {\n      result.push('Platform');\n    }\n    for (const group of candidates) {\n      if (!result.includes(group)) {\n        result.push(group);\n      }\n    }\n    return result;\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport { IS_WINDOWS, STATUS_BAR_PRIORITY_START } from '../constants';\nimport { disposeSubscriptions, listCoreSerialPorts } from '../utils';\nimport { getProjectItemState, updateProjectItemState } from './helpers';\nimport ProjectTasksTreeProvider from './task-tree';\nimport { extension } from '../main';\nimport path from 'path';\nimport vscode from 'vscode';\n\nexport default class ProjectTaskManager {\n  static PROVIDER_TYPE = 'PlatformIO';\n  static TASKS_VIEW_ID = 'platformio-ide.projectTasks';\n  static AUTO_REFRESH_DELAY = 500; // 0.5 sec\n\n  constructor(projectDir, projectObserver) {\n    this.projectDir = projectDir;\n    this.projectObserver = projectObserver;\n    this.subscriptions = [];\n\n    this._sid = Math.random();\n    this._refreshTimeout = undefined;\n    this._restoreOnDidEndTask = undefined;\n    this._tasksToRestore = [];\n    this._sbPortSwitcher = undefined;\n    this._customPort = getProjectItemState(projectDir, 'customPort');\n\n    this.refresh();\n  }\n\n  dispose() {\n    disposeSubscriptions(this.subscriptions);\n  }\n\n  requestRefresh() {\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n    }\n    this._refreshTimeout = setTimeout(\n      this.refresh.bind(this),\n      ProjectTaskManager.AUTO_REFRESH_DELAY\n    );\n  }\n\n  async refresh({ force = false } = {}) {\n    this.dispose();\n\n    if (force) {\n      this.projectObserver.resetCache();\n      this._sid = Math.random();\n    }\n\n    const projectEnvs = await this.projectObserver.getProjectEnvs();\n    const projectTasks = [...(await this.projectObserver.getDefaultTasks())];\n    for (const item of projectEnvs) {\n      projectTasks.push(\n        ...((await this.projectObserver.getLoadedEnvTasks(item.name)) || [])\n      );\n    }\n\n    const taskViewer = vscode.window.createTreeView(ProjectTaskManager.TASKS_VIEW_ID, {\n      treeDataProvider: new ProjectTasksTreeProvider(\n        this._sid,\n        projectEnvs,\n        projectTasks,\n        this.projectObserver.getActiveEnvName()\n      ),\n      showCollapseAll: true,\n    });\n\n    this.subscriptions.push(\n      taskViewer,\n\n      // pre-fetch expanded env tasks\n      taskViewer.onDidExpandElement(async ({ element }) => {\n        if (element.env) {\n          await this.onDidRequestEnvTasks(element.env);\n        }\n      }),\n\n      // register VSCode Task Provider\n      vscode.tasks.registerTaskProvider(ProjectTaskManager.PROVIDER_TYPE, {\n        provideTasks: () => projectTasks.map((task) => this.toVSCodeTask(task)),\n        resolveTask: () => {\n          return undefined;\n        },\n      }),\n\n      vscode.tasks.onDidEndTaskProcess((event) => this.onDidEndTaskProcess(event))\n    );\n\n    this.registerTaskBasedCommands(projectTasks);\n    this.registerPortSwitcher();\n    vscode.commands.executeCommand(\n      'setContext',\n      'pioMultiEnvProject',\n      projectEnvs.length > 1\n    );\n  }\n\n  async onDidRequestEnvTasks(name) {\n    if (await this.projectObserver.getLoadedEnvTasks(name)) {\n      return;\n    }\n    await this.projectObserver.loadEnvTasks(name);\n    return this.requestRefresh();\n  }\n\n  toVSCodeTask(projectTask) {\n    const envClone = Object.assign({}, process.env);\n    if (process.env.PLATFORMIO_PATH) {\n      envClone.PATH = process.env.PLATFORMIO_PATH;\n      envClone.Path = process.env.PLATFORMIO_PATH;\n    }\n    const vscodeTask = new vscode.Task(\n      {\n        type: ProjectTaskManager.PROVIDER_TYPE,\n        task: projectTask.id,\n      },\n      vscode.workspace.getWorkspaceFolder(vscode.Uri.file(this.projectDir)),\n      projectTask.id,\n      ProjectTaskManager.PROVIDER_TYPE,\n      new vscode.ProcessExecution(\n        IS_WINDOWS ? 'platformio.exe' : 'platformio',\n        projectTask.getCoreArgs({ port: this._customPort }),\n        {\n          cwd: this.projectDir,\n          env: envClone,\n        }\n      ),\n      '$platformio'\n    );\n    vscodeTask.presentationOptions = {\n      panel: vscode.TaskPanelKind.Dedicated,\n    };\n    if (projectTask.isBuild()) {\n      vscodeTask.group = vscode.TaskGroup.Build;\n    } else if (projectTask.isClean()) {\n      vscodeTask.group = vscode.TaskGroup.Clean;\n    } else if (projectTask.isTest()) {\n      vscodeTask.group = vscode.TaskGroup.Test;\n    }\n    return vscodeTask;\n  }\n\n  runTask(task) {\n    this._restoreOnDidEndTask = undefined;\n    this._tasksToRestore = [];\n    this._autoCloseSerialMonitor(task);\n    // skip MonitorAndUpload task thatwill be added to this._tasksToRestore\n    if (\n      this._tasksToRestore.some((t) => this.isMonitorAndUploadTask(t)) &&\n      this.isMonitorAndUploadTask(task)\n    ) {\n      return;\n    }\n    vscode.commands.executeCommand('workbench.action.tasks.runTask', {\n      type: ProjectTaskManager.PROVIDER_TYPE,\n      task: task.id,\n    });\n  }\n\n  _autoCloseSerialMonitor(task) {\n    const closeMonitorConds = [\n      extension.getConfiguration('autoCloseSerialMonitor'),\n      ['upload', 'test'].some((arg) => task.args.includes(arg)),\n    ];\n    if (!closeMonitorConds.every((value) => value)) {\n      return;\n    }\n    this._restoreOnDidEndTask = task;\n    vscode.tasks.taskExecutions.forEach((event) => {\n      const isMonitorAndUploadTask = this.isMonitorAndUploadTask(event.task);\n      const skipConds = [\n        // skip non-PlatformIO task\n        event.task.definition.type !== ProjectTaskManager.PROVIDER_TYPE,\n        !event.task.execution.args.includes('monitor'),\n        this.areTasksEqual(task, event.task) && !isMonitorAndUploadTask,\n      ];\n      if (skipConds.some((value) => value)) {\n        return;\n      }\n      if (\n        isMonitorAndUploadTask ||\n        ['device', 'monitor'].every((arg) => event.task.execution.args.includes(arg))\n      ) {\n        this._tasksToRestore.push(event.task);\n      }\n      event.terminate();\n    });\n  }\n\n  onDidEndTaskProcess(event) {\n    const skipConds = [\n      !this._restoreOnDidEndTask,\n      event.execution.task.definition.type !== ProjectTaskManager.PROVIDER_TYPE,\n      event.exitCode !== 0 && !this.isMonitorAndUploadTask(event.execution.task),\n      this.areTasksEqual(this._restoreOnDidEndTask, event.execution.task),\n    ];\n    if (skipConds.some((value) => value)) {\n      return;\n    }\n    this._restoreOnDidEndTask = undefined;\n    setTimeout(() => {\n      while (this._tasksToRestore.length) {\n        vscode.tasks.executeTask(this._tasksToRestore.pop());\n      }\n    }, parseInt(extension.getConfiguration('reopenSerialMonitorDelay')));\n  }\n\n  isMonitorAndUploadTask(task) {\n    const args = task.args || task.execution.args;\n    return ['--target', 'upload', 'monitor'].every((arg) => args.includes(arg));\n  }\n\n  areTasksEqual(task1, task2) {\n    if (!task1 || !task2) {\n      return task1 === task2;\n    }\n    const args1 = task1.args || task1.execution.args;\n    const args2 = task2.args || task2.execution.args;\n    return args1 === args2;\n  }\n\n  registerTaskBasedCommands(tasks) {\n    const _runTask = (name) => {\n      const candidates = tasks.filter(\n        (task) =>\n          task.name === name && task.coreEnv === this.projectObserver.getActiveEnvName()\n      );\n      this.runTask(candidates[0]);\n    };\n\n    this.subscriptions.push(\n      vscode.commands.registerCommand('platformio-ide.build', () => _runTask('Build')),\n      vscode.commands.registerCommand('platformio-ide.upload', () =>\n        _runTask('Upload')\n      ),\n      vscode.commands.registerCommand('platformio-ide.test', () => _runTask('Test')),\n      vscode.commands.registerCommand('platformio-ide.clean', () => _runTask('Clean')),\n      vscode.commands.registerCommand('platformio-ide.serialMonitor', () =>\n        _runTask('Monitor')\n      ),\n      vscode.commands.registerCommand('platformio-ide.remoteUpload', () =>\n        _runTask('Remote Upload')\n      )\n    );\n  }\n\n  registerPortSwitcher() {\n    this._sbPortSwitcher = vscode.window.createStatusBarItem(\n      'pio-port-switcher',\n      vscode.StatusBarAlignment.Left,\n      STATUS_BAR_PRIORITY_START\n    );\n    this._sbPortSwitcher.name = 'PlatformIO: Port Switcher';\n    this._sbPortSwitcher.tooltip = 'Set upload/monitor/test port';\n    this._sbPortSwitcher.command = 'platformio-ide.setProjectPort';\n    this.switchPort(this._customPort);\n\n    this.subscriptions.push(\n      this._sbPortSwitcher,\n      vscode.commands.registerCommand('platformio-ide.setProjectPort', () =>\n        this.pickProjectPort()\n      )\n    );\n  }\n\n  async pickProjectPort() {\n    const serialPorts = await listCoreSerialPorts();\n    const pickedItem = await vscode.window.showQuickPick(\n      [\n        { label: 'Auto' },\n        ...serialPorts.map((port) => ({\n          label: port.port,\n          description: [port.description, port.hwid]\n            .filter((value) => !!value)\n            .join(' | '),\n        })),\n        { label: 'Custom...' },\n      ],\n      {\n        matchOnDescription: true,\n      }\n    );\n    if (!pickedItem) {\n      return;\n    }\n    if (pickedItem.label === 'Custom...') {\n      const value = await vscode.window.showInputBox({\n        title: 'Enter custom upload/monitor/test port',\n        placeHolder: 'Examples: COM3, /dev/ttyUSB*, 192.168.0.13, /media/disk',\n      });\n      if (!value) {\n        return;\n      }\n      this.switchPort(value.trim());\n    } else {\n      this.switchPort(pickedItem.label !== 'Auto' ? pickedItem.label : undefined);\n    }\n  }\n\n  switchPort(port = undefined) {\n    updateProjectItemState(this.projectDir, 'customPort', port);\n    this._customPort = port;\n    this._sbPortSwitcher.text = `$(plug) ${\n      this._customPort ? path.basename(this._customPort) : 'Auto'\n    }`;\n    this._sbPortSwitcher.show();\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as pioNodeHelpers from 'platformio-node-helpers';\nimport { disposeSubscriptions } from '../utils';\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport vscode from 'vscode';\n\nexport default class ProjectTestManager {\n  constructor(projectDir) {\n    this.projectDir = projectDir;\n    this.controller = vscode.tests.createTestController(\n      'platformio-tests',\n      'PlatformIO Tests'\n    );\n    this.subscriptions = [this.controller];\n\n    this.controller.refreshHandler = this.refreshHandler.bind(this);\n    this.controller.resolveHandler = this.resolveHandler.bind(this);\n    this.controller.createRunProfile(\n      'Run Tests',\n      vscode.TestRunProfileKind.Run,\n      this.runHandler.bind(this),\n      true\n    );\n  }\n\n  dispose() {\n    disposeSubscriptions(this.subscriptions);\n  }\n\n  async runCoreTestCommand(args) {\n    const jsonOutputPath = path.join(\n      pioNodeHelpers.core.getTmpDir(),\n      `test-list-${Math.round(Math.random() * 100000)}.json`\n    );\n    let output = undefined;\n    let error = new Error();\n    try {\n      const envClone = Object.assign({}, process.env);\n      envClone['PLATFORMIO_FORCE_ANSI'] = 'true';\n      output = await pioNodeHelpers.core.getPIOCommandOutput(\n        ['test', ...args, '--json-output-path', jsonOutputPath],\n        {\n          projectDir: this.projectDir,\n          runInQueue: true,\n          spawnOptions: {\n            env: envClone,\n          },\n        }\n      );\n    } catch (err) {\n      error = err;\n    }\n    try {\n      await fs.access(jsonOutputPath);\n    } catch (err) {\n      throw error;\n    }\n\n    const data = await pioNodeHelpers.misc.loadJSON(jsonOutputPath);\n    await fs.unlink(jsonOutputPath); // cleanup\n    return [data, output || error.toString()];\n  }\n\n  async refreshHandler() {\n    this.controller.items.replace([]); // clear\n    await this.resolveTestSuites();\n  }\n\n  async resolveHandler(test) {\n    if (test) {\n      console.warn('Not Implemented');\n      return;\n    }\n    await this.resolveTestSuites();\n  }\n\n  async resolveTestSuites() {\n    try {\n      const [data] = await this.runCoreTestCommand(['--list-tests']);\n      const envToSuites = data.test_suites.reduce(\n        (result, item) =>\n          result.set(item.env_name, [...(result.get(item.env_name) || []), item]),\n        new Map()\n      );\n      envToSuites.forEach((suites, envName) => {\n        const envSuite = this.controller.createTestItem(`env:${envName}`, envName);\n        envSuite.children.replace(\n          suites.map((suite) =>\n            this.controller.createTestItem(\n              `suite:${envName}/${suite.test_name}`,\n              suite.test_name,\n              suite.test_dir ? vscode.Uri.file(suite.test_dir) : undefined\n            )\n          )\n        );\n        this.controller.items.add(envSuite);\n      });\n    } catch (err) {\n      console.error(err);\n      const item = this.controller.createTestItem(\n        'error',\n        'Error (expand for details)'\n      );\n      item.error = err.toString();\n      this.controller.items.add(item);\n    }\n  }\n\n  extractTestSuites(test) {\n    if (test.id.startsWith('suite:')) {\n      return [test];\n    } else if (test.id.startsWith('case:')) {\n      return [test.parent];\n    } else if (test.id.startsWith('env:')) {\n      return test.children;\n    }\n    return [];\n  }\n\n  async runHandler(request, token) {\n    const run = this.controller.createTestRun(request);\n    const queue = [];\n    const exclude = [];\n\n    if (request.include) {\n      request.include.forEach((test) =>\n        this.extractTestSuites(test).forEach((suite) =>\n          queue.includes(suite) ? undefined : queue.push(suite)\n        )\n      );\n    } else {\n      this.controller.items.forEach((item) =>\n        item.children.forEach((suite) => queue.push(suite))\n      );\n    }\n    if (request.exclude) {\n      request.exclude.forEach((test) =>\n        this.extractTestSuites(test).forEach((suite) => exclude.push(suite))\n      );\n    }\n\n    while (queue.length > 0 && !token.isCancellationRequested) {\n      const suite = queue.pop();\n      if (exclude.includes(suite)) {\n        run.skipped(suite);\n        continue;\n      }\n      await this._runTestSuite(run, suite);\n    }\n    run.end();\n  }\n\n  async _runTestSuite(run, suite) {\n    const envName = suite.parent.label;\n    const testName = suite.label;\n    const startedAt = Date.now();\n    run.started(suite);\n    try {\n      const [data, output] = await this.runCoreTestCommand([\n        '--environment',\n        envName,\n        '--filter',\n        testName,\n      ]);\n      process.chdir(data.project_dir);\n      const result = data.test_suites.find(\n        (item) => item.env_name === envName && item.test_name === testName\n      );\n\n      switch (result.status) {\n        case 'SKIPPED':\n          run.skipped(suite);\n          break;\n\n        case 'ERRORED':\n          run.failed(\n            suite,\n            new vscode.TestMessage(result.test_cases[0].exception),\n            Date.now() - startedAt\n          );\n          break;\n\n        default:\n          this._processTestSuiteResult(run, suite, result, startedAt);\n          break;\n      }\n\n      run.appendOutput(output, undefined, suite);\n    } catch (err) {\n      run.appendOutput(err.toString(), undefined, suite);\n      run.failed(suite, new vscode.TestMessage(err.toString()), Date.now() - startedAt);\n    }\n  }\n\n  async _processTestSuiteResult(run, suite, result, startedAt) {\n    const envName = suite.parent.label;\n    const testName = suite.label;\n    suite.children.replace([]);\n    result.test_cases.forEach((testCase) => {\n      const test = this.controller.createTestItem(\n        `case:${envName}/${testName}/${testCase.name}`,\n        testCase.name,\n        testCase.source\n          ? vscode.Uri.file(path.resolve(testCase.source.file))\n          : undefined\n      );\n      if (testCase.source && testCase.source.line) {\n        test.range = new vscode.Range(\n          testCase.source.line - 1,\n          0,\n          testCase.source.line - 1,\n          0\n        );\n      }\n      suite.children.add(test);\n\n      switch (testCase.status) {\n        case 'SKIPPED':\n          run.skipped(test);\n          break;\n        case 'ERRORED':\n          run.failed(\n            test,\n            new vscode.TestMessage(testCase.exception),\n            Date.now() - startedAt\n          );\n          break;\n        case 'FAILED':\n          run.failed(\n            test,\n            new vscode.TestMessage(testCase.message),\n            Date.now() - startedAt\n          );\n          break;\n        default:\n          run.passed(test, Date.now() - startedAt);\n          break;\n      }\n\n      if (testCase.stdout) {\n        run.appendOutput(\n          testCase.stdout,\n          test.uri ? new vscode.Location(test.uri, test.range) : undefined,\n          test\n        );\n      }\n    });\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as pioNodeHelpers from 'platformio-node-helpers';\nimport * as projectHelpers from './helpers';\n\nimport { disposeSubscriptions, notifyError } from '../utils';\nimport { ProjectConfigLanguageProvider } from './config';\nimport ProjectTaskManager from './tasks';\nimport ProjectTestManager from './tests';\nimport { STATUS_BAR_PRIORITY_START } from '../constants';\nimport { extension } from '../main';\nimport path from 'path';\nimport vscode from 'vscode';\n\nexport default class ProjectManager {\n  constructor() {\n    this._taskManager = undefined;\n    this._sbEnvSwitcher = undefined;\n    this._logOutputChannel = vscode.window.createOutputChannel(\n      'PlatformIO: Project Configuration'\n    );\n\n    this._pool = new pioNodeHelpers.project.ProjectPool({\n      ide: 'vscode',\n      api: {\n        logOutputChannel: this._logOutputChannel,\n        createFileSystemWatcher: vscode.workspace.createFileSystemWatcher,\n        createDirSystemWatcher: (dir) =>\n          vscode.workspace.createFileSystemWatcher(path.join(dir, '*')),\n        withIndexRebuildingProgress: (task) =>\n          vscode.window.withProgress(\n            {\n              location: { viewId: vscode.ProgressLocation.Notification },\n              title: 'PlatformIO: Configuring project',\n              cancellable: true,\n            },\n            async (progress, token) =>\n              await task(\n                (message, increment = undefined) =>\n                  progress.report({\n                    message,\n                    increment: increment,\n                  }),\n                token\n              )\n          ),\n        withTasksLoadingProgress: (task) =>\n          vscode.window.withProgress(\n            {\n              location: { viewId: ProjectTaskManager.TASKS_VIEW_ID },\n            },\n            async () =>\n              await vscode.window.withProgress(\n                {\n                  location: { viewId: vscode.ProgressLocation.Window },\n                  title: 'PlatformIO: Loading tasks...',\n                },\n                task\n              )\n          ),\n        onDidChangeProjectConfig: (projectDir) => {\n          if (this._taskManager && this._taskManager.projectDir === projectDir) {\n            this._taskManager.requestRefresh();\n          }\n          this.saveActiveProjectState();\n        },\n        onDidNotifyError: notifyError.bind(this),\n      },\n      settings: {\n        autoPreloadEnvTasks: extension.getConfiguration('autoPreloadEnvTasks'),\n        autoRebuild: extension.getConfiguration('autoRebuildAutocompleteIndex'),\n      },\n    });\n\n    this.subscriptions = [\n      this._pool,\n      this._logOutputChannel,\n      vscode.window.onDidChangeActiveTextEditor(() => {\n        if (!extension.getConfiguration('activateProjectOnTextEditorChange')) {\n          return;\n        }\n        const projectDir = projectHelpers.getActiveEditorProjectDir();\n        if (projectDir) {\n          this.switchToProject(projectDir);\n        }\n      }),\n      vscode.workspace.onDidChangeWorkspaceFolders(() =>\n        this.switchToProject(this.findActiveProjectDir())\n      ),\n      vscode.commands.registerCommand('platformio-ide.rebuildProjectIndex', () =>\n        this._pool.getActiveObserver().rebuildIndex({ force: true })\n      ),\n      vscode.commands.registerCommand('platformio-ide.refreshProjectTasks', () =>\n        this._taskManager.refresh({ force: true })\n      ),\n      vscode.commands.registerCommand('platformio-ide._runProjectTask', (task) =>\n        this._taskManager.runTask(task)\n      ),\n    ];\n    this.internalSubscriptions = [];\n\n    this.registerEnvSwitcher();\n    // switch to the first project in a workspace on start-up\n    this.switchToProject(this.findActiveProjectDir());\n  }\n\n  dispose() {\n    this.disposeInternals();\n    disposeSubscriptions(this.internalSubscriptions);\n    disposeSubscriptions(this.subscriptions);\n  }\n\n  findActiveProjectDir() {\n    let projectDir = undefined;\n    if (extension.getConfiguration('activateProjectOnTextEditorChange')) {\n      projectDir = projectHelpers.getActiveEditorProjectDir();\n    }\n    return projectDir || this.getSelectedProjectDir();\n  }\n\n  getSelectedProjectDir() {\n    const pioProjectDirs = projectHelpers.getPIOProjectDirs();\n    const currentActiveDir = this._pool.getActiveProjectDir();\n    if (pioProjectDirs.length < 1) {\n      return undefined;\n    }\n    if (\n      currentActiveDir &&\n      pioProjectDirs.find((projectDir) => projectDir === currentActiveDir)\n    ) {\n      return currentActiveDir;\n    }\n    const lastActiveDir = projectHelpers.getLastProjectDir();\n    if (\n      lastActiveDir &&\n      pioProjectDirs.find((projectDir) => projectDir === lastActiveDir)\n    ) {\n      return lastActiveDir;\n    }\n    return pioProjectDirs[0];\n  }\n\n  saveActiveProjectState() {\n    const observer = this._pool.getActiveObserver();\n    if (!observer) {\n      return;\n    }\n    projectHelpers.updateProjectItemState(\n      observer.projectDir,\n      'activeEnv',\n      observer.getActiveEnvName()\n    );\n  }\n\n  async switchToProject(projectDir, options = {}) {\n    if (!projectDir) {\n      console.error('switchProject => Please provide project folder');\n      return;\n    }\n    this._sbEnvSwitcher.text = '$(root-folder) Loading...';\n\n    let currentProjectDir = undefined;\n    let currentEnvName = undefined;\n    if (this._pool.getActiveObserver()) {\n      currentProjectDir = this._pool.getActiveObserver().projectDir;\n      currentEnvName = this._pool.getActiveObserver().getActiveEnvName();\n    }\n    const observer = this._pool.getObserver(projectDir);\n    if ('envName' in options) {\n      await observer.switchProjectEnv(options.envName);\n    } else if (!observer.getActiveEnvName()) {\n      await observer.switchProjectEnv(\n        projectHelpers.getProjectItemState(projectDir, 'activeEnv')\n      );\n    }\n\n    // ignore active project and & env\n    if (\n      !currentProjectDir ||\n      currentProjectDir !== projectDir ||\n      currentEnvName !== observer.getActiveEnvName()\n    ) {\n      disposeSubscriptions(this.internalSubscriptions);\n      this._pool.switch(projectDir);\n      this._taskManager = new ProjectTaskManager(projectDir, observer);\n      this.internalSubscriptions.push(\n        this._taskManager,\n        new ProjectConfigLanguageProvider(projectDir),\n        new ProjectTestManager(projectDir)\n      );\n\n      // open \"platformio.ini\" if no visible editors\n      if (\n        vscode.window.visibleTextEditors.length === 0 &&\n        extension.getConfiguration('autoOpenPlatformIOIniFile')\n      ) {\n        vscode.window.showTextDocument(\n          vscode.Uri.file(path.join(projectDir, 'platformio.ini'))\n        );\n      }\n    }\n\n    this.showSelectedEnv();\n    this.saveActiveProjectState();\n  }\n\n  registerEnvSwitcher() {\n    this._sbEnvSwitcher = vscode.window.createStatusBarItem(\n      'pio-env-switcher',\n      vscode.StatusBarAlignment.Left,\n      STATUS_BAR_PRIORITY_START\n    );\n    this._sbEnvSwitcher.name = 'PlatformIO: Project Environment Switcher';\n    this._sbEnvSwitcher.tooltip = 'Switch PlatformIO Project Environment';\n    this._sbEnvSwitcher.command = 'platformio-ide.switchProjectEnv';\n    this._sbEnvSwitcher.text = '$(root-folder) Loading...';\n    this._sbEnvSwitcher.show();\n\n    this.subscriptions.push(\n      this._sbEnvSwitcher,\n      vscode.commands.registerCommand('platformio-ide.switchProjectEnv', () =>\n        this.pickProjectEnv()\n      )\n    );\n  }\n\n  showSelectedEnv() {\n    const observer = this._pool.getActiveObserver();\n    if (!observer) {\n      return;\n    }\n    const envName = observer.getActiveEnvName()\n      ? `env:${observer.getActiveEnvName()}`\n      : 'Default';\n    this._sbEnvSwitcher.text = `$(root-folder) ${envName} (${path.basename(\n      observer.projectDir\n    )})`;\n  }\n\n  async pickProjectEnv() {\n    const items = [];\n    for (const projectDir of projectHelpers.getPIOProjectDirs()) {\n      const observer = this._pool.getObserver(projectDir);\n      const envs = await observer.getProjectEnvs();\n      if (!envs || !envs.length) {\n        continue;\n      }\n      const shortProjectDir = `${path.basename(\n        path.dirname(projectDir)\n      )}/${path.basename(projectDir)}`;\n      items.push({\n        projectDir,\n        label: 'Default',\n        description: `$(folder) ${shortProjectDir} (\"default_envs\" from \"platformio.ini\")`,\n      });\n      items.push(\n        ...envs.map((item) => ({\n          projectDir,\n          envName: item.name,\n          label: `env:${item.name}`,\n          description: `$(folder) ${shortProjectDir}`,\n        }))\n      );\n    }\n    const pickedItem = await vscode.window.showQuickPick(items, {\n      matchOnDescription: true,\n    });\n    if (!pickedItem) {\n      return;\n    }\n    this.switchToProject(pickedItem.projectDir, { envName: pickedItem.envName });\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as vscode from 'vscode';\n\nclass QuickItem extends vscode.TreeItem {\n  constructor(label, command, args, collapsibleState, children) {\n    super(label, collapsibleState);\n    if (command) {\n      this.command = {\n        title: label,\n        command,\n        arguments: args,\n      };\n    }\n    this.customChildren = children;\n  }\n}\n\nexport default class QuickAccessTreeProvider {\n  getChildren(element) {\n    if (element && element.customChildren) {\n      return element.customChildren;\n    }\n    return [\n      new QuickItem(\n        'PIO Home',\n        undefined,\n        undefined,\n        vscode.TreeItemCollapsibleState.Expanded,\n        [\n          new QuickItem('Open', 'platformio-ide.showHome'),\n          new QuickItem('PIO Account', 'platformio-ide.showHome', ['/account']),\n          new QuickItem('Inspect', 'platformio-ide.showHome', ['/inspect']),\n          new QuickItem('Projects & Configuration', 'platformio-ide.showHome', [\n            '/projects',\n          ]),\n          new QuickItem('Libraries', 'platformio-ide.showHome', ['/libraries']),\n          new QuickItem('Boards', 'platformio-ide.showHome', ['/boards']),\n          new QuickItem('Platforms', 'platformio-ide.showHome', ['/platforms']),\n          new QuickItem('Devices', 'platformio-ide.showHome', ['/device']),\n        ]\n      ),\n      new QuickItem(\n        'Debug',\n        undefined,\n        undefined,\n        vscode.TreeItemCollapsibleState.Expanded,\n        [\n          new QuickItem('Start Debugging', 'platformio-ide.startDebugging'),\n          new QuickItem('Toggle Debug Console', 'workbench.debug.action.toggleRepl'),\n        ]\n      ),\n      new QuickItem(\n        'Miscellaneous',\n        undefined,\n        undefined,\n        vscode.TreeItemCollapsibleState.Expanded,\n        [\n          new QuickItem('PlatformIO Core CLI', 'platformio-ide.openPIOCoreCLI'),\n          new QuickItem('Clone Git Project', 'git.clone'),\n          new QuickItem('New Terminal', 'platformio-ide.newTerminal'),\n          new QuickItem('Upgrade PlatformIO Core', 'platformio-ide.upgradeCore'),\n          new QuickItem('Show Release Notes', 'platformio-ide.showReleaseNotes'),\n        ]\n      ),\n    ];\n  }\n\n  getTreeItem(element) {\n    return element;\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as misc from './misc';\nimport * as pioNodeHelpers from 'platformio-node-helpers';\nimport * as piodebug from 'platformio-vscode-debug';\nimport * as utils from './utils';\n\nimport InstallationManager from './installer/manager';\nimport PIOHome from './home';\nimport PIOReleaseNotes from './release-notes';\nimport PIOTerminal from './terminal';\nimport PIOToolbar from './toolbar';\nimport ProjectManager from './project/manager';\nimport QuickAccessTreeProvider from './views/quick-access-tree';\nimport fs from 'fs-plus';\nimport { getPIOProjectDirs } from './project/helpers';\nimport vscode from 'vscode';\n\nclass PlatformIOVSCodeExtension {\n  constructor() {\n    this.context = undefined;\n    this.pioTerm = undefined;\n    this.pioHome = undefined;\n    this.ProjectManager = undefined;\n    this.subscriptions = [];\n\n    this._enterpriseSettings = undefined;\n  }\n\n  async activate(context) {\n    this.context = context;\n    this.pioHome = new PIOHome();\n    this.pioTerm = new PIOTerminal();\n    this.subscriptions.push(this.pioHome, this.pioTerm, new PIOReleaseNotes());\n    const hasPIOProject = getPIOProjectDirs().length > 0;\n\n    // dump global state\n    console.info(\n      'PlatformIO IDE Global State',\n      context.globalState.keys().reduce((state, key) => {\n        state[key] = context.globalState.get(key);\n        return state;\n      }, {})\n    );\n\n    // temporary workaround for https://github.com/Microsoft/vscode/issues/58348\n    if (\n      !vscode.workspace\n        .getConfiguration('extensions')\n        .has('showRecommendationsOnlyOnDemand')\n    ) {\n      vscode.workspace\n        .getConfiguration('extensions')\n        .update('showRecommendationsOnlyOnDemand', true);\n    }\n\n    this.patchOSEnviron();\n    await this.startInstaller(!hasPIOProject);\n    this.subscriptions.push(this.handleUseDevelopmentPIOCoreConfiguration());\n\n    vscode.commands.executeCommand('setContext', 'pioCoreReady', true);\n    if (typeof this.getEnterpriseSetting('onPIOCoreReady') === 'function') {\n      await this.getEnterpriseSetting('onPIOCoreReady')();\n    }\n\n    this.subscriptions.push(\n      vscode.window.registerTreeDataProvider(\n        'platformio-ide.quickAccess',\n        new QuickAccessTreeProvider()\n      )\n    );\n\n    this.registerGlobalCommands();\n\n    if (!hasPIOProject) {\n      this.subscriptions.push(\n        new PIOToolbar({ filterCommands: ['platformio-ide.showHome'] })\n      );\n      return;\n    }\n\n    vscode.commands.executeCommand('setContext', 'pioProjectReady', true);\n    this.subscriptions.push(\n      new PIOToolbar({\n        ignoreCommands: this.getEnterpriseSetting('ignoreToolbarCommands'),\n      })\n    );\n\n    this.initDebug();\n    this.ProjectManager = new ProjectManager();\n    this.subscriptions.push(this.ProjectManager);\n\n    this.startPIOHome();\n\n    misc.maybeRateExtension();\n    misc.warnAboutConflictedExtensions();\n    this.subscriptions.push(\n      vscode.window.onDidChangeActiveTextEditor((editor) =>\n        misc.warnAboutInoFile(editor)\n      )\n    );\n  }\n\n  getConfiguration(id) {\n    return vscode.workspace.getConfiguration('platformio-ide').get(id);\n  }\n\n  loadEnterpriseSettings() {\n    const ext = vscode.extensions.all.find(\n      (item) =>\n        item.id.startsWith('platformio.') &&\n        item.id !== 'platformio.platformio-ide' &&\n        item.isActive\n    );\n    return ext && ext.exports ? ext.exports.settings : undefined;\n  }\n\n  getEnterpriseSetting(id, defaultValue = undefined) {\n    if (!this._enterpriseSettings) {\n      this._enterpriseSettings = this.loadEnterpriseSettings();\n    }\n    if (this._enterpriseSettings && id in this._enterpriseSettings) {\n      return this._enterpriseSettings[id];\n    }\n    return defaultValue;\n  }\n\n  patchOSEnviron() {\n    const extraVars = {\n      PLATFORMIO_IDE: utils.getIDEVersion(),\n    };\n    // handle HTTP proxy settings\n    const http_proxy = vscode.workspace.getConfiguration('http').get('proxy');\n    if (http_proxy && !process.env.HTTP_PROXY && !process.env.http_proxy) {\n      extraVars['HTTP_PROXY'] = http_proxy;\n    }\n    if (http_proxy && !process.env.HTTPS_PROXY && !process.env.https_proxy) {\n      extraVars['HTTPS_PROXY'] = http_proxy;\n    }\n    if (!vscode.workspace.getConfiguration('http').get('proxyStrictSSL')) {\n      extraVars['PLATFORMIO_SETTING_ENABLE_PROXY_STRICT_SSL'] = 'false';\n    }\n    if (this.getConfiguration('customPyPiIndexUrl')) {\n      extraVars['PIP_INDEX_URL'] = this.getConfiguration('customPyPiIndexUrl');\n    }\n    pioNodeHelpers.proc.patchOSEnviron({\n      caller: 'vscode',\n      extraPath: this.getConfiguration('customPATH'),\n      extraVars,\n    });\n  }\n\n  async startInstaller(disableAutoUpdates) {\n    const im = new InstallationManager(disableAutoUpdates);\n    if (im.locked()) {\n      vscode.window.showInformationMessage(\n        'PlatformIO IDE installation has been suspended, because PlatformIO ' +\n          'IDE Installer is already started in another window.'\n      );\n      return;\n    }\n    const doInstall = await vscode.window.withProgress(\n      {\n        location: vscode.ProgressLocation.Window,\n        title: 'PlatformIO',\n      },\n      async (progress) => {\n        progress.report({\n          message: 'Initializing PlatformIO Core...',\n        });\n        try {\n          return !(await im.check());\n        } catch (err) {}\n        return true;\n      }\n    );\n\n    if (!doInstall) {\n      return;\n    }\n\n    return await vscode.window.withProgress(\n      {\n        location: vscode.ProgressLocation.Notification,\n        title: 'PlatformIO Installer',\n      },\n      async (progress) => {\n        progress.report({\n          message: 'Installing PlatformIO IDE...',\n        });\n        const outputChannel = vscode.window.createOutputChannel(\n          'PlatformIO Installation'\n        );\n        outputChannel.show();\n        outputChannel.appendLine('Installing PlatformIO IDE...');\n        outputChannel.appendLine(\n          'It may take a few minutes depending on your connection speed'\n        );\n        outputChannel.appendLine(\n          'Please do not close this window and do not ' +\n            'open other folders until this process is completed.'\n        );\n        outputChannel.appendLine(\n          '\\nDebugging information is available via VSCode > Help > Toggle Developer Tools > Console.'\n        );\n\n        try {\n          im.lock();\n          await im.install(progress);\n          outputChannel.appendLine('PlatformIO IDE installed successfully.\\n');\n          outputChannel.appendLine('Please restart VSCode.');\n          const action = 'Reload Now';\n          const selected = await vscode.window.showInformationMessage(\n            'PlatformIO IDE has been successfully installed! Please reload window',\n            action\n          );\n          if (selected === action) {\n            vscode.commands.executeCommand('workbench.action.reloadWindow');\n          }\n        } catch (err) {\n          outputChannel.appendLine('Failed to install PlatformIO IDE.');\n          utils.notifyError('Installation Manager', err);\n        } finally {\n          im.unlock();\n        }\n\n        im.destroy();\n        return true;\n      }\n    );\n  }\n\n  async startPIOHome() {\n    if (\n      this.getConfiguration('disablePIOHomeStartup') ||\n      !pioNodeHelpers.home.showAtStartup('vscode')\n    ) {\n      return;\n    }\n    vscode.commands.executeCommand('platformio-ide.showHome');\n  }\n\n  registerGlobalCommands() {\n    this.subscriptions.push(\n      vscode.commands.registerCommand('platformio-ide.showHome', (startUrl) =>\n        this.pioHome.toggle(startUrl)\n      ),\n      vscode.commands.registerCommand('platformio-ide.newTerminal', () =>\n        this.pioTerm.new().show()\n      ),\n      vscode.commands.registerCommand('platformio-ide.openPIOCoreCLI', () =>\n        this.pioTerm.sendText('pio --help')\n      ),\n      vscode.commands.registerCommand('platformio-ide.runPIOCoreCommand', (cmd) =>\n        this.pioTerm.sendText(cmd)\n      ),\n      vscode.commands.registerCommand('platformio-ide.startDebugging', () => {\n        vscode.commands.executeCommand('workbench.view.debug');\n        vscode.commands.executeCommand('workbench.debug.action.toggleRepl');\n        vscode.commands.executeCommand('workbench.action.debug.start');\n      }),\n      vscode.commands.registerCommand('platformio-ide.upgradeCore', () =>\n        this.pioTerm.sendText('pio upgrade')\n      )\n    );\n  }\n\n  initDebug() {\n    piodebug.activate(this.context);\n  }\n\n  handleUseDevelopmentPIOCoreConfiguration() {\n    return vscode.workspace.onDidChangeConfiguration(async (e) => {\n      if (\n        !e.affectsConfiguration('platformio-ide.useDevelopmentPIOCore') ||\n        !this.getConfiguration('useBuiltinPIOCore')\n      ) {\n        return;\n      }\n      const envDir = pioNodeHelpers.core.getEnvDir();\n      if (!envDir || !fs.isDirectorySync(envDir)) {\n        return;\n      }\n      await PIOHome.shutdownAllServers();\n      await pioNodeHelpers.misc.sleep(2000);\n      try {\n        fs.removeSync(envDir);\n      } catch (err) {\n        console.warn(err);\n      }\n      vscode.window.showInformationMessage(\n        'Please restart VSCode to apply the changes.'\n      );\n    });\n  }\n\n  disposeLocalSubscriptions() {\n    vscode.commands.executeCommand('setContext', 'pioCoreReady', false);\n    vscode.commands.executeCommand('setContext', 'pioProjectReady', false);\n    utils.disposeSubscriptions(this.subscriptions);\n  }\n\n  deactivate() {\n    this.disposeLocalSubscriptions();\n  }\n}\n\nexport const extension = new PlatformIOVSCodeExtension();\n\nexport function activate(context) {\n  extension.activate(context);\n  return extension;\n}\n\nexport function deactivate() {\n  extension.deactivate();\n  piodebug.deactivate();\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport { CONFLICTED_EXTENSION_IDS } from './constants';\nimport { extension } from './main';\nimport vscode from 'vscode';\n\nexport async function maybeRateExtension() {\n  const stateKey = 'rate-extension';\n  const askAfterSessionNums = 13;\n  let state = extension.context.globalState.get(stateKey);\n  if (state && state.done) {\n    return;\n  } else if (!state || !state.callCounter) {\n    state = {\n      callCounter: 0,\n      done: false,\n    };\n  }\n\n  state.callCounter += 1;\n  if (state.callCounter < askAfterSessionNums) {\n    extension.context.globalState.update(stateKey, state);\n    return;\n  }\n\n  const selectedItem = await vscode.window.showInformationMessage(\n    'If you enjoy using PlatformIO IDE for VSCode, would you mind taking a moment to rate it? ' +\n      'It will not take more than one minute. Thanks for your support!',\n    { title: 'Rate PlatformIO IDE Extension', isCloseAffordance: false },\n    { title: 'Remind later', isCloseAffordance: false },\n    { title: 'No, Thanks', isCloseAffordance: true }\n  );\n\n  switch (selectedItem ? selectedItem.title : undefined) {\n    case 'Rate PlatformIO IDE Extension':\n      vscode.commands.executeCommand(\n        'vscode.open',\n        vscode.Uri.parse('http://bit.ly/pio-vscode-rate')\n      );\n      state.done = true;\n      break;\n    case 'No, Thanks':\n      state.done = true;\n      break;\n    default:\n      state.callCounter = 0;\n  }\n  extension.context.globalState.update(stateKey, state);\n}\n\nexport async function warnAboutConflictedExtensions() {\n  const conflicted = vscode.extensions.all.filter(\n    (ext) => ext.isActive && CONFLICTED_EXTENSION_IDS.includes(ext.id)\n  );\n  if (conflicted.length === 0) {\n    return;\n  }\n  const selectedItem = await vscode.window.showWarningMessage(\n    `Conflicted extensions with IntelliSense service were detected (${conflicted\n      .map((ext) => ext.packageJSON.displayName || ext.id)\n      .join(', ')}). ` +\n      'Code-completion, linting and navigation will not work properly. ' +\n      'Please disable or uninstall them (Menu > View > Extensions).',\n    { title: 'More details', isCloseAffordance: false },\n    { title: 'Uninstall conflicted', isCloseAffordance: false },\n    { title: 'Remind later', isCloseAffordance: true }\n  );\n  switch (selectedItem ? selectedItem.title : undefined) {\n    case 'More details':\n      vscode.commands.executeCommand(\n        'vscode.open',\n        vscode.Uri.parse('http://bit.ly/pio-vscode-conflicted-extensions')\n      );\n      break;\n    case 'Uninstall conflicted':\n      conflicted.forEach((ext) => {\n        vscode.commands.executeCommand(\n          'workbench.extensions.uninstallExtension',\n          ext.id\n        );\n      });\n      vscode.commands.executeCommand('workbench.action.reloadWindow');\n      break;\n  }\n}\n\nexport async function warnAboutInoFile(editor) {\n  if (!editor || !editor.document || !editor.document.fileName) {\n    return;\n  }\n  if (!editor.document.fileName.endsWith('.ino')) {\n    return;\n  }\n  const stateKey = 'ino-warn-disabled';\n  if (extension.context.globalState.get(stateKey)) {\n    return;\n  }\n\n  const selectedItem = await vscode.window.showWarningMessage(\n    'C/C++ IntelliSense service does not support .INO files. ' +\n      'It might lead to the spurious problems with code completion, linting, and debugging. ' +\n      'Please convert .INO sketch into the valid .CPP file.',\n    { title: 'Show instruction', isCloseAffordance: false },\n    { title: 'Do not show again', isCloseAffordance: false },\n    { title: 'Remind later', isCloseAffordance: true }\n  );\n  switch (selectedItem ? selectedItem.title : undefined) {\n    case 'Show instruction':\n      vscode.commands.executeCommand(\n        'vscode.open',\n        vscode.Uri.parse('https://bit.ly/convert-ino-to-cpp')\n      );\n      break;\n    case 'Do not show again':\n      extension.context.globalState.update(stateKey, 1);\n      break;\n  }\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","IS_WINDOWS","process","platform","startsWith","IS_OSX","CONFLICTED_EXTENSION_IDS","require","disposeSubscriptions","subscriptions","length","pop","dispose","async","notifyError","title","err","description","stack","toString","ghbody","vscode","getIDEVersion","os","reportUrl","pioNodeHelpers","action","includes","substring","console","error","packageJSON","version","listCoreSerialPorts","output","JSON","parse","trim","map","item","undefined","isPIOProjectSync","projectDir","fs","path","getPIOProjectDirs","folder","uri","fsPath","filter","getActiveEditorProjectDir","editor","resource","document","scheme","getProjectItemState","extension","context","globalState","updateProjectItemState","projects","keys","update","PIOHome","constructor","this","_currentPanel","_lastStartUrl","defaultStartUrl","push","disposePanel","bind","static","onPanelDisposed","startUrl","column","webview","html","getWebviewContent","reveal","warn","newPanel","panel","getEnterpriseSetting","enableScripts","retainContextWhenHidden","onDidDispose","iconPath","extensionPath","getLoadingContent","getTheme","colorTheme","toLowerCase","port","getConfiguration","host","onIDECommand","theme","iframeId","start","workspace","command","params","onOpenProjectCommand","onOpenTextDocumentCommand","onGetPIOProjectDirs","ProjectManager","switchToProject","gotoPosition","line","selection","revealRange","PythonPrompt","selectedItem","isCloseAffordance","pythonExecutable","result","status","STATUS_TRY_AGAIN","prompt","placeHolder","validateInput","STATUS_CUSTOMEXE","STATUS_ABORT","InstallationManager","disableAutoUpdates","config","stages","getValue","setValue","onDidStatusChange","pioCoreVersionSpec","useBuiltinPython","useBuiltinPIOCore","useDevelopmentPIOCore","pythonPrompt","predownloadedPackageDir","locked","lock","LOCK_KEY","Date","getTime","unlock","lockTime","parseInt","LOCK_TIMEOUT","stage","check","progress","stageIncrementTotal","shutdownAllServers","install","message","increment","report","destroy","PIOReleaseNotes","toggle","stateKey","logoSrc","asWebviewUri","releaseNotes","readReleaseNotes","changelogPath","contents","encoding","startsAt","indexOf","PIOTerminal","_instance","new","envClone","assign","env","PLATFORMIO_PATH","PATH","Path","name","sendText","text","exitStatus","show","ToolbarButton","tooltip","commands","ToolbarButtonCommands","from","createStatusBarItem","options","priority","PIOToolbar","RUN_BUTTON_COMMANDS_ID","arguments","id","args","rawCommands","Array","isArray","filterCommands","ignoreCommands","refresh","buttons","getButtons","button","some","cmd","forEach","index","sbItem","e","affectsConfiguration","ProjectConfigLanguageProvider","DOCUMENT_SELECTOR","provideHover","position","provideCompletionItems","token","_options","_ports","renderOptionDocs","option","attrs","group","type","multiple","sysenvvar","choices","join","min","max","default","docs","appendCodeblock","appendMarkdown","scope","getScopeAt","getText","split","reverse","SCOPE_PLATFORMIO","SCOPE_ENV","lineNum","lineAt","optionName","getOptions","find","isOptionValueLocation","sepPos","character","word","getWordRangeAtPosition","providePackageHover","rawValue","matches","exec","getOptionAt","pkgOwner","pkgName","pkgUrlParts","encodeURIComponent","qs","URLSearchParams","set","isInline","isCancellationRequested","provideCompletionValues","provideCompletionOptions","documentation","provideCompletionPorts","provideCompletionBaudrates","provideTypedCompletionValues","values","defaultValue","i","preselect","createCustomCompletionValueItem","insertText","sortText","setTimeout","items","detail","hwid","String","fromCharCode","language","ProjectTasksTreeProvider","envs","tasks","activeEnvName","multiEnvProject","getTreeItem","taskToTreeItem","task","treeItem","coreEnv","multienv","label","getChildren","element","getEnvGroupChildren","getEnvChildren","getRootChildren","envName","DEFAULT_ENV_NAME","envTasks","getTaskGroups","candidates","ProjectTaskManager","projectObserver","_sid","Math","random","_refreshTimeout","_restoreOnDidEndTask","_tasksToRestore","_sbPortSwitcher","_customPort","requestRefresh","clearTimeout","AUTO_REFRESH_DELAY","force","resetCache","projectEnvs","getProjectEnvs","projectTasks","getDefaultTasks","getLoadedEnvTasks","taskViewer","TASKS_VIEW_ID","treeDataProvider","getActiveEnvName","showCollapseAll","onDidExpandElement","onDidRequestEnvTasks","PROVIDER_TYPE","provideTasks","toVSCodeTask","resolveTask","event","onDidEndTaskProcess","registerTaskBasedCommands","registerPortSwitcher","loadEnvTasks","projectTask","vscodeTask","getCoreArgs","cwd","presentationOptions","isBuild","isClean","isTest","runTask","_autoCloseSerialMonitor","t","isMonitorAndUploadTask","arg","every","execution","areTasksEqual","terminate","exitCode","task1","task2","_runTask","switchPort","pickProjectPort","serialPorts","pickedItem","matchOnDescription","ProjectTestManager","controller","refreshHandler","resolveHandler","createRunProfile","runHandler","jsonOutputPath","round","Error","runInQueue","spawnOptions","data","replace","resolveTestSuites","test","runCoreTestCommand","test_suites","reduce","env_name","Map","suites","envSuite","createTestItem","children","suite","test_name","test_dir","add","extractTestSuites","parent","request","run","createTestRun","queue","exclude","include","skipped","_runTestSuite","end","testName","startedAt","now","started","chdir","project_dir","failed","test_cases","exception","_processTestSuiteResult","appendOutput","testCase","source","file","range","passed","stdout","_taskManager","_sbEnvSwitcher","_logOutputChannel","_pool","ide","api","logOutputChannel","createFileSystemWatcher","createDirSystemWatcher","dir","withIndexRebuildingProgress","location","viewId","cancellable","withTasksLoadingProgress","onDidChangeProjectConfig","saveActiveProjectState","onDidNotifyError","settings","autoPreloadEnvTasks","autoRebuild","projectHelpers","findActiveProjectDir","getActiveObserver","rebuildIndex","internalSubscriptions","registerEnvSwitcher","disposeInternals","getSelectedProjectDir","pioProjectDirs","currentActiveDir","getActiveProjectDir","lastActiveDir","observer","currentProjectDir","currentEnvName","getObserver","switchProjectEnv","switch","showSelectedEnv","pickProjectEnv","shortProjectDir","QuickItem","collapsibleState","super","customChildren","QuickAccessTreeProvider","pioTerm","pioHome","_enterpriseSettings","hasPIOProject","info","state","has","patchOSEnviron","startInstaller","handleUseDevelopmentPIOCoreConfiguration","registerGlobalCommands","initDebug","startPIOHome","done","callCounter","misc","conflicted","ext","isActive","displayName","fileName","endsWith","loadEnterpriseSettings","extraVars","PLATFORMIO_IDE","utils","http_proxy","HTTP_PROXY","HTTPS_PROXY","https_proxy","caller","extraPath","im","outputChannel","appendLine","piodebug","envDir","disposeLocalSubscriptions","deactivate","activate"],"sourceRoot":""}