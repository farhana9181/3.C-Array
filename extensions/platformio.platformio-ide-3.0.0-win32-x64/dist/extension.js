(()=>{"use strict";var e={n:t=>{var o=t&&t.__esModule?()=>t.default:()=>t;return e.d(o,{a:o}),o},d:(t,o)=>{for(var i in o)e.o(o,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:o[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{activate:()=>q,deactivate:()=>X,extension:()=>Y});const o=process.platform.startsWith("win"),i="darwin"==process.platform,n=["llvm-vs-code-extensions.vscode-clangd","vsciot-vscode.vscode-arduino","vscode-openapi"],s=require("vscode");var r=e.n(s);const a=require("platformio-node-helpers"),c=require("platformio-vscode-debug"),l=require("os");var d=e.n(l);function m(e){for(;e.length;)e.pop().dispose()}async function p(e,t){const o=t.stack||t.toString(),i=`# Description of problem\n  Leave a comment...\n\n  BEFORE SUBMITTING, PLEASE SEARCH FOR DUPLICATES IN\n  - https://github.com/platformio/platformio-vscode-ide/issues?q=is%3Aissue+\n\n  # Configuration\n\n  VSCode: ${r().version}\n  PIO IDE: v${h()}\n  System: ${d().type()}, ${d().release()}, ${d().arch()}\n\n  # Exception\n  \`\`\`\n  ${o}\n  \`\`\`\n  `,n=a.misc.getErrorReportUrl(e,i);let s="Report a problem";n.includes("issues/new")||(s="Check available solutions"),await r().window.showErrorMessage(o.substring(0,700)+"...",s)===s&&r().commands.executeCommand("vscode.open",r().Uri.parse(n)),console.error(t)}function h(){return r().extensions.getExtension("platformio.platformio-ide").packageJSON.version}async function u(){const e=await a.core.getCorePythonCommandOutput(["-c","\nimport json\nfrom platformio.public import list_serial_ports\n\nprint(json.dumps(list_serial_ports()))\n    "]);return JSON.parse(e.trim()).map((e=>{for(const t of["description","hwid"])"n/a"===e[t]&&(e[t]=void 0);return e}))}const f=require("fs");var g=e.n(f);const w=require("path");var v,P,b=e.n(w);function C(e){try{return g().accessSync(b().join(e,"platformio.ini")),!0}catch(e){}return!1}function T(){return(r().workspace.workspaceFolders||[]).map((e=>e.uri.fsPath)).filter((e=>C(e)))}function S(){if(T().length<1)return;const e=r().window.activeTextEditor;if(!e)return;const t=e.document.uri;if("file"!==t.scheme)return;const o=r().workspace.getWorkspaceFolder(t);return o&&C(o.uri.fsPath)?o.uri.fsPath:void 0}function y(e,t){return(Y.context.globalState.get("projects",{})[e]||{})[t]}function E(e,t,o){const i=Y.context.globalState.get("projects",{});i[e]||(i[e]={}),i[e][t]=o;for(const e of Object.keys(i))C(e)||delete i[e];Y.context.globalState.update("projects",i),Y.context.globalState.update("lastProjectDir",e)}class I{constructor(){this.subscriptions=[],this._currentPanel=void 0,this._lastStartUrl=I.defaultStartUrl,this.subscriptions.push(r().workspace.onDidChangeWorkspaceFolders(this.disposePanel.bind(this)))}static async shutdownAllServers(){await a.home.shutdownServer(),await a.home.shutdownAllServers()}onPanelDisposed(){this._currentPanel=void 0}disposePanel(){this._currentPanel&&(this._currentPanel.dispose(),this._currentPanel=void 0)}dispose(){a.home.shutdownServer(),this.disposePanel(),m(this.subscriptions)}async toggle(e=I.defaultStartUrl){const t=r().window.activeTextEditor?r().window.activeTextEditor.viewColumn:void 0;try{if(this._currentPanel)return this._lastStartUrl!==e&&(this._currentPanel.webview.html=await this.getWebviewContent(e)),this._currentPanel.reveal(t)}catch(e){console.warn(e)}this._currentPanel=await this.newPanel(e)}async newPanel(e){const t=r().window.createWebviewPanel("pioHome",Y.getEnterpriseSetting("pioHomeTitle","PIO Home"),r().ViewColumn.One,{enableScripts:!0,retainContextWhenHidden:!0});this.subscriptions.push(t.onDidDispose(this.onPanelDisposed.bind(this))),t.iconPath=r().Uri.file(b().join(Y.context.extensionPath,"assets","images","platformio-mini-logo.svg")),t.webview.html=this.getLoadingContent();try{t.webview.html=await this.getWebviewContent(e)}catch(e){e.toString().includes("Webview is disposed")||p("Start PIO Home Server",e)}return t}getTheme(){return((r().workspace.getConfiguration("workbench")||{}).colorTheme||"").toLowerCase().includes("light")?"light":"dark"}getLoadingContent(){return`<!DOCTYPE html>\n    <html lang="en">\n    <body style="background-color: ${"light"===this.getTheme()?"#FFF":"#1E1E1E"}">\n      <div style="padding: 15px;">Loading...</div>\n    </body>\n    </html>`}async getWebviewContent(e){this._lastStartUrl=e,await a.home.ensureServerStarted({port:Y.getConfiguration("pioHomeServerHttpPort"),host:Y.getConfiguration("pioHomeServerHttpHost"),onIDECommand:await this.onIDECommand.bind(this)});const t=this.getTheme(),o=`pioHomeIFrame-${r().env.sessionId}`;return`<!DOCTYPE html>\n      <html lang="en">\n      <head>${i?`\n<script>\n  for (const command of ['selectAll', 'copy', 'paste', 'cut', 'undo', 'redo']) {\n    document.addEventListener(command, (e) => {\n      document.getElementById('${o}').contentWindow.postMessage({'command': 'execCommand', 'data': command}, '*');\n    });\n  }\n  window.addEventListener('message', (e) => {\n    if (e.data.command === 'kbd-event') {\n      window.dispatchEvent(new KeyboardEvent('keydown', e.data.data));\n    }\n  });\n<\/script>\n  `:""}</head>\n      <body style="margin: 0; padding: 0; height: 100%; overflow: hidden; background-color: ${"light"===t?"#FFF":"#1E1E1E"}">\n        <iframe id="${o}" src="${a.home.getFrontendUrl({start:e,theme:t,workspace:Y.getEnterpriseSetting("defaultPIOHomeWorkspace")})}"\n          width="100%"\n          height="100%"\n          frameborder="0"\n          style="border: 0; left: 0; right: 0; bottom: 0; top: 0; position:absolute;" />\n      </body>\n      </html>\n    `}async onIDECommand(e,t){switch(e){case"open_project":return this.onOpenProjectCommand(t);case"open_text_document":return await this.onOpenTextDocumentCommand(t);case"get_pio_project_dirs":return this.onGetPIOProjectDirs()}}onOpenProjectCommand(e){return Y.ProjectManager&&(E(r().Uri.file(e).fsPath,"activeEnv",void 0),Y.ProjectManager.switchToProject(r().Uri.file(e).fsPath)),this.disposePanel(),r().workspace.workspaceFolders?r().workspace.updateWorkspaceFolders(r().workspace.workspaceFolders.length,null,{uri:r().Uri.file(e)}):r().commands.executeCommand("vscode.openFolder",r().Uri.file(e)),r().commands.executeCommand("workbench.view.explorer"),!0}async onOpenTextDocumentCommand(e){const t=await r().window.showTextDocument(r().Uri.file(e.path)),o=new(r().Position)((e.line||1)-1,(e.column||1)-1);return t.selection=new(r().Selection)(o,o),t.revealRange(new(r().Range)(o,o),r().TextEditorRevealType.InCenter),!0}onGetPIOProjectDirs(){return T()}}v=I,(P=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var o=e[Symbol.toPrimitive];if(void 0!==o){var i=o.call(e,"string");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(P="defaultStartUrl"))in v?Object.defineProperty(v,P,{value:"/",enumerable:!0,configurable:!0,writable:!0}):v[P]="/";const O=require("fs-plus");var _=e.n(O);function k(e,t,o){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var o=e[Symbol.toPrimitive];if(void 0!==o){var i=o.call(e,"string");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}class x{constructor(){k(this,"STATUS_TRY_AGAIN",0),k(this,"STATUS_ABORT",1),k(this,"STATUS_CUSTOMEXE",2)}async prompt(){const e=await r().window.showInformationMessage("PlatformIO: Can not find working Python 3.6+ Interpreter. Please install the latest Python 3 and restart VSCode",{title:"Install Python",isCloseAffordance:!1},{title:"I have Python",isCloseAffordance:!1},{title:"Try again",isCloseAffordance:!1},{title:"Abort PlatformIO IDE Installation",isCloseAffordance:!0});let t,o={status:this.STATUS_TRY_AGAIN};switch(e?e.title:void 0){case"Install Python":r().commands.executeCommand("vscode.open",r().Uri.parse("https://docs.platformio.org/en/latest/faq/install-python.html"));break;case"I have Python":t=await r().window.showInputBox({prompt:"Please specify a full path to Python executable file",placeHolder:"Full path to python/python.exe",validateInput:e=>_().isFileSync(e)?null:"Invalid path to Python Interpreter"}),t&&(o={status:this.STATUS_CUSTOMEXE,pythonExecutable:t});break;case"Abort PlatformIO IDE Installation":o={status:this.STATUS_ABORT}}return o}}function D(e,t,o){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var o=e[Symbol.toPrimitive];if(void 0!==o){var i=o.call(e,"string");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}class j{constructor(e=!1){D(this,"LOCK_TIMEOUT",6e4),D(this,"LOCK_KEY","installer-lock");const t=r().workspace.getConfiguration("platformio-ide");this.stages=[new a.installer.PlatformIOCoreStage({getValue:e=>Y.context.globalState.get(e),setValue:(e,t)=>Y.context.globalState.update(e,t)},this.onDidStatusChange.bind(this),{pioCoreVersionSpec:">=6",useBuiltinPython:t.get("useBuiltinPython"),useBuiltinPIOCore:t.get("useBuiltinPIOCore"),useDevelopmentPIOCore:t.get("useDevelopmentPIOCore"),pythonPrompt:new x,disableAutoUpdates:e,predownloadedPackageDir:b().join(Y.context.extensionPath,"assets","predownloaded")})]}onDidStatusChange(){this.locked()&&this.lock()}lock(){return Y.context.globalState.update(this.LOCK_KEY,(new Date).getTime())}unlock(){return Y.context.globalState.update(this.LOCK_KEY,void 0)}locked(){const e=Y.context.globalState.get(this.LOCK_KEY);return!!e&&(new Date).getTime()-parseInt(e)<=this.LOCK_TIMEOUT}async check(){let e=!0;for(const t of this.stages)try{await t.check()||(e=!1)}catch(t){e=!1,console.warn(t)}return e}async install(e){const t=100/this.stages.length;await I.shutdownAllServers();for(const o of this.stages)await o.install(((o,i)=>{e.report({message:o,increment:t*(i/100)})}));e.report({message:"Finished! Please restart VSCode.",increment:100})}destroy(){return this.stages.map((e=>e.destroy()))}}class A{constructor(){this.version=Y.context.extension.packageJSON.version,this._currentPanel=void 0,this.subscriptions=[r().commands.registerCommand("platformio-ide.showReleaseNotes",(()=>this.toggle()))];const e="showedReleaseNotesFor";Y.context.globalState.get(e)!==this.version&&(Y.context.globalState.update(e,this.version),this.toggle())}dispose(){m(this.subscriptions)}async toggle(){const e=r().window.activeTextEditor?r().window.activeTextEditor.viewColumn:void 0;try{if(this._currentPanel)return this._currentPanel.webview.html=await this.getWebviewContent(),this._currentPanel.reveal(e)}catch(e){console.warn(e)}this._currentPanel=await this.newPanel()}async newPanel(){const e=r().window.createWebviewPanel("pioReleaseNotes","PlatformIO IDE: Release Notes",r().ViewColumn.One,{enableScripts:!0,retainContextWhenHidden:!0});e.iconPath=r().Uri.file(b().join(Y.context.extensionPath,"assets","images","platformio-mini-logo.svg")),e.onDidDispose((()=>this._currentPanel=void 0),void 0,this.subscriptions);const t=e.webview.asWebviewUri(r().Uri.file(b().join(Y.context.extensionPath,"assets","images","platformio-logo.png")));return e.webview.html=await this.getWebviewContent(t),e}async getWebviewContent(e){const t=await this.readReleaseNotes();return`\n<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <title>PlatformIO IDE: Release Notes</title>\n  <style>ul { padding-top: 5px; } li { padding-bottom: 4px; }</style>\n</head>\n<body>\n  <table border="0">\n  <tr>\n    <td><img src="${e}" width="28px" height="28px"></td>\n    <td style="padding-left: 10px"><h1>PlatformIO IDE Release Notes</h1></td>\n  </tr>\n  </table>\n  <div>\n    Welcome to the ${this.version} release of PlatformIO IDE.\n    There are many updates in this version that we hope you'll like.\n  </div>\n  <p>\n    <b>Release History</b>: Want to read release notes for the previous versions?\n    Please visit <a href="https://github.com/platformio/platformio-vscode-ide/blob/develop/CHANGELOG.md">PlatformIO IDE Changelog</a>\n    for more detailed information.\n  </p>\n  <p id="content">Loading...</p>\n  <h2>Stay in touch with us</h2>\n  <p>\n    Please follow us on <a href="https://www.linkedin.com/company/platformio">LinkedIn</a> and Twitter <a href="https://twitter.com/PlatformIO_Org">@PlatformIO_Org]</a>\n    to keep up to date with the latest news, articles and tips!\n  </p>\n  <hr />\n  <p>\n    <b>PlatformIO Core</b>: If you would like to read the PlatformIO Core release notes,\n    go to the <a href="https://docs.platformio.org/en/latest/core/history.html">Release Notes</a> on <a href="https://docs.platformio.org/">docs.platformio.org</a>).\n  </p>\n  <textarea id="pioRNMarkdown" hidden="hidden">${t}</textarea>\n  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"><\/script>\n  <script>\n    document.getElementById('content').innerHTML =\n      marked.parse(document.getElementById('pioRNMarkdown').value);\n  <\/script>\n</body>\n</html>`}async readReleaseNotes(){const e=b().join(Y.context.extensionPath,"CHANGELOG.md");try{const t=await f.promises.readFile(e,{encoding:"utf-8"}),o=t.indexOf("\n## ");return t.substring(o,t.indexOf("\n## ",o+3))}catch(e){return e.toString()}}}class R{constructor(){this._instance=void 0}new(){const e=Object.assign({},process.env);return process.env.PLATFORMIO_PATH&&(e.PATH=process.env.PLATFORMIO_PATH,e.Path=process.env.PLATFORMIO_PATH),r().window.createTerminal({name:"PlatformIO CLI",env:e})}sendText(e){this._instance&&void 0===this._instance.exitStatus||(this._instance=this.new()),this._instance.sendText(e),this._instance.show()}dispose(){this._instance&&this._instance.dispose(),this._instance=void 0}}class M{constructor(e,t,o){this.text=e,this.tooltip=t,this.commands=N.from(o)}createStatusBarItem(e={priority:0}){const t=r().window.createStatusBarItem("pio-toolbar",r().StatusBarAlignment.Left,10+e.priority+1);return t.name="PlatformIO: Toolbar",t.text=this.text,t.tooltip=this.tooltip,t.command={title:this.tooltip,command:L.RUN_BUTTON_COMMANDS_ID,arguments:[this]},t}}class N{constructor(e,t){this.id=e,this.args=t}static from(e){return e?(Array.isArray(e)||(e=[e]),e.map((e=>"object"==typeof e?new N(e.id,e.args):new N(e)))):[]}}class L{constructor(e={filterCommands:void 0,ignoreCommands:void 0}){this.options=e,this.subscriptions=[],this.show()}dispose(){m(this.subscriptions)}static getButtons(){return(Y.getConfiguration("toolbar")||[]).map((e=>new M(e.text,e.tooltip,N.from(e.commands))))}show(){this.refresh()}refresh(){this.dispose();const e=L.getButtons().filter((e=>(!this.options.filterCommands||e.commands.some((e=>this.options.filterCommands.includes(e.id))))&&(!this.options.ignoreCommands||!e.commands.some((e=>this.options.ignoreCommands.includes(e.id))))));e.forEach(((t,o)=>{const i=t.createStatusBarItem({priority:e.length-o});i.show(),this.subscriptions.push(i)})),this.subscriptions.push(r().workspace.onDidChangeConfiguration((e=>e.affectsConfiguration("platformio-ide.toolbar")?this.refresh():void 0)),r().commands.registerCommand(L.RUN_BUTTON_COMMANDS_ID,(async e=>{for(const t of e.commands){const e=t.args||[];await r().commands.executeCommand(t.id,...Array.isArray(e)?e:[e])}})))}}function U(e,t,o){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var o=e[Symbol.toPrimitive];if(void 0!==o){var i=o.call(e,"string");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}!function(e,t,o){(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var o=e[Symbol.toPrimitive];if(void 0!==o){var i=o.call(e,"string");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o}(L,"RUN_BUTTON_COMMANDS_ID","platformio-ide.runToolbarButtonCommand");class H{constructor(e){U(this,"SCOPE_PLATFORMIO","platformio"),U(this,"SCOPE_ENV","env"),this.projectDir=e,this.subscriptions=[r().languages.registerHoverProvider(H.DOCUMENT_SELECTOR,{provideHover:async(e,t)=>await this.provideHover(e,t)}),r().languages.registerCompletionItemProvider(H.DOCUMENT_SELECTOR,{provideCompletionItems:async(e,t,o,i)=>await this.provideCompletionItems(e,t,o,i)})],this._options=void 0,this._ports=void 0}dispose(){m(this.subscriptions)}async getOptions(){if(this._options)return this._options;const e=await a.core.getCorePythonCommandOutput(["-c","\nimport json\nfrom platformio.public import get_config_options_schema\n\nprint(json.dumps(get_config_options_schema()))\n  "],{projectDir:this.projectDir});return this._options=JSON.parse(e.trim()),this._options}renderOptionDocs(e){const t=[["Name",e.name],["Group",e.group],["Type",e.type],["Multiple",e.multiple?"yes":"no"]];if(e.sysenvvar&&t.push(["EnvironmentVariable",e.sysenvvar]),"choice"===e.type&&t.push(["Choices",e.choices.join(", ")]),void 0!==e.min&&t.push(["Minimum",e.min]),void 0!==e.max&&t.push(["Maximum",e.max]),null!==e.default||"boolean"===e.type){let o=e.default;"boolean"===e.type?o=e.default?"yes":"no":e.multiple&&Array.isArray(e.default)&&(o=e.default.join(", ")),t.push(["Default",o])}const o=new(r().MarkdownString);return o.appendCodeblock(t.map((([e,t])=>`${e} = ${t}`)).join("\n"),"ini"),o.appendMarkdown(`\n${e.description}\n\n[View documentation](https://docs.platformio.org/en/latest/projectconf/sections/${e.scope}/options/${e.group}/${e.name}.html?utm_source=vscode&utm_medium=completion)\n`),o}getScopeAt(e,t){const o=e.getText(new(r().Range)(new(r().Position)(0,0),t));for(const e of o.split("\n").reverse()){if(e.startsWith("[platformio]"))return this.SCOPE_PLATFORMIO;if(e.startsWith("[env]")||e.startsWith("[env:"))return this.SCOPE_ENV}}async getOptionAt(e,t){for(let o=t.line;o>0;o--){const t=e.lineAt(o).text;if(t.startsWith(" ")||t.startsWith("\t"))continue;const i=t.split("=")[0].trim();return(await this.getOptions()).find((e=>e.name===i))}}isOptionValueLocation(e,t){const o=e.lineAt(t.line).text,i=o.indexOf("=");return o.startsWith(" ")||o.startsWith("\t")||i>0&&t.character>i}async provideHover(e,t){const o=e.getText(e.getWordRangeAtPosition(t)),i=(await this.getOptions()).find((e=>e.name===o));return i?new(r().Hover)(this.renderOptionDocs(i)):this.providePackageHover(e,t)}async providePackageHover(e,t){const o=e.lineAt(t.line).text;let i;if(o.startsWith(" ")||o.startsWith("\t")?i=o:o.includes("=")&&(i=o.split("=",2)[1]),!i)return;const n=/^(([a-z\d_\-]+)\/)?([a-z\d\_\- ]+)/i.exec(i.trim());if(!n)return;const s=await this.getOptionAt(e,t);if(!["platform","lib_deps"].includes(s.name))return;const a=n[2],c=n[3],l=["https://registry.platformio.org"];if(a)l.push("platform"===s.name?"platforms":"libraries"),l.push(a.trim(),encodeURIComponent(c.trim()));else{const e=new URLSearchParams;e.set("t",s.group),e.set("q",`name:"${c.trim()}"`),l.push(`search?${e.toString()}`)}return new(r().Hover)(new(r().MarkdownString)(`[Open in PlatformIO Registry](${l.join("/")})`))}async provideCompletionItems(e,t,o,i,n=!1){if(!o.isCancellationRequested)return await(this.isOptionValueLocation(e,t)?this.provideCompletionValues(e,t,n):this.provideCompletionOptions(e,t,n))}async provideCompletionOptions(e,t,o=!1){const i=this.getScopeAt(e,t);if(i)return(await this.getOptions()).filter((e=>e.scope===i)).map((e=>{if(o)return new(r().InlineCompletionItem)(e.name);const t=new(r().CompletionItem)(e.name,r().CompletionItemKind.Field);return t.documentation=this.renderOptionDocs(e),t}))}async provideCompletionValues(e,t){const o=await this.getOptionAt(e,t);if(o){switch(o.name){case"upload_port":case"monitor_port":case"test_port":return await this.provideCompletionPorts();case"upload_speed":case"monitor_speed":case"test_speed":return await this.provideCompletionBaudrates(o)}return this.provideTypedCompletionValues(o)}}async provideTypedCompletionValues(e){const t=[];let o=e.default;switch(e.type){case"boolean":t.push("yes","no"),o=e.default?"yes":"no";break;case"choice":e.choices.forEach((e=>t.push(e)));break;case"integer range":for(let o=e.min;o<=e.max;o++)t.push(o)}return t.map((e=>{const t=new(r().CompletionItem)(e.toString(),r().CompletionItemKind.EnumMember);return t.preselect=o===e,t}))}createCustomCompletionValueItem(){const e=new(r().CompletionItem)("Custom",r().CompletionItemKind.Value);return e.insertText="",e.sortText="Z",e}async provideCompletionPorts(){this._ports||(this._ports=await u(),setTimeout((()=>this._ports=void 0),3e3));const e=(this._ports||[]).map((e=>{const t=new(r().CompletionItem)(e.port,r().CompletionItemKind.Value);return t.detail=e.description,t.documentation=e.hwid,t}));return e.push(this.createCustomCompletionValueItem()),e}async provideCompletionBaudrates(e){const t=[600,1200,2400,4800,9600,14400,19200,28800,38400,57600,115200,230400].map(((t,o)=>{const i=new(r().CompletionItem)(t.toString(),r().CompletionItemKind.Value);return i.sortText=String.fromCharCode(o+65),i.preselect=e.default===t,i}));return t.push(this.createCustomCompletionValueItem()),t}}U(H,"DOCUMENT_SELECTOR",{language:"ini"});class ${constructor(e,t,o,i){this.id=e,this.envs=t,this.tasks=o,this.activeEnvName=i,this.multiEnvProject=this.envs.length>1}getTreeItem(e){return e instanceof s.TreeItem?e:this.taskToTreeItem(e)}taskToTreeItem(e){const t=new s.TreeItem(e.name);return t.iconPath=new s.ThemeIcon("circle-outline"),t.tooltip=e.title,t.command={title:e.title,command:"platformio-ide._runProjectTask",arguments:[e]},!e.coreEnv&&e.multienv&&this.multiEnvProject&&(t.label+=" All"),t}getChildren(e){return e&&e.group?this.getEnvGroupChildren(e.env,e.group):e?this.getEnvChildren(e.env):this.getRootChildren()}getRootChildren(){const e=[];for(const t of[void 0,...this.envs.map((e=>e.name))]){const o=new s.TreeItem(t||$.DEFAULT_ENV_NAME,!t||t!==this.activeEnvName&&this.multiEnvProject?s.TreeItemCollapsibleState.Collapsed:s.TreeItemCollapsibleState.Expanded);o.id=`${this.id}-${t}`,o.env=t,o.iconPath=new s.ThemeIcon("root-folder"),e.push(o)}return e}getEnvGroupChildren(e,t){return this.tasks.filter((o=>o.coreEnv===e&&o.group===t))}getEnvChildren(e){const t=this.tasks.filter((t=>t.coreEnv===e));if(!t.length)return[new s.TreeItem("Loading...")];const o=t.filter((e=>!e.group));for(const i of this.getTaskGroups(t)){const t=new s.TreeItem(i,["General","Platform"].includes(i)?s.TreeItemCollapsibleState.Expanded:s.TreeItemCollapsibleState.Collapsed);t.env=e,t.group=i,t.iconPath=s.ThemeIcon.Folder,o.push(t)}return o}getTaskGroups(e){const t=["General"],o=e.filter((e=>e.group)).map((e=>e.group));o.includes("Platform")&&t.push("Platform");for(const e of o)t.includes(e)||t.push(e);return t}}function W(e,t,o){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var o=e[Symbol.toPrimitive];if(void 0!==o){var i=o.call(e,"string");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}!function(e,t,o){(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var o=e[Symbol.toPrimitive];if(void 0!==o){var i=o.call(e,"string");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o}($,"DEFAULT_ENV_NAME","Default");class F{constructor(e,t){this.projectDir=e,this.projectObserver=t,this.subscriptions=[],this._sid=Math.random(),this._refreshTimeout=void 0,this._restoreOnDidEndTask=void 0,this._tasksToRestore=[],this._sbPortSwitcher=void 0,this._customPort=y(e,"customPort"),this.refresh()}dispose(){m(this.subscriptions)}requestRefresh(){this._refreshTimeout&&clearTimeout(this._refreshTimeout),this._refreshTimeout=setTimeout(this.refresh.bind(this),F.AUTO_REFRESH_DELAY)}async refresh({force:e=!1}={}){this.dispose(),e&&(this.projectObserver.resetCache(),this._sid=Math.random());const t=await this.projectObserver.getProjectEnvs(),o=[...await this.projectObserver.getDefaultTasks()];for(const e of t)o.push(...await this.projectObserver.getLoadedEnvTasks(e.name)||[]);const i=r().window.createTreeView(F.TASKS_VIEW_ID,{treeDataProvider:new $(this._sid,t,o,this.projectObserver.getActiveEnvName()),showCollapseAll:!0});this.subscriptions.push(i,i.onDidExpandElement((async({element:e})=>{e.env&&await this.onDidRequestEnvTasks(e.env)})),r().tasks.registerTaskProvider(F.PROVIDER_TYPE,{provideTasks:()=>o.map((e=>this.toVSCodeTask(e))),resolveTask:()=>{}}),r().tasks.onDidEndTaskProcess((e=>this.onDidEndTaskProcess(e)))),this.registerTaskBasedCommands(o),this.registerPortSwitcher(),r().commands.executeCommand("setContext","pioMultiEnvProject",t.length>1)}async onDidRequestEnvTasks(e){if(!await this.projectObserver.getLoadedEnvTasks(e))return await this.projectObserver.loadEnvTasks(e),this.requestRefresh()}toVSCodeTask(e){const t=Object.assign({},process.env);process.env.PLATFORMIO_PATH&&(t.PATH=process.env.PLATFORMIO_PATH,t.Path=process.env.PLATFORMIO_PATH);const i=new(r().Task)({type:F.PROVIDER_TYPE,task:e.id},r().workspace.getWorkspaceFolder(r().Uri.file(this.projectDir)),e.id,F.PROVIDER_TYPE,new(r().ProcessExecution)(o?"platformio.exe":"platformio",e.getCoreArgs({port:this._customPort}),{cwd:this.projectDir,env:t}),"$platformio");return i.presentationOptions={panel:r().TaskPanelKind.Dedicated},e.isBuild()?i.group=r().TaskGroup.Build:e.isClean()?i.group=r().TaskGroup.Clean:e.isTest()&&(i.group=r().TaskGroup.Test),i}runTask(e){this._restoreOnDidEndTask=void 0,this._tasksToRestore=[],this._autoCloseSerialMonitor(e),this._tasksToRestore.some((e=>this.isMonitorAndUploadTask(e)))&&this.isMonitorAndUploadTask(e)||r().commands.executeCommand("workbench.action.tasks.runTask",{type:F.PROVIDER_TYPE,task:e.id})}_autoCloseSerialMonitor(e){[Y.getConfiguration("autoCloseSerialMonitor"),["upload","test"].some((t=>e.args.includes(t)))].every((e=>e))&&(this._restoreOnDidEndTask=e,r().tasks.taskExecutions.forEach((t=>{const o=this.isMonitorAndUploadTask(t.task);[t.task.definition.type!==F.PROVIDER_TYPE,!t.task.execution.args.includes("monitor"),this.areTasksEqual(e,t.task)&&!o].some((e=>e))||((o||["device","monitor"].every((e=>t.task.execution.args.includes(e))))&&this._tasksToRestore.push(t.task),t.terminate())})))}onDidEndTaskProcess(e){[!this._restoreOnDidEndTask,e.execution.task.definition.type!==F.PROVIDER_TYPE,0!==e.exitCode&&!this.isMonitorAndUploadTask(e.execution.task),this.areTasksEqual(this._restoreOnDidEndTask,e.execution.task)].some((e=>e))||(this._restoreOnDidEndTask=void 0,setTimeout((()=>{for(;this._tasksToRestore.length;)r().tasks.executeTask(this._tasksToRestore.pop())}),parseInt(Y.getConfiguration("reopenSerialMonitorDelay"))))}isMonitorAndUploadTask(e){const t=e.args||e.execution.args;return["--target","upload","monitor"].every((e=>t.includes(e)))}areTasksEqual(e,t){return e&&t?(e.args||e.execution.args)===(t.args||t.execution.args):e===t}registerTaskBasedCommands(e){const t=t=>{const o=e.filter((e=>e.name===t&&e.coreEnv===this.projectObserver.getActiveEnvName()));this.runTask(o[0])};this.subscriptions.push(r().commands.registerCommand("platformio-ide.build",(()=>t("Build"))),r().commands.registerCommand("platformio-ide.upload",(()=>t("Upload"))),r().commands.registerCommand("platformio-ide.test",(()=>t("Test"))),r().commands.registerCommand("platformio-ide.clean",(()=>t("Clean"))),r().commands.registerCommand("platformio-ide.serialMonitor",(()=>t("Monitor"))),r().commands.registerCommand("platformio-ide.remoteUpload",(()=>t("Remote Upload"))))}registerPortSwitcher(){this._sbPortSwitcher=r().window.createStatusBarItem("pio-port-switcher",r().StatusBarAlignment.Left,10),this._sbPortSwitcher.name="PlatformIO: Port Switcher",this._sbPortSwitcher.tooltip="Set upload/monitor/test port",this._sbPortSwitcher.command="platformio-ide.setProjectPort",this.switchPort(this._customPort),this.subscriptions.push(this._sbPortSwitcher,r().commands.registerCommand("platformio-ide.setProjectPort",(()=>this.pickProjectPort())))}async pickProjectPort(){const e=await u(),t=await r().window.showQuickPick([{label:"Auto"},...e.map((e=>({label:e.port,description:[e.description,e.hwid].filter((e=>!!e)).join(" | ")}))),{label:"Custom..."}],{matchOnDescription:!0});if(t)if("Custom..."===t.label){const e=await r().window.showInputBox({title:"Enter custom upload/monitor/test port",placeHolder:"Examples: COM3, /dev/ttyUSB*, 192.168.0.13, /media/disk"});if(!e)return;this.switchPort(e.trim())}else this.switchPort("Auto"!==t.label?t.label:void 0)}switchPort(e){E(this.projectDir,"customPort",e),this._customPort=e,this._sbPortSwitcher.text=`$(plug) ${this._customPort?b().basename(this._customPort):"Auto"}`,this._sbPortSwitcher.show()}}W(F,"PROVIDER_TYPE","PlatformIO"),W(F,"TASKS_VIEW_ID","platformio-ide.projectTasks"),W(F,"AUTO_REFRESH_DELAY",500);class V{constructor(e){this.projectDir=e,this.controller=r().tests.createTestController("platformio-tests","PlatformIO Tests"),this.subscriptions=[this.controller],this.controller.refreshHandler=this.refreshHandler.bind(this),this.controller.resolveHandler=this.resolveHandler.bind(this),this.controller.createRunProfile("Run Tests",r().TestRunProfileKind.Run,this.runHandler.bind(this),!0)}dispose(){m(this.subscriptions)}async runCoreTestCommand(e){const t=b().join(a.core.getTmpDir(),`test-list-${Math.round(1e5*Math.random())}.json`);let o,i=new Error;try{const i=Object.assign({},process.env);i.PLATFORMIO_FORCE_ANSI="true",o=await a.core.getPIOCommandOutput(["test",...e,"--json-output-path",t],{projectDir:this.projectDir,runInQueue:!0,spawnOptions:{env:i}})}catch(e){i=e}try{await f.promises.access(t)}catch(e){throw i}const n=await a.misc.loadJSON(t);return await f.promises.unlink(t),[n,o||i.toString()]}async refreshHandler(){this.controller.items.replace([]),await this.resolveTestSuites()}async resolveHandler(e){e?console.warn("Not Implemented"):await this.resolveTestSuites()}async resolveTestSuites(){try{const[e]=await this.runCoreTestCommand(["--list-tests"]);e.test_suites.reduce(((e,t)=>e.set(t.env_name,[...e.get(t.env_name)||[],t])),new Map).forEach(((e,t)=>{const o=this.controller.createTestItem(`env:${t}`,t);o.children.replace(e.map((e=>this.controller.createTestItem(`suite:${t}/${e.test_name}`,e.test_name,e.test_dir?r().Uri.file(e.test_dir):void 0)))),this.controller.items.add(o)}))}catch(e){console.error(e);const t=this.controller.createTestItem("error","Error (expand for details)");t.error=e.toString(),this.controller.items.add(t)}}extractTestSuites(e){return e.id.startsWith("suite:")?[e]:e.id.startsWith("case:")?[e.parent]:e.id.startsWith("env:")?e.children:[]}async runHandler(e,t){const o=this.controller.createTestRun(e),i=[],n=[];for(e.include?e.include.forEach((e=>this.extractTestSuites(e).forEach((e=>i.includes(e)?void 0:i.push(e))))):this.controller.items.forEach((e=>e.children.forEach((e=>i.push(e))))),e.exclude&&e.exclude.forEach((e=>this.extractTestSuites(e).forEach((e=>n.push(e)))));i.length>0&&!t.isCancellationRequested;){const e=i.pop();n.includes(e)?o.skipped(e):await this._runTestSuite(o,e)}o.end()}async _runTestSuite(e,t){const o=t.parent.label,i=t.label,n=Date.now();e.started(t);try{const[s,a]=await this.runCoreTestCommand(["--environment",o,"--filter",i]);process.chdir(s.project_dir);const c=s.test_suites.find((e=>e.env_name===o&&e.test_name===i));switch(c.status){case"SKIPPED":e.skipped(t);break;case"ERRORED":e.failed(t,new(r().TestMessage)(c.test_cases[0].exception),Date.now()-n);break;default:this._processTestSuiteResult(e,t,c,n)}e.appendOutput(a,void 0,t)}catch(o){e.appendOutput(o.toString(),void 0,t),e.failed(t,new(r().TestMessage)(o.toString()),Date.now()-n)}}async _processTestSuiteResult(e,t,o,i){const n=t.parent.label,s=t.label;t.children.replace([]),o.test_cases.forEach((o=>{const a=this.controller.createTestItem(`case:${n}/${s}/${o.name}`,o.name,o.source?r().Uri.file(b().resolve(o.source.file)):void 0);switch(o.source&&o.source.line&&(a.range=new(r().Range)(o.source.line-1,0,o.source.line-1,0)),t.children.add(a),o.status){case"SKIPPED":e.skipped(a);break;case"ERRORED":e.failed(a,new(r().TestMessage)(o.exception),Date.now()-i);break;case"FAILED":e.failed(a,new(r().TestMessage)(o.message),Date.now()-i);break;default:e.passed(a,Date.now()-i)}o.stdout&&e.appendOutput(o.stdout,a.uri?new(r().Location)(a.uri,a.range):void 0,a)}))}}class B{constructor(){this._taskManager=void 0,this._sbEnvSwitcher=void 0,this._logOutputChannel=r().window.createOutputChannel("PlatformIO: Project Configuration"),this._pool=new a.project.ProjectPool({ide:"vscode",api:{logOutputChannel:this._logOutputChannel,createFileSystemWatcher:r().workspace.createFileSystemWatcher,createDirSystemWatcher:e=>r().workspace.createFileSystemWatcher(b().join(e,"*")),withIndexRebuildingProgress:e=>r().window.withProgress({location:{viewId:r().ProgressLocation.Notification},title:"PlatformIO: Configuring project",cancellable:!0},(async(t,o)=>await e(((e,o)=>t.report({message:e,increment:o})),o))),withTasksLoadingProgress:e=>r().window.withProgress({location:{viewId:F.TASKS_VIEW_ID}},(async()=>await r().window.withProgress({location:{viewId:r().ProgressLocation.Window},title:"PlatformIO: Loading tasks..."},e))),onDidChangeProjectConfig:e=>{this._taskManager&&this._taskManager.projectDir===e&&this._taskManager.requestRefresh(),this.saveActiveProjectState()},onDidNotifyError:p.bind(this)},settings:{autoPreloadEnvTasks:Y.getConfiguration("autoPreloadEnvTasks"),autoRebuild:Y.getConfiguration("autoRebuildAutocompleteIndex")}}),this.subscriptions=[this._pool,this._logOutputChannel,r().window.onDidChangeActiveTextEditor((()=>{if(!Y.getConfiguration("activateProjectOnTextEditorChange"))return;const e=S();e&&this.switchToProject(e)})),r().workspace.onDidChangeWorkspaceFolders((()=>this.switchToProject(this.findActiveProjectDir()))),r().commands.registerCommand("platformio-ide.rebuildProjectIndex",(()=>this._pool.getActiveObserver().rebuildIndex({force:!0}))),r().commands.registerCommand("platformio-ide.refreshProjectTasks",(()=>this._taskManager.refresh({force:!0}))),r().commands.registerCommand("platformio-ide._runProjectTask",(e=>this._taskManager.runTask(e)))],this.internalSubscriptions=[],this.registerEnvSwitcher(),this.switchToProject(this.findActiveProjectDir())}dispose(){this.disposeInternals(),m(this.internalSubscriptions),m(this.subscriptions)}findActiveProjectDir(){let e;return Y.getConfiguration("activateProjectOnTextEditorChange")&&(e=S()),e||this.getSelectedProjectDir()}getSelectedProjectDir(){const e=T(),t=this._pool.getActiveProjectDir();if(e.length<1)return;if(t&&e.find((e=>e===t)))return t;const o=Y.context.globalState.get("lastProjectDir");return o&&e.find((e=>e===o))?o:e[0]}saveActiveProjectState(){const e=this._pool.getActiveObserver();e&&E(e.projectDir,"activeEnv",e.getActiveEnvName())}async switchToProject(e,t={}){if(!e)return void console.error("switchProject => Please provide project folder");let o,i;this._sbEnvSwitcher.text="$(root-folder) Loading...",this._pool.getActiveObserver()&&(o=this._pool.getActiveObserver().projectDir,i=this._pool.getActiveObserver().getActiveEnvName());const n=this._pool.getObserver(e);"envName"in t?await n.switchProjectEnv(t.envName):n.getActiveEnvName()||await n.switchProjectEnv(y(e,"activeEnv")),o&&o===e&&i===n.getActiveEnvName()||(m(this.internalSubscriptions),this._pool.switch(e),this._taskManager=new F(e,n),this.internalSubscriptions.push(this._taskManager,new H(e),new V(e)),0===r().window.visibleTextEditors.length&&Y.getConfiguration("autoOpenPlatformIOIniFile")&&r().window.showTextDocument(r().Uri.file(b().join(e,"platformio.ini")))),this.showSelectedEnv(),this.saveActiveProjectState()}registerEnvSwitcher(){this._sbEnvSwitcher=r().window.createStatusBarItem("pio-env-switcher",r().StatusBarAlignment.Left,10),this._sbEnvSwitcher.name="PlatformIO: Project Environment Switcher",this._sbEnvSwitcher.tooltip="Switch PlatformIO Project Environment",this._sbEnvSwitcher.command="platformio-ide.switchProjectEnv",this._sbEnvSwitcher.text="$(root-folder) Loading...",this._sbEnvSwitcher.show(),this.subscriptions.push(this._sbEnvSwitcher,r().commands.registerCommand("platformio-ide.switchProjectEnv",(()=>this.pickProjectEnv())))}showSelectedEnv(){const e=this._pool.getActiveObserver();if(!e)return;const t=e.getActiveEnvName()?`env:${e.getActiveEnvName()}`:"Default";this._sbEnvSwitcher.text=`$(root-folder) ${t} (${b().basename(e.projectDir)})`}async pickProjectEnv(){const e=[];for(const t of T()){const o=this._pool.getObserver(t),i=await o.getProjectEnvs();if(!i||!i.length)continue;const n=`${b().basename(b().dirname(t))}/${b().basename(t)}`;e.push({projectDir:t,label:"Default",description:`$(folder) ${n} ("default_envs" from "platformio.ini")`}),e.push(...i.map((e=>({projectDir:t,envName:e.name,label:`env:${e.name}`,description:`$(folder) ${n}`}))))}const t=await r().window.showQuickPick(e,{matchOnDescription:!0});t&&this.switchToProject(t.projectDir,{envName:t.envName})}}class G extends s.TreeItem{constructor(e,t,o,i,n){super(e,i),t&&(this.command={title:e,command:t,arguments:o}),this.customChildren=n}}class K{getChildren(e){return e&&e.customChildren?e.customChildren:[new G("PIO Home",void 0,void 0,s.TreeItemCollapsibleState.Expanded,[new G("Open","platformio-ide.showHome"),new G("PIO Account","platformio-ide.showHome",["/account"]),new G("Inspect","platformio-ide.showHome",["/inspect"]),new G("Projects & Configuration","platformio-ide.showHome",["/projects"]),new G("Libraries","platformio-ide.showHome",["/libraries"]),new G("Boards","platformio-ide.showHome",["/boards"]),new G("Platforms","platformio-ide.showHome",["/platforms"]),new G("Devices","platformio-ide.showHome",["/device"])]),new G("Debug",void 0,void 0,s.TreeItemCollapsibleState.Expanded,[new G("Start Debugging","platformio-ide.startDebugging"),new G("Toggle Debug Console","workbench.debug.action.toggleRepl")]),new G("Miscellaneous",void 0,void 0,s.TreeItemCollapsibleState.Expanded,[new G("PlatformIO Core CLI","platformio-ide.openPIOCoreCLI"),new G("Clone Git Project","git.clone"),new G("New Terminal","platformio-ide.newTerminal"),new G("Upgrade PlatformIO Core","platformio-ide.upgradeCore"),new G("Show Release Notes","platformio-ide.showReleaseNotes")])]}getTreeItem(e){return e}}const Y=new class{constructor(){this.context=void 0,this.pioTerm=void 0,this.pioHome=void 0,this.ProjectManager=void 0,this.subscriptions=[],this._enterpriseSettings=void 0}async activate(e){this.context=e,this.pioHome=new I,this.pioTerm=new R,this.subscriptions.push(this.pioHome,this.pioTerm,new A);const t=T().length>0;console.info("PlatformIO IDE Global State",e.globalState.keys().reduce(((t,o)=>(t[o]=e.globalState.get(o),t)),{})),r().workspace.getConfiguration("extensions").has("showRecommendationsOnlyOnDemand")||r().workspace.getConfiguration("extensions").update("showRecommendationsOnlyOnDemand",!0),this.patchOSEnviron(),await this.startInstaller(!t),this.subscriptions.push(this.handleUseDevelopmentPIOCoreConfiguration()),r().commands.executeCommand("setContext","pioCoreReady",!0),"function"==typeof this.getEnterpriseSetting("onPIOCoreReady")&&await this.getEnterpriseSetting("onPIOCoreReady")(),this.subscriptions.push(r().window.registerTreeDataProvider("platformio-ide.quickAccess",new K)),this.registerGlobalCommands(),t?(r().commands.executeCommand("setContext","pioProjectReady",!0),this.subscriptions.push(new L({ignoreCommands:this.getEnterpriseSetting("ignoreToolbarCommands")})),this.initDebug(),this.ProjectManager=new B,this.subscriptions.push(this.ProjectManager),this.startPIOHome(),async function(){const e="rate-extension";let t=Y.context.globalState.get(e);if(t&&t.done)return;if(t&&t.callCounter||(t={callCounter:0,done:!1}),t.callCounter+=1,t.callCounter<13)return void Y.context.globalState.update(e,t);const o=await r().window.showInformationMessage("If you enjoy using PlatformIO IDE for VSCode, would you mind taking a moment to rate it? It will not take more than one minute. Thanks for your support!",{title:"Rate PlatformIO IDE Extension",isCloseAffordance:!1},{title:"Remind later",isCloseAffordance:!1},{title:"No, Thanks",isCloseAffordance:!0});switch(o?o.title:void 0){case"Rate PlatformIO IDE Extension":r().commands.executeCommand("vscode.open",r().Uri.parse("http://bit.ly/pio-vscode-rate")),t.done=!0;break;case"No, Thanks":t.done=!0;break;default:t.callCounter=0}Y.context.globalState.update(e,t)}(),async function(){const e=r().extensions.all.filter((e=>e.isActive&&n.includes(e.id)));if(0===e.length)return;const t=await r().window.showWarningMessage(`Conflicted extensions with IntelliSense service were detected (${e.map((e=>e.packageJSON.displayName||e.id)).join(", ")}). Code-completion, linting and navigation will not work properly. Please disable or uninstall them (Menu > View > Extensions).`,{title:"More details",isCloseAffordance:!1},{title:"Uninstall conflicted",isCloseAffordance:!1},{title:"Remind later",isCloseAffordance:!0});switch(t?t.title:void 0){case"More details":r().commands.executeCommand("vscode.open",r().Uri.parse("http://bit.ly/pio-vscode-conflicted-extensions"));break;case"Uninstall conflicted":e.forEach((e=>{r().commands.executeCommand("workbench.extensions.uninstallExtension",e.id)})),r().commands.executeCommand("workbench.action.reloadWindow")}}(),this.subscriptions.push(r().window.onDidChangeActiveTextEditor((e=>async function(e){if(!e||!e.document||!e.document.fileName)return;if(!e.document.fileName.endsWith(".ino"))return;const t="ino-warn-disabled";if(Y.context.globalState.get(t))return;const o=await r().window.showWarningMessage("C/C++ IntelliSense service does not support .INO files. It might lead to the spurious problems with code completion, linting, and debugging. Please convert .INO sketch into the valid .CPP file.",{title:"Show instruction",isCloseAffordance:!1},{title:"Do not show again",isCloseAffordance:!1},{title:"Remind later",isCloseAffordance:!0});switch(o?o.title:void 0){case"Show instruction":r().commands.executeCommand("vscode.open",r().Uri.parse("https://bit.ly/convert-ino-to-cpp"));break;case"Do not show again":Y.context.globalState.update(t,1)}}(e))))):this.subscriptions.push(new L({filterCommands:["platformio-ide.showHome"]}))}getConfiguration(e){return r().workspace.getConfiguration("platformio-ide").get(e)}loadEnterpriseSettings(){const e=r().extensions.all.find((e=>e.id.startsWith("platformio.")&&"platformio.platformio-ide"!==e.id&&e.isActive));return e&&e.exports?e.exports.settings:void 0}getEnterpriseSetting(e,t){return this._enterpriseSettings||(this._enterpriseSettings=this.loadEnterpriseSettings()),this._enterpriseSettings&&e in this._enterpriseSettings?this._enterpriseSettings[e]:t}patchOSEnviron(){const e={PLATFORMIO_IDE:h()},t=r().workspace.getConfiguration("http").get("proxy");!t||process.env.HTTP_PROXY||process.env.http_proxy||(e.HTTP_PROXY=t),!t||process.env.HTTPS_PROXY||process.env.https_proxy||(e.HTTPS_PROXY=t),r().workspace.getConfiguration("http").get("proxyStrictSSL")||(e.PLATFORMIO_SETTING_ENABLE_PROXY_STRICT_SSL="false"),this.getConfiguration("customPyPiIndexUrl")&&(e.PIP_INDEX_URL=this.getConfiguration("customPyPiIndexUrl")),a.proc.patchOSEnviron({caller:"vscode",extraPath:this.getConfiguration("customPATH"),extraVars:e})}async startInstaller(e){const t=new j(e);if(!t.locked())return await r().window.withProgress({location:r().ProgressLocation.Window,title:"PlatformIO"},(async e=>{e.report({message:"Initializing PlatformIO Core..."});try{return!await t.check()}catch(e){}return!0}))?await r().window.withProgress({location:r().ProgressLocation.Notification,title:"PlatformIO Installer"},(async e=>{e.report({message:"Installing PlatformIO IDE..."});const o=r().window.createOutputChannel("PlatformIO Installation");o.show(),o.appendLine("Installing PlatformIO IDE..."),o.appendLine("It may take a few minutes depending on your connection speed"),o.appendLine("Please do not close this window and do not open other folders until this process is completed."),o.appendLine("\nDebugging information is available via VSCode > Help > Toggle Developer Tools > Console.");try{t.lock(),await t.install(e),o.appendLine("PlatformIO IDE installed successfully.\n"),o.appendLine("Please restart VSCode.");const i="Reload Now";await r().window.showInformationMessage("PlatformIO IDE has been successfully installed! Please reload window",i)===i&&r().commands.executeCommand("workbench.action.reloadWindow")}catch(e){o.appendLine("Failed to install PlatformIO IDE."),p("Installation Manager",e)}finally{t.unlock()}return t.destroy(),!0})):void 0;r().window.showInformationMessage("PlatformIO IDE installation has been suspended, because PlatformIO IDE Installer is already started in another window.")}async startPIOHome(){!this.getConfiguration("disablePIOHomeStartup")&&a.home.showAtStartup("vscode")&&r().commands.executeCommand("platformio-ide.showHome")}registerGlobalCommands(){this.subscriptions.push(r().commands.registerCommand("platformio-ide.showHome",(e=>this.pioHome.toggle(e))),r().commands.registerCommand("platformio-ide.newTerminal",(()=>this.pioTerm.new().show())),r().commands.registerCommand("platformio-ide.openPIOCoreCLI",(()=>this.pioTerm.sendText("pio --help"))),r().commands.registerCommand("platformio-ide.runPIOCoreCommand",(e=>this.pioTerm.sendText(e))),r().commands.registerCommand("platformio-ide.startDebugging",(()=>{r().commands.executeCommand("workbench.view.debug"),r().commands.executeCommand("workbench.debug.action.toggleRepl"),r().commands.executeCommand("workbench.action.debug.start")})),r().commands.registerCommand("platformio-ide.upgradeCore",(()=>this.pioTerm.sendText("pio upgrade"))))}initDebug(){c.activate(this.context)}handleUseDevelopmentPIOCoreConfiguration(){return r().workspace.onDidChangeConfiguration((async e=>{if(!e.affectsConfiguration("platformio-ide.useDevelopmentPIOCore")||!this.getConfiguration("useBuiltinPIOCore"))return;const t=a.core.getEnvDir();if(t&&_().isDirectorySync(t)){await I.shutdownAllServers(),await a.misc.sleep(2e3);try{_().removeSync(t)}catch(e){console.warn(e)}r().window.showInformationMessage("Please restart VSCode to apply the changes.")}}))}disposeLocalSubscriptions(){r().commands.executeCommand("setContext","pioCoreReady",!1),r().commands.executeCommand("setContext","pioProjectReady",!1),m(this.subscriptions)}deactivate(){this.disposeLocalSubscriptions()}};function q(e){return Y.activate(e),Y}function X(){Y.deactivate(),c.deactivate()}module.exports=t})();
//# sourceMappingURL=extension.js.map